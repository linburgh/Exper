{
    "project": {
        "name": "TWave HTML5 API Doc",
        "description": "TWaver HTML5, an advanced HTML interface development framework, is based on three latest standards HTML5, CSS3 and JavaScipt.",
        "version": "TWaver HTML5 5.3.6",
        "url": "http://twaver.servasoft.com/",
        "logo": "../demo/images/logo.png"
    },
    "files": {
        "html5/jsdoc/twaver.sdoc.js": {
            "name": "html5/jsdoc/twaver.sdoc.js",
            "modules": {},
            "classes": {
                "twaver.AlarmElementMapping": 1,
                "twaver.AlarmSeverity": 1,
                "twaver.AlarmState": 1,
                "twaver.animate.Animate": 1,
                "twaver.BundleLinks": 1,
                "twaver.canvas.Attachment": 1,
                "twaver.canvas.ElementUI": 1,
                "twaver.canvas.interaction.BaseInteraction": 1,
                "twaver.canvas.OverviewInteraction": 1,
                "twaver.canvas.OverviewMSTouchInteraction": 1,
                "twaver.canvas.OverviewTouchInteraction": 1,
                "twaver.charts.ChartInteraction": 1,
                "twaver.charts.ChartMSTouchInteraction": 1,
                "twaver.charts.ChartTouchInteraction": 1,
                "twaver.charts.LegendPaneInteraction": 1,
                "twaver.charts.LegendPaneTouchInteraction": 1,
                "twaver.controls.ListBaseInteraction": 1,
                "twaver.controls.ListBaseTouchInteraction": 1,
                "twaver.controls.PopupMenu": 1,
                "twaver.controls.PropertySheetInteraction": 1,
                "twaver.controls.PropertySheetTouchInteraction": 1,
                "twaver.controls.SplitPaneInteraction": 1,
                "twaver.controls.SplitPaneTouchInteraction": 1,
                "twaver.controls.TableHeaderInteraction": 1,
                "twaver.controls.TableHeaderTouchInteraction": 1,
                "twaver.controls.TabPaneInteraction": 1,
                "twaver.controls.TabPaneTouchInteraction": 1,
                "twaver.ImageAsset": 1,
                "twaver.JsonSerializer": 1,
                "twaver.layout.AutoLayouter": 1,
                "twaver.layout.SpringLayouter": 1,
                "twaver.List": 1,
                "twaver.network.Attachment": 1,
                "twaver.network.ElementUI": 1,
                "twaver.network.interaction.BaseInteraction": 1,
                "twaver.network.OverviewInteraction": 1,
                "twaver.network.OverviewMSTouchInteraction": 1,
                "twaver.network.OverviewTouchInteraction": 1,
                "twaver.Pool": 1,
                "twaver.PropertyChangeDispatcher": 1,
                "twaver.PropertyPropagator": 1,
                "twaver.QuickFinder": 1,
                "twaver.SelectionModel": 1,
                "twaver.SerializationSettings": 1,
                "twaver.vector.Attachment": 1,
                "twaver.vector.BaseZoomManager": 1,
                "twaver.vector.ElementUI": 1,
                "twaver.vector.interaction.BaseInteraction": 1,
                "twaver.vector.OverviewInteraction": 1,
                "twaver.vector.OverviewMSTouchInteraction": 1,
                "twaver.vector.OverviewTouchInteraction": 1,
                "twaver.XmlSerializer": 1,
                "twaver.AlarmStatePropagator": 1,
                "twaver.AlarmStateStatistics": 1,
                "twaver.animate.AnimateBounds": 1,
                "twaver.animate.AnimateProperty": 1,
                "twaver.animate.AnimateScrollPosition": 1,
                "twaver.animate.AnimateSubNetwork": 1,
                "twaver.animate.AnimateXYZoom": 1,
                "twaver.animate.AnimateXZoom": 1,
                "twaver.animate.AnimateYZoom": 1,
                "twaver.animate.AnimateZoom": 1,
                "twaver.canvas.BasicAttachment": 1,
                "twaver.canvas.EditAttachment": 1,
                "twaver.canvas.IconsAttachment": 1,
                "twaver.canvas.interaction.CreateElementInteraction": 1,
                "twaver.canvas.interaction.CreateLinkInteraction": 1,
                "twaver.canvas.interaction.CreateShapeNodeInteraction": 1,
                "twaver.canvas.interaction.DefaultInteraction": 1,
                "twaver.canvas.interaction.EditInteraction": 1,
                "twaver.canvas.interaction.MagnifyInteraction": 1,
                "twaver.canvas.interaction.MoveInteraction": 1,
                "twaver.canvas.interaction.MSTouchInteraction": 1,
                "twaver.canvas.interaction.PanInteraction": 1,
                "twaver.canvas.interaction.ScrollInteraction": 1,
                "twaver.canvas.interaction.SelectInteraction": 1,
                "twaver.canvas.interaction.TouchInteraction": 1,
                "twaver.canvas.LinkUI": 1,
                "twaver.canvas.NodeUI": 1,
                "twaver.controls.ControlBase": 1,
                "twaver.controls.ListBaseMSTouchInteraction": 1,
                "twaver.controls.PropertySheetMSTouchInteraction": 1,
                "twaver.Data": 1,
                "twaver.DataBox": 1,
                "twaver.layout.CloudLayouter": 1,
                "twaver.network.BasicAttachment": 1,
                "twaver.network.EditAttachment": 1,
                "twaver.network.IconsAttachment": 1,
                "twaver.network.interaction.CreateElementInteraction": 1,
                "twaver.network.interaction.CreateLinkInteraction": 1,
                "twaver.network.interaction.CreateShapeNodeInteraction": 1,
                "twaver.network.interaction.DefaultInteraction": 1,
                "twaver.network.interaction.EditInteraction": 1,
                "twaver.network.interaction.MagnifyInteraction": 1,
                "twaver.network.interaction.MoveInteraction": 1,
                "twaver.network.interaction.MSTouchInteraction": 1,
                "twaver.network.interaction.PanInteraction": 1,
                "twaver.network.interaction.SelectInteraction": 1,
                "twaver.network.interaction.TouchInteraction": 1,
                "twaver.network.LinkUI": 1,
                "twaver.network.NodeUI": 1,
                "twaver.vector.BasicAttachment": 1,
                "twaver.vector.EditAttachment": 1,
                "twaver.vector.IconsAttachment": 1,
                "twaver.vector.interaction.CreateElementInteraction": 1,
                "twaver.vector.interaction.CreateLinkInteraction": 1,
                "twaver.vector.interaction.CreateShapeNodeInteraction": 1,
                "twaver.vector.interaction.DefaultInteraction": 1,
                "twaver.vector.interaction.EditInteraction": 1,
                "twaver.vector.interaction.MagnifyInteraction": 1,
                "twaver.vector.interaction.MSTouchInteraction": 1,
                "twaver.vector.interaction.TouchInteraction": 1,
                "twaver.vector.LinkUI": 1,
                "twaver.vector.LogicalZoomManager": 1,
                "twaver.vector.NodeUI": 1,
                "twaver.vector.PhysicalZoomManager": 1,
                "twaver.Alarm": 1,
                "twaver.AlarmBox": 1,
                "twaver.animate.AnimateCenterLocation": 1,
                "twaver.animate.AnimateLocation": 1,
                "twaver.canvas.AlarmAttachment": 1,
                "twaver.canvas.GridUI": 1,
                "twaver.canvas.GroupUI": 1,
                "twaver.canvas.interaction.CreateShapeLinkInteraction": 1,
                "twaver.canvas.LabelAttachment": 1,
                "twaver.canvas.LinkHandlerAttachment": 1,
                "twaver.canvas.Overview": 1,
                "twaver.canvas.RotatableNodeUI": 1,
                "twaver.canvas.ShapeLinkUI": 1,
                "twaver.canvas.ShapeNodeUI": 1,
                "twaver.charts.ChartPane": 1,
                "twaver.charts.LegendPane": 1,
                "twaver.Column": 1,
                "twaver.ColumnBox": 1,
                "twaver.controls.Accordion": 1,
                "twaver.controls.BorderPane": 1,
                "twaver.controls.SplitPane": 1,
                "twaver.controls.TableHeader": 1,
                "twaver.controls.TablePane": 1,
                "twaver.controls.TabPane": 1,
                "twaver.controls.TitlePane": 1,
                "twaver.controls.ViewBase": 1,
                "twaver.Element": 1,
                "twaver.ElementBox": 1,
                "twaver.Layer": 1,
                "twaver.LayerBox": 1,
                "twaver.network.AlarmAttachment": 1,
                "twaver.network.GridUI": 1,
                "twaver.network.GroupUI": 1,
                "twaver.network.interaction.CreateOrthogonalLinkInteraction": 1,
                "twaver.network.interaction.CreateShapeLinkInteraction": 1,
                "twaver.network.LabelAttachment": 1,
                "twaver.network.LinkHandlerAttachment": 1,
                "twaver.network.Overview": 1,
                "twaver.network.RotatableNodeUI": 1,
                "twaver.network.ShapeLinkUI": 1,
                "twaver.network.ShapeNodeUI": 1,
                "twaver.Property": 1,
                "twaver.PropertyBox": 1,
                "twaver.Tab": 1,
                "twaver.TabBox": 1,
                "twaver.vector.AlarmAttachment": 1,
                "twaver.vector.GridUI": 1,
                "twaver.vector.GroupUI": 1,
                "twaver.vector.interaction.CreateShapeLinkInteraction": 1,
                "twaver.vector.Label2Attachment": 1,
                "twaver.vector.LabelAttachment": 1,
                "twaver.vector.LinkHandlerAttachment": 1,
                "twaver.vector.MixedZoomManager": 1,
                "twaver.vector.Overview": 1,
                "twaver.vector.RotatableNodeUI": 1,
                "twaver.vector.ShapeLinkUI": 1,
                "twaver.vector.ShapeNodeUI": 1,
                "twaver.charts.ChartBase": 1,
                "twaver.controls.View": 1,
                "twaver.Dummy": 1,
                "twaver.Link": 1,
                "twaver.Node": 1,
                "twaver.canvas.Network": 1,
                "twaver.charts.DialChart": 1,
                "twaver.charts.PieChart": 1,
                "twaver.charts.RadarChart": 1,
                "twaver.charts.ScaleChart": 1,
                "twaver.controls.ListBase": 1,
                "twaver.controls.PropertySheet": 1,
                "twaver.Follower": 1,
                "twaver.LinkSubNetwork": 1,
                "twaver.network.Network": 1,
                "twaver.ShapeLink": 1,
                "twaver.vector.Network": 1,
                "twaver.charts.BarChart": 1,
                "twaver.charts.BubbleChart": 1,
                "twaver.charts.LineChart": 1,
                "twaver.controls.List": 1,
                "twaver.controls.TableBase": 1,
                "twaver.controls.Tree": 1,
                "twaver.Grid": 1,
                "twaver.Group": 1,
                "twaver.RotatableNode": 1,
                "twaver.ShapeNode": 1,
                "twaver.SubNetwork": 1,
                "twaver.Bus": 1,
                "twaver.controls.Table": 1,
                "twaver.controls.TreeTable": 1,
                "twaver.ShapeSubNetwork": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "twaver.AlarmElementMapping": {
            "name": "twaver.AlarmElementMapping",
            "shortname": "twaver.AlarmElementMapping",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24,
            "description": "这个类定义了告警网元之间的映射关系。一般告警和网元是一对一的关系，但有时如果想要达到一对多或多对一的关系时，就需要使用这个类来定义。一旦定义了告警和网元的关系后，当告警发生时，所有符合条件的网元上都会产生告警。\n想要更详细的了解告警网元映射这个类的使用，可以参考TWaver HTML5的Alarm Mapping Demo",
            "is_constructor": 1,
            "params": [
                {
                    "name": "alarmBox",
                    "description": "告警容器的对象",
                    "type": "twaver.AlarmBox"
                },
                {
                    "name": "elementBox",
                    "description": "网元容器对象",
                    "type": "twaver.ElementBox"
                }
            ],
            "return": {
                "description": "告警网元映射对象本身",
                "type": "twaver.AlarmElementMapping"
            }
        },
        "twaver.AlarmSeverity": {
            "name": "twaver.AlarmSeverity",
            "shortname": "twaver.AlarmSeverity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 66,
            "description": "这个类定义了电信拓扑中所有的告警级别。在TWaver中，当发生一个告警时，需要附带着告警的级别。告警级别的等级预示着告警的严重性。TWaver在这个类中预定义了六种告警级别，用户可以直接使用，也可以添加自己的告警级别。\n每一种告警级别都有一个昵称，通常昵称是用一个简短的字母来表示，用于显示在告警冒泡中。每种告警级别还定义了告警颜色，用户可以更改默认告警级别的颜色。一旦告警级别的颜色发生改变时，所有显示这种告警的视图都会随之更改",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "告警级别的值，值越大，告警级别越高",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "告警级别的名称",
                    "type": "String"
                },
                {
                    "name": "nickName",
                    "description": "告警级别的昵称，用于显示在告警冒泡中",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "告警级别的颜色",
                    "type": "String"
                },
                {
                    "name": "displayName",
                    "description": "告警级别显示的名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "告警级别对象本身",
                "type": "twaver.AlarmSeverity"
            }
        },
        "twaver.AlarmState": {
            "name": "twaver.AlarmState",
            "shortname": "twaver.AlarmState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 236,
            "description": "该类是用于描述网元告警状态的数据模型，包含该网元上的最高告警级别，最高传递告警级别，有多少个新发告警，多个确认告警等信息。\n在TWaver，如果想添加告警，可以通过在AlarmBox中添加一个Alarm或者可以在AlarmState上添加告警。两者都会达到添加告警的效果，但是需要注意的是使用Alarm对象会更改并存储关于告警的信息，而AlarmState上只是存储了告警的级别和数量。\n一般AlarmState用于存储已发生的历史告警。",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "发生告警的网元对象",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "告警级别对象本身",
                "type": "twaver.AlarmState"
            }
        },
        "twaver.animate.Animate": {
            "name": "twaver.animate.Animate",
            "shortname": "twaver.animate.Animate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 431,
            "description": "动画处理基类，用于渐变地改变网元位置、大小，组件的滚动条位置、缩放比例等",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "twaver.animate.Animate"
            }
        },
        "twaver.BundleLinks": {
            "name": "twaver.BundleLinks",
            "shortname": "twaver.BundleLinks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 496,
            "description": "这个类是用于管理绑定链路的集合",
            "is_constructor": 1,
            "params": [
                {
                    "name": "links",
                    "description": "绑定链路的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "siblings",
                    "description": "所有的兄弟链路",
                    "type": "twaver.List"
                }
            ],
            "return": {
                "description": "绑定链路对象本身",
                "type": "twaver.BundleLinks"
            }
        },
        "twaver.canvas.Attachment": {
            "name": "twaver.canvas.Attachment",
            "shortname": "twaver.canvas.Attachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 536,
            "description": "所有附件的基类，附件是和网元视图关联的视图对象，用于显示网元的附属信息，例如告警、名称标签、图标等。可以定义附件是否显示在最上层，也即会遮挡网元；为了让告警信息不被其他网元遮挡，告警等附件默认显示在最上层，也即告警显示在所有网元的上面",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInTop",
                    "description": "附件是否显示在最上层, 可选, 默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.Attachment"
            }
        },
        "twaver.canvas.ElementUI": {
            "name": "twaver.canvas.ElementUI",
            "shortname": "twaver.canvas.ElementUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 649,
            "description": "网元对应的视图对象，是所有网元视图（LinkUI、NodeUI等）的基类，代表网元在拓扑视图上的可视实体",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.ElementUI"
            }
        },
        "twaver.canvas.interaction.BaseInteraction": {
            "name": "twaver.canvas.interaction.BaseInteraction",
            "shortname": "twaver.canvas.interaction.BaseInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1013,
            "description": "所有拓扑交互处理器的基类，响应鼠标、键盘以及触摸事件；交互处理器封装了原始鼠标、键盘以及触摸事件，并派发了更加方便易用的交互事件（包含当前事件的数据源（一般为网元或者网元集合）以及动作（比如单击网元、双击网元、双击背景等等））。使用Network#addInteractionListener添加交互处理监听器。用户也可以继承此类实现自定义交互处理器，并通过Network#setInteractions加载交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.BaseInteraction"
            }
        },
        "twaver.canvas.OverviewInteraction": {
            "name": "twaver.canvas.OverviewInteraction",
            "shortname": "twaver.canvas.OverviewInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1093,
            "description": "鹰眼交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewInteraction"
            }
        },
        "twaver.canvas.OverviewMSTouchInteraction": {
            "name": "twaver.canvas.OverviewMSTouchInteraction",
            "shortname": "twaver.canvas.OverviewMSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1137,
            "description": "鹰眼触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.canvas.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.OverviewMSTouchInteraction"
            }
        },
        "twaver.canvas.OverviewTouchInteraction": {
            "name": "twaver.canvas.OverviewTouchInteraction",
            "shortname": "twaver.canvas.OverviewTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1175,
            "description": "鹰眼触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewTouchInteraction"
            }
        },
        "twaver.charts.ChartInteraction": {
            "name": "twaver.charts.ChartInteraction",
            "shortname": "twaver.charts.ChartInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1219,
            "description": "图表交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "chart",
                    "description": "图表",
                    "type": "twaver.charts.ChartBase"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.ChartInteraction"
            }
        },
        "twaver.charts.ChartMSTouchInteraction": {
            "name": "twaver.charts.ChartMSTouchInteraction",
            "shortname": "twaver.charts.ChartMSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1264,
            "description": "图表触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "chart",
                    "description": "图表",
                    "type": "twaver.charts.ChartBase"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.ChartMSTouchInteraction"
            }
        },
        "twaver.charts.ChartTouchInteraction": {
            "name": "twaver.charts.ChartTouchInteraction",
            "shortname": "twaver.charts.ChartTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1323,
            "description": "图表触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "chart",
                    "description": "图表",
                    "type": "twaver.charts.ChartBase"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.ChartTouchInteraction"
            }
        },
        "twaver.charts.LegendPaneInteraction": {
            "name": "twaver.charts.LegendPaneInteraction",
            "shortname": "twaver.charts.LegendPaneInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1361,
            "description": "图表图例交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legendPane",
                    "description": "图表图例",
                    "type": "twaver.charts.LegendPane"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.LegendPaneInteraction"
            }
        },
        "twaver.charts.LegendPaneTouchInteraction": {
            "name": "twaver.charts.LegendPaneTouchInteraction",
            "shortname": "twaver.charts.LegendPaneTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1385,
            "description": "图表图例触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legendPane",
                    "description": "图表图例",
                    "type": "twaver.charts.LegendPane"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.LegendPaneTouchInteraction"
            }
        },
        "twaver.controls.ListBaseInteraction": {
            "name": "twaver.controls.ListBaseInteraction",
            "shortname": "twaver.controls.ListBaseInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1409,
            "description": "列表控件交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "listBase",
                    "description": "列表基类",
                    "type": "twaver.controls.ListBase"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.ListBaseInteraction"
            }
        },
        "twaver.controls.ListBaseTouchInteraction": {
            "name": "twaver.controls.ListBaseTouchInteraction",
            "shortname": "twaver.controls.ListBaseTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1447,
            "description": "列表控件触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "listBase",
                    "description": "列表基类",
                    "type": "twaver.controls.ListBase"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.ListBaseTouchInteraction"
            }
        },
        "twaver.controls.PopupMenu": {
            "name": "twaver.controls.PopupMenu",
            "shortname": "twaver.controls.PopupMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1485,
            "description": "创建右键菜单",
            "is_constructor": 1,
            "params": [
                {
                    "name": "contextView",
                    "description": "HTML元素或者twaver.controles.ControlBase对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回右键菜单对象",
                "type": "twaver.controls.PopupMenu"
            }
        },
        "twaver.controls.PropertySheetInteraction": {
            "name": "twaver.controls.PropertySheetInteraction",
            "shortname": "twaver.controls.PropertySheetInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1808,
            "description": "属性页交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "propertySheet",
                    "description": "属性页",
                    "type": "twaver.controls.PropertySheet"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.PropertySheetInteraction"
            }
        },
        "twaver.controls.PropertySheetTouchInteraction": {
            "name": "twaver.controls.PropertySheetTouchInteraction",
            "shortname": "twaver.controls.PropertySheetTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1868,
            "description": "属性页触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "propertySheet",
                    "description": "属性页",
                    "type": "twaver.controls.PropertySheet"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.PropertySheetTouchInteraction"
            }
        },
        "twaver.controls.SplitPaneInteraction": {
            "name": "twaver.controls.SplitPaneInteraction",
            "shortname": "twaver.controls.SplitPaneInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1921,
            "description": "分割面板控件交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "splitPane",
                    "description": "分割面板控件",
                    "type": "twaver.controls.SplitPane"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.SplitPaneInteraction"
            }
        },
        "twaver.controls.SplitPaneTouchInteraction": {
            "name": "twaver.controls.SplitPaneTouchInteraction",
            "shortname": "twaver.controls.SplitPaneTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1966,
            "description": "分割面板触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "splitPane",
                    "description": "分割面板控件",
                    "type": "twaver.controls.SplitPane"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.SplitPaneTouchInteraction"
            }
        },
        "twaver.controls.TableHeaderInteraction": {
            "name": "twaver.controls.TableHeaderInteraction",
            "shortname": "twaver.controls.TableHeaderInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2011,
            "description": "表头控件交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tableHeader",
                    "description": "表头控件",
                    "type": "twaver.controls.TableHeader"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TableHeaderInteraction"
            }
        },
        "twaver.controls.TableHeaderTouchInteraction": {
            "name": "twaver.controls.TableHeaderTouchInteraction",
            "shortname": "twaver.controls.TableHeaderTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2094,
            "description": "表头控件触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tableHeader",
                    "description": "表头控件",
                    "type": "twaver.controls.TableHeader"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TableHeaderTouchInteraction"
            }
        },
        "twaver.controls.TabPaneInteraction": {
            "name": "twaver.controls.TabPaneInteraction",
            "shortname": "twaver.controls.TabPaneInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2170,
            "description": "选项卡面板交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tabPane",
                    "description": "选项卡面板控件",
                    "type": "twaver.controls.TabPane"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TabPaneInteraction"
            }
        },
        "twaver.controls.TabPaneTouchInteraction": {
            "name": "twaver.controls.TabPaneTouchInteraction",
            "shortname": "twaver.controls.TabPaneTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2253,
            "description": "选项卡面板触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tabPane",
                    "description": "选项卡面板控件",
                    "type": "twaver.controls.TabPane"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TabPaneTouchInteraction"
            }
        },
        "twaver.ImageAsset": {
            "name": "twaver.ImageAsset",
            "shortname": "twaver.ImageAsset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5817,
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.ImageAsset"
            }
        },
        "twaver.JsonSerializer": {
            "name": "twaver.JsonSerializer",
            "shortname": "twaver.JsonSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5885,
            "description": "JsonSerializer是用于对数据容器中的数据进行序列化和反序列化的。\nDataBox上提供了一种功能，可以直接从JSON文件中导入数据，或将DataBox中的数据导出到JSON文件。它是通过JsonSerializer这个类来实现的。\nJsonSerializer是数据容器上的一种功能，可以在序列化时进行一些设置来更改导出时的规则",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dataBox",
                    "description": "进行序列化的数据容器",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "settings",
                    "description": "序列化设置的对象",
                    "type": "twaver.SerializationSettings",
                    "optional": true
                },
                {
                    "name": "filterFunction",
                    "description": "序列化时的过滤函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "序列化对象本身",
                "type": "twaver.JsonSerializer"
            }
        },
        "twaver.layout.AutoLayouter": {
            "name": "twaver.layout.AutoLayouter",
            "shortname": "twaver.layout.AutoLayouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6026,
            "description": "对指定网元容器的网元进行自动布局，使网元按一定的规则自动排列，预定义的布局类型有如下几种：\nround 圆形布局\nsymmetry 对称布局\nhierarchic 层次布局\ntopbottom 从上到下布局\nbottomtop 从下到上布局\nrightleft 从右到左布局\nleftright 从左到右布局",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器",
                    "type": "twaver.ElementBox"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.layout.AutoLayouter"
            },
            "example": [
                " var autoLayouter = new twaver.layout.AutoLayouter(box);\nautoLayouter.doLayout('round');"
            ]
        },
        "twaver.layout.SpringLayouter": {
            "name": "twaver.layout.SpringLayouter",
            "shortname": "twaver.layout.SpringLayouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6235,
            "description": "对指定的拓扑进行弹簧布局，自动将网元根据连线关系分开，最终根据网元之间的排斥力趋于平衡，适用于所有节点相互有连线的拓扑结构",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.layout.SpringLayouter"
            },
            "example": [
                " var springLayouter = new twaver.layout.SpringLayouter(network);\nspringLayouter.start();"
            ]
        },
        "twaver.List": {
            "name": "twaver.List",
            "shortname": "twaver.List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6372,
            "description": "构造函数",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "twaver.List"
            }
        },
        "twaver.network.Attachment": {
            "name": "twaver.network.Attachment",
            "shortname": "twaver.network.Attachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6514,
            "description": "所有附件的基类，附件是和网元视图关联的视图对象，用于显示网元的附属信息，例如告警、名称标签、图标等。可以定义附件是否显示在附件层，附件层在网元层的上面，所以会遮挡网元；为了让告警信息不被其他网元遮挡，告警等附件默认显示在附件层，也即告警显示在所有网元的上面",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Attachment"
            }
        },
        "twaver.network.ElementUI": {
            "name": "twaver.network.ElementUI",
            "shortname": "twaver.network.ElementUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6626,
            "description": "网元对应的视图对象，是所有网元视图（LinkUI、NodeUI等）的基类，代表网元在拓扑视图上的可视实体",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.ElementUI"
            }
        },
        "twaver.network.interaction.BaseInteraction": {
            "name": "twaver.network.interaction.BaseInteraction",
            "shortname": "twaver.network.interaction.BaseInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7000,
            "description": "所有拓扑交互处理器的基类，响应鼠标、键盘以及触摸事件；交互处理器封装了原始鼠标、键盘以及触摸事件，并派发了更加方便易用的交互事件（包含当前事件的数据源（一般为网元或者网元集合）以及动作（比如单击网元、双击网元、双击背景等等））。使用Network#addInteractionListener添加交互处理监听器。用户也可以继承此类实现自定义交互处理器，并通过Network#setInteractions加载交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.BaseInteraction"
            }
        },
        "twaver.network.OverviewInteraction": {
            "name": "twaver.network.OverviewInteraction",
            "shortname": "twaver.network.OverviewInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7041,
            "description": "鹰眼交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewInteraction"
            }
        },
        "twaver.network.OverviewMSTouchInteraction": {
            "name": "twaver.network.OverviewMSTouchInteraction",
            "shortname": "twaver.network.OverviewMSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7085,
            "description": "鹰眼触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewMSTouchInteraction"
            }
        },
        "twaver.network.OverviewTouchInteraction": {
            "name": "twaver.network.OverviewTouchInteraction",
            "shortname": "twaver.network.OverviewTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7123,
            "description": "鹰眼触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewTouchInteraction"
            }
        },
        "twaver.Pool": {
            "name": "twaver.Pool",
            "shortname": "twaver.Pool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7167,
            "description": "HTML元素缓存池，根据需要动态创建HTML元素，并重复使用",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tagName",
                    "description": "缓存的HTML元素标签",
                    "type": "String"
                },
                {
                    "name": "redundancy",
                    "description": "冗余HTML元素缓存数，可选，默认值为2",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Pool"
            }
        },
        "twaver.PropertyChangeDispatcher": {
            "name": "twaver.PropertyChangeDispatcher",
            "shortname": "twaver.PropertyChangeDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7231,
            "description": "属性变化事件派发器，继承了twaver.EventDispatcher，用于派发属性变化事件",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "twaver.PropertyChangeDispatcher"
            }
        },
        "twaver.PropertyPropagator": {
            "name": "twaver.PropertyPropagator",
            "shortname": "twaver.PropertyPropagator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7285,
            "description": "属性传播定义了传播的一种规则，当一个属性值发生更改时，它会传播到相关的对象上。当然你可以定义传播的方向，哪些属性需要传播，哪些网元可以传播。\n属性传播是和数据容器一起工作的",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "propertyName",
                    "description": "属性名",
                    "type": "String"
                },
                {
                    "name": "propertyType",
                    "description": "属性类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "属性传播对象",
                "type": "twaver.PropertyPropagator"
            }
        },
        "twaver.QuickFinder": {
            "name": "twaver.QuickFinder",
            "shortname": "twaver.QuickFinder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7384,
            "description": "快速查找这个类提供了一种快速搜索DataBox的功能，用户可以通过这个类中提供的方法来根据数据上的某个属性快速地查询出匹配的数据。当然用户也可以通过遍历Databox实现查找的功能，但是如果是频繁的遍历和循环，会对性能有一定的影响。而且它没有快速查找这个类的效率高。\n\n快速查找通过构造函数来绑定数据容器和需要进行索引的属性，一旦绑定之后，当数据容器中索引的属性值发生变化时，快速查找中数据也会进行相应的修改。",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器对象",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "propertyName",
                    "description": "索引的属性名称",
                    "type": "String"
                },
                {
                    "name": "propertyType",
                    "description": "索引的属性类型，属性类型的可选值为： 'accessor':get/set方法的属性 'style'：样式属性 'client'：自定义的属性。默认为‘accessor’",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "valueFunction",
                    "description": "需要包含在返回结果中值的函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "filterFunction",
                    "description": "过滤出不包含在返回结果中的值的过滤器",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "快速查找对象本身",
                "type": "twaver.QuickFinder"
            }
        },
        "twaver.SelectionModel": {
            "name": "twaver.SelectionModel",
            "shortname": "twaver.SelectionModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7498,
            "description": "选择容器是包含在数据容器中的。选择容器用于管理数据容器中所有选中的对象。例如当选中某个对象时，它将会同时添加到选择容器中，当取消选中某个对象时，便会从选择容器中删除。\n通过选择容器，可以更方便的访问或遍历所有选中的数据，也可以更方便地选中和取消某个数据",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "return": {
                "description": "选择容器对象本身",
                "type": "twaver.SelectionModel"
            }
        },
        "twaver.SerializationSettings": {
            "name": "twaver.SerializationSettings",
            "shortname": "twaver.SerializationSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7681,
            "description": "这个类是一个序列化时参数的设置类。当数据容器或数据进行序列化时，可以进行一些参数的设置",
            "is_constructor": 1,
            "return": {
                "description": "序列化设置对象本身",
                "type": "twaver.SerializationSettings"
            }
        },
        "twaver.vector.Attachment": {
            "name": "twaver.vector.Attachment",
            "shortname": "twaver.vector.Attachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8500,
            "description": "所有附件的基类，附件是和网元视图关联的视图对象，用于显示网元的附属信息，例如告警、名称标签、图标等。可以定义附件是否显示在最上层，也即会遮挡网元；为了让告警信息不被其他网元遮挡，告警等附件默认显示在最上层，也即告警显示在所有网元的上面",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInTop",
                    "description": "附件是否显示在最上层, 可选, 默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.Attachment"
            }
        },
        "twaver.vector.BaseZoomManager": {
            "name": "twaver.vector.BaseZoomManager",
            "shortname": "twaver.vector.BaseZoomManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8620,
            "description": "基本缩放管理器构造函数",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑组件",
                    "type": "twaver.vector.Network"
                }
            ],
            "return": {
                "description": "基本缩放管理器",
                "type": "twaver.vector.BaseZoomManager"
            }
        },
        "twaver.vector.ElementUI": {
            "name": "twaver.vector.ElementUI",
            "shortname": "twaver.vector.ElementUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8721,
            "description": "网元对应的视图对象，是所有网元视图（LinkUI、NodeUI等）的基类，代表网元在拓扑视图上的可视实体",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.ElementUI"
            }
        },
        "twaver.vector.interaction.BaseInteraction": {
            "name": "twaver.vector.interaction.BaseInteraction",
            "shortname": "twaver.vector.interaction.BaseInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9091,
            "description": "所有拓扑交互处理器的基类，响应鼠标、键盘以及触摸事件；交互处理器封装了原始鼠标、键盘以及触摸事件，并派发了更加方便易用的交互事件（包含当前事件的数据源（一般为网元或者网元集合）以及动作（比如单击网元、双击网元、双击背景等等））。使用Network#addInteractionListener添加交互处理监听器。用户也可以继承此类实现自定义交互处理器，并通过Network#setInteractions加载交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.BaseInteraction"
            }
        },
        "twaver.vector.OverviewInteraction": {
            "name": "twaver.vector.OverviewInteraction",
            "shortname": "twaver.vector.OverviewInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9180,
            "description": "鹰眼交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewInteraction"
            }
        },
        "twaver.vector.OverviewMSTouchInteraction": {
            "name": "twaver.vector.OverviewMSTouchInteraction",
            "shortname": "twaver.vector.OverviewMSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9224,
            "description": "鹰眼触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.canvas.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.OverviewMSTouchInteraction"
            }
        },
        "twaver.vector.OverviewTouchInteraction": {
            "name": "twaver.vector.OverviewTouchInteraction",
            "shortname": "twaver.vector.OverviewTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9262,
            "description": "鹰眼触摸交互处理器",
            "is_constructor": 1,
            "params": [
                {
                    "name": "overview",
                    "description": "鹰眼",
                    "type": "twaver.network.Overview"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.OverviewTouchInteraction"
            }
        },
        "twaver.XmlSerializer": {
            "name": "twaver.XmlSerializer",
            "shortname": "twaver.XmlSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9306,
            "description": "XMLserializer是用于对数据容器中的数据进行序列化和反序列化的。\nDataBox上提供了一种功能，可以直接从XML文件中导入数据，或将DataBox中的数据导出到XML文件。它是通过XmlSerializer这个类来实现的。\nXmlSerializer是数据容器上的一种功能，可以在序列化时进行一些设置来更改导出时的规则。",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dataBox",
                    "description": "进行序列化的数据容器",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "settings",
                    "description": "序列化设置对象",
                    "type": "twaver.SerializationSettings",
                    "optional": true
                },
                {
                    "name": "filterFunction",
                    "description": "过滤的函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "序列化对象本身",
                "type": "twaver.XmlSerializer"
            }
        },
        "twaver.AlarmStatePropagator": {
            "name": "twaver.AlarmStatePropagator",
            "shortname": "twaver.AlarmStatePropagator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9444,
            "description": "这个类用于定义告警状态传播的规则。告警传播是网元容器的一部分，当网元上发生告警时，会将这个告警传播到相关的网元上。默认的传播规则是，传播到发生告警网元的父亲上。",
            "is_constructor": 1,
            "extends": "twaver.PropertyPropagator",
            "params": [
                {
                    "name": "elementBox",
                    "description": "绑定的网元容器",
                    "type": "twaver.ElementBox"
                }
            ],
            "return": {
                "description": "告警状态传播对象",
                "type": "twaver.AlarmStatePropagator"
            }
        },
        "twaver.AlarmStateStatistics": {
            "name": "twaver.AlarmStateStatistics",
            "shortname": "twaver.AlarmStateStatistics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9457,
            "description": "告警统计是用于统计网元容器上所有的告警状态的数量。它需要和网元容器绑定，当网元容器上某个网元的告警状态发生改变时，告警统计类就会自动计算告警的数量。\n这个类可以用于驱动柱状图，饼状图的告警信息的显示",
            "is_constructor": 1,
            "extends": "twaver.PropertyChangeDispatcher",
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器",
                    "type": "twaver.ElementBox"
                }
            ],
            "return": {
                "description": "告警统计对象本身",
                "type": "twaver.AlarmStateStatistics"
            }
        },
        "twaver.animate.AnimateBounds": {
            "name": "twaver.animate.AnimateBounds",
            "shortname": "twaver.animate.AnimateBounds",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9577,
            "description": "以动画效果渐变更改节点位置以及大小",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                },
                {
                    "name": "newBounds",
                    "description": "节点新的位置及大小，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateBounds"
            }
        },
        "twaver.animate.AnimateProperty": {
            "name": "twaver.animate.AnimateProperty",
            "shortname": "twaver.animate.AnimateProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9592,
            "description": "以动画效果更改一组对象的属性",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "objects",
                    "description": "需要更改属性的对象集合",
                    "type": "twaver.List"
                },
                {
                    "name": "newValues",
                    "description": "新值集合",
                    "type": "twaver.List"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateProperty"
            }
        },
        "twaver.animate.AnimateScrollPosition": {
            "name": "twaver.animate.AnimateScrollPosition",
            "shortname": "twaver.animate.AnimateScrollPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9624,
            "description": "以动画效果更改组件垂直和水平滚动条位置",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "view",
                    "description": "HTML DIV元素",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "newHorizontalOffset",
                    "description": "新的水平滚动条位置",
                    "type": "Number"
                },
                {
                    "name": "newVerticalOffset",
                    "description": "新的垂直滚动条位置",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateScrollPosition"
            }
        },
        "twaver.animate.AnimateSubNetwork": {
            "name": "twaver.animate.AnimateSubNetwork",
            "shortname": "twaver.animate.AnimateSubNetwork",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9639,
            "description": "以动画效果切换当前子网",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "subNetwork",
                    "description": "子网",
                    "type": "twaver.SubNetwork"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateSubNetwork"
            }
        },
        "twaver.animate.AnimateXYZoom": {
            "name": "twaver.animate.AnimateXYZoom",
            "shortname": "twaver.animate.AnimateXYZoom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9654,
            "description": "以动画效果更改水平和垂直缩放比例",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "view",
                    "description": "视图",
                    "type": "twaver.controls.View"
                },
                {
                    "name": "newXZoom",
                    "description": "新的水平缩放比例",
                    "type": "Number"
                },
                {
                    "name": "newYZoom",
                    "description": "新的垂直缩放比例",
                    "type": "Number"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateXYZoom"
            }
        },
        "twaver.animate.AnimateXZoom": {
            "name": "twaver.animate.AnimateXZoom",
            "shortname": "twaver.animate.AnimateXZoom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9670,
            "description": "以动画效果更改水平缩放比例",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "view",
                    "description": "视图",
                    "type": "twaver.controls.View"
                },
                {
                    "name": "newXZoom",
                    "description": "新的水平缩放比例",
                    "type": "Number"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateXZoom"
            }
        },
        "twaver.animate.AnimateYZoom": {
            "name": "twaver.animate.AnimateYZoom",
            "shortname": "twaver.animate.AnimateYZoom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9685,
            "description": "以动画效果更改垂直缩放比例",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "view",
                    "description": "视图",
                    "type": "twaver.controls.View"
                },
                {
                    "name": "newYZoom",
                    "description": "新的垂直缩放比例",
                    "type": "Number"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateYZoom"
            }
        },
        "twaver.animate.AnimateZoom": {
            "name": "twaver.animate.AnimateZoom",
            "shortname": "twaver.animate.AnimateZoom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9700,
            "description": "以动画效果更改缩放比例",
            "is_constructor": 1,
            "extends": "twaver.animate.Animate",
            "params": [
                {
                    "name": "view",
                    "description": "视图",
                    "type": "twaver.controls.View"
                },
                {
                    "name": "newZoom",
                    "description": "新的缩放比例",
                    "type": "Number"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateZoom"
            }
        },
        "twaver.canvas.BasicAttachment": {
            "name": "twaver.canvas.BasicAttachment",
            "shortname": "twaver.canvas.BasicAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9715,
            "description": "告警附件和标签附件等的基类，用于显示文本信息的附件",
            "is_constructor": 1,
            "extends": "twaver.canvas.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.BasicAttachment"
            }
        },
        "twaver.canvas.EditAttachment": {
            "name": "twaver.canvas.EditAttachment",
            "shortname": "twaver.canvas.EditAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9960,
            "description": "编辑附件，用于显示网元是否可编辑。对于可编辑的节点，节点周围显示8个可以改变网元大小的小方块；对于多边形和折线，每个可移动点显示为黄色的小圆球",
            "is_constructor": 1,
            "extends": "twaver.canvas.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.EditAttachment"
            }
        },
        "twaver.canvas.IconsAttachment": {
            "name": "twaver.canvas.IconsAttachment",
            "shortname": "twaver.canvas.IconsAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9995,
            "description": "图标组附件，用于显示一组图标",
            "is_constructor": 1,
            "extends": "twaver.canvas.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.IconsAttachment"
            }
        },
        "twaver.canvas.interaction.CreateElementInteraction": {
            "name": "twaver.canvas.interaction.CreateElementInteraction",
            "shortname": "twaver.canvas.interaction.CreateElementInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10016,
            "description": "创建节点交互处理器，当点击拓扑时，创建指定类型的节点，并设置此节点中心位置为点击位置，可以用Network#setCreateElementInteractions快速切换当前交互模式为创建节点模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrElementFunction",
                    "description": "节点类型或者节点生成器方法，可选，默认值为twaver.Node",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateElementInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateElementInteraction(network, twaver.SubNetwork),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateElementInteraction(network,\n    function (point) {\n                    var element = new twaver.Node();\n                    element.setName(element.getClassName());\n                    element.setCenterLocation(point);\n                    var parent = network.getElementAt(point);\n                    if (parent && parent instanceof twaver.Group) {\n                        element.setParent(parent);\n                    }\n                    return element;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.canvas.interaction.CreateLinkInteraction": {
            "name": "twaver.canvas.interaction.CreateLinkInteraction",
            "shortname": "twaver.canvas.interaction.CreateLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10056,
            "description": "创建连线交互处理器，在拓扑上单击任意网元设置连线的开始节点，再次点击任意网元设置连线的结束节点，可以用Network#setCreateElementInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "连线类型或者连线生成器方法，可选，默认值为twaver.Link",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateLinkInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateLinkInteraction(network, twaver.Link),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateLinkInteraction(network,\n    function (fromNode, toNode) {\n        var link = new twaver.Link();\n        link.setFromNode(fromNode);\n        link.setToNode(toNode);\n        link.setStyle('link.color', 'red');\n        return link;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.canvas.interaction.CreateShapeNodeInteraction": {
            "name": "twaver.canvas.interaction.CreateShapeNodeInteraction",
            "shortname": "twaver.canvas.interaction.CreateShapeNodeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10144,
            "description": "创建多边形交互处理器，在Network上多次点击不同位置设置多边形的points属性，最后双击结束，可以用Network#setCreateShapeNodeInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "String"
                },
                {
                    "name": "typeOrShapeNodeFunction",
                    "description": "多边形类型或者多边形生成器方法，可选，默认值为twaver.ShapeNode",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateShapeNodeInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateShapeNodeInteraction(network, twaver.ShapeNode),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateShapeNodeInteraction(network,\n    function (points) {\n        var shapeNode = new twaver.ShapeNode();\n        shapeNode.setStyle('vector.fill.color', 'red');\n        if(points){\n            shapeNode.setPoints(points);\n        }\n        return shapeNode;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.canvas.interaction.DefaultInteraction": {
            "name": "twaver.canvas.interaction.DefaultInteraction",
            "shortname": "twaver.canvas.interaction.DefaultInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10195,
            "description": "默认交互处理器，处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等交互动作",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.DefaultInteraction"
            }
        },
        "twaver.canvas.interaction.EditInteraction": {
            "name": "twaver.canvas.interaction.EditInteraction",
            "shortname": "twaver.canvas.interaction.EditInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10238,
            "description": "编辑交互处理器，处理改变网元大小、更改折线（ShapeLink）和多边形（ShapeNode）的轨迹等操作，可以用Network#setEditInteractions快速切换当前交互模式为编辑模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.EditInteraction"
            }
        },
        "twaver.canvas.interaction.MagnifyInteraction": {
            "name": "twaver.canvas.interaction.MagnifyInteraction",
            "shortname": "twaver.canvas.interaction.MagnifyInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10316,
            "description": "放大镜交互处理器",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "scale",
                    "description": "缩放比例，可选，默认值为2",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xRadius",
                    "description": "水平半径，可选，默认值为100",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yRadius",
                    "description": "垂直半径，可选，默认值为100",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.MagnifyInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.SelectInteraction(network),\n    new twaver.network.interaction.MoveInteraction(network),\n    new twaver.network.interaction.DefaultInteraction(network),\n    new twaver.network.interaction.MagnifyInteraction(network)\n]);"
            ]
        },
        "twaver.canvas.interaction.MoveInteraction": {
            "name": "twaver.canvas.interaction.MoveInteraction",
            "shortname": "twaver.canvas.interaction.MoveInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10443,
            "description": "移动网元交互处理器",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.MoveInteraction"
            }
        },
        "twaver.canvas.interaction.MSTouchInteraction": {
            "name": "twaver.canvas.interaction.MSTouchInteraction",
            "shortname": "twaver.canvas.interaction.MSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10521,
            "description": "触摸交互处理器",
            "is_constructor": 1,
            "extends": "twaver.canvas.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑图组件",
                    "type": "twaver.canvas.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.interaction.MSTouchInteraction"
            }
        },
        "twaver.canvas.interaction.PanInteraction": {
            "name": "twaver.canvas.interaction.PanInteraction",
            "shortname": "twaver.canvas.interaction.PanInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10576,
            "description": "手抓图交互处理器，拖动拓扑时水平或垂直滚动拓扑，可以用Network#setPanInteractions快速切换当前拓扑交互模式为手抓图模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.PanInteraction"
            }
        },
        "twaver.canvas.interaction.ScrollInteraction": {
            "name": "twaver.canvas.interaction.ScrollInteraction",
            "shortname": "twaver.canvas.interaction.ScrollInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10610,
            "description": "滚动交互模式",
            "is_constructor": 1,
            "extends": "twaver.canvas.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑图组件",
                    "type": "twaver.canvas.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.interaction.ScrollInteraction"
            }
        },
        "twaver.canvas.interaction.SelectInteraction": {
            "name": "twaver.canvas.interaction.SelectInteraction",
            "shortname": "twaver.canvas.interaction.SelectInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10720,
            "description": "选择网元交互模式，点击空白区域时清空选中，点击网元时选中网元，框选时，选中框选区域中的网元。\n框选时，选择模式（当框选网元时，哪些网元会被选中）会影响如何选择网元，默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "is_constructor": 1,
            "extends": "twaver.canvas.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.SelectInteraction"
            }
        },
        "twaver.canvas.interaction.TouchInteraction": {
            "name": "twaver.canvas.interaction.TouchInteraction",
            "shortname": "twaver.canvas.interaction.TouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10773,
            "description": "触摸交互处理器，可以用Network#setTouchInteractions切换当前交互模式为触摸模式",
            "is_constructor": 1,
            "extends": "twaver.canvas.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.TouchInteraction"
            }
        },
        "twaver.canvas.LinkUI": {
            "name": "twaver.canvas.LinkUI",
            "shortname": "twaver.canvas.LinkUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10814,
            "description": "连线对应的视图对象，用连线的样式在连线的起始和结束节点之间画一条线",
            "is_constructor": 1,
            "extends": "twaver.network.ElementUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.LinkUI"
            }
        },
        "twaver.canvas.NodeUI": {
            "name": "twaver.canvas.NodeUI",
            "shortname": "twaver.canvas.NodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10938,
            "description": "节点对应的视图对象，是其他网元对象（组、网格、多边形和子网等）的基类",
            "is_constructor": 1,
            "extends": "twaver.canvas.ElementUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.NodeUI"
            }
        },
        "twaver.controls.ControlBase": {
            "name": "twaver.controls.ControlBase",
            "shortname": "twaver.controls.ControlBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11043,
            "description": "组件基类，TWaver所有组件基类",
            "is_constructor": 1,
            "extends": "twaver.PropertyChangeDispatcher",
            "return": {
                "description": "",
                "type": "twaver.controls.ControlBase"
            }
        },
        "twaver.controls.ListBaseMSTouchInteraction": {
            "name": "twaver.controls.ListBaseMSTouchInteraction",
            "shortname": "twaver.controls.ListBaseMSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11102,
            "description": "列表控件触摸交互处理器",
            "is_constructor": 1,
            "extends": "twaver.controls.ListBaseInteraction",
            "params": [
                {
                    "name": "listBase",
                    "description": "列表基类",
                    "type": "twaver.controls.ListBase"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.ListBaseMSTouchInteraction"
            }
        },
        "twaver.controls.PropertySheetMSTouchInteraction": {
            "name": "twaver.controls.PropertySheetMSTouchInteraction",
            "shortname": "twaver.controls.PropertySheetMSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11136,
            "description": "属性页触摸交互处理器",
            "is_constructor": 1,
            "extends": "twaver.controls.PropertySheetInteraction",
            "params": [
                {
                    "name": "propertySheet",
                    "description": "属性页",
                    "type": "twaver.controls.PropertySheet"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.PropertySheetMSTouchInteraction"
            }
        },
        "twaver.Data": {
            "name": "twaver.Data",
            "shortname": "twaver.Data",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11170,
            "description": "构造函数\n\n数据是TWaver中最基本的元素，它是所有网元的基类。它存在于数据容器中，被数据容器所管理。\n数据定义了拓扑元素中最基本的属性，比如ID，Name，Icon，Parent等。\n数据中还定义了事件派发的机制，当数据中的属性发生变化时，就会派发出属性更改的事件",
            "is_constructor": 1,
            "extends": "twaver.PropertyChangeDispatcher",
            "params": [
                {
                    "name": "id",
                    "description": "ID为数据对象的唯一标识。如果为null，TWaver内部会按照一定的规则赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是数据的ID，如果为Object类型，可以传入一个带数据属性的对象，比如： var data = new twaver.Data({      image:'tw130',      name:'TWaver Router',      clients:{'ip':'192.168.1.152'} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "数据对象本身",
                "type": "twaver.Data"
            }
        },
        "twaver.DataBox": {
            "name": "twaver.DataBox",
            "shortname": "twaver.DataBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11542,
            "description": "数据容器是用于管理数据对象的。它是一种不可见的对象，在TWaver的MVC框架中处于M（模型）层，它是所有视图的数据提供者，比如network，table，tree，propertySheet等。\n数据容器可以管理数据对象的增减事件变化，也可以监听到数据的属性事件变化。\n数据容器上包含着选择容器，用于管理所有选中的数据",
            "is_constructor": 1,
            "extends": "twaver.PropertyChangeDispatcher",
            "params": [
                {
                    "name": "name",
                    "description": "数据容器的名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.DataBox"
            }
        },
        "twaver.layout.CloudLayouter": {
            "name": "twaver.layout.CloudLayouter",
            "shortname": "twaver.layout.CloudLayouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12076,
            "description": "对指定拓扑进行旋转木马布局，鼠标移动时，网元按鼠标方向旋转移动",
            "is_constructor": 1,
            "extends": "twaver.PropertyChangeDispatcher",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.layout.CloudLayouter"
            }
        },
        "twaver.network.BasicAttachment": {
            "name": "twaver.network.BasicAttachment",
            "shortname": "twaver.network.BasicAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12405,
            "description": "告警附件和标签附件等的基类，用于显示文本附件信息",
            "is_constructor": 1,
            "extends": "twaver.network.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.BasicAttachment"
            }
        },
        "twaver.network.EditAttachment": {
            "name": "twaver.network.EditAttachment",
            "shortname": "twaver.network.EditAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12664,
            "description": "编辑附件，用于显示网元是否可编辑。对于可编辑的节点，节点周围显示8个可以改变网元大小的小方块；对于多边形和折线，每个可移动点显示为黄色的小圆球",
            "is_constructor": 1,
            "extends": "twaver.network.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.EditAttachment"
            }
        },
        "twaver.network.IconsAttachment": {
            "name": "twaver.network.IconsAttachment",
            "shortname": "twaver.network.IconsAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12678,
            "description": "图标组附件，用于显示一组图标",
            "is_constructor": 1,
            "extends": "twaver.network.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.IconsAttachment"
            }
        },
        "twaver.network.interaction.CreateElementInteraction": {
            "name": "twaver.network.interaction.CreateElementInteraction",
            "shortname": "twaver.network.interaction.CreateElementInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12699,
            "description": "创建节点交互处理器，当点击拓扑时，创建指定类型的节点，并设置此节点中心位置为点击位置，可以用Network#setCreateElementInteractions快速切换当前交互模式为创建节点模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrElementFunction",
                    "description": "节点类型或者节点生成器方法，可选，默认值为twaver.Node",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateElementInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateElementInteraction(network, twaver.SubNetwork),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateElementInteraction(network,\n    function (point) {\n                    var element = new twaver.Node();\n                    element.setName(element.getClassName());\n                    element.setCenterLocation(point);\n                    var parent = network.getElementAt(point);\n                    if (parent && parent instanceof twaver.Group) {\n                        element.setParent(parent);\n                    }\n                    return element;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.network.interaction.CreateLinkInteraction": {
            "name": "twaver.network.interaction.CreateLinkInteraction",
            "shortname": "twaver.network.interaction.CreateLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12739,
            "description": "创建连线交互处理器，在拓扑上单击任意网元设置连线的开始节点，再次点击任意网元设置连线的结束节点，可以用Network#setCreateElementInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "连线类型或者连线生成器方法，可选，默认值为twaver.Link",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateLinkInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateLinkInteraction(network, twaver.Link),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateLinkInteraction(network,\n    function (fromNode, toNode) {\n        var link = new twaver.Link();\n        link.setFromNode(fromNode);\n        link.setToNode(toNode);\n        link.setStyle('link.color', 'red');\n        return link;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.network.interaction.CreateShapeNodeInteraction": {
            "name": "twaver.network.interaction.CreateShapeNodeInteraction",
            "shortname": "twaver.network.interaction.CreateShapeNodeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12832,
            "description": "创建多边形交互处理器，在Network上多次点击不同位置设置多边形的points属性，最后双击结束，可以用Network#setCreateShapeNodeInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "String"
                },
                {
                    "name": "typeOrShapeNodeFunction",
                    "description": "多边形类型或者多边形生成器方法，可选，默认值为twaver.ShapeNode",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateShapeNodeInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateShapeNodeInteraction(network, twaver.ShapeNode),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateShapeNodeInteraction(network,\n    function (points) {\n        var shapeNode = new twaver.ShapeNode();\n        shapeNode.setStyle('vector.fill.color', 'red');\n        if(points){\n            shapeNode.setPoints(points);\n        }\n        return shapeNode;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.network.interaction.DefaultInteraction": {
            "name": "twaver.network.interaction.DefaultInteraction",
            "shortname": "twaver.network.interaction.DefaultInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12890,
            "description": "默认交互处理器，处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等交互动作",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.DefaultInteraction"
            }
        },
        "twaver.network.interaction.EditInteraction": {
            "name": "twaver.network.interaction.EditInteraction",
            "shortname": "twaver.network.interaction.EditInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12933,
            "description": "编辑交互处理器，处理改变网元大小、更改折线（ShapeLink）和多边形（ShapeNode）的轨迹等操作，可以用Network#setEditInteractions快速切换当前交互模式为编辑模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.EditInteraction"
            }
        },
        "twaver.network.interaction.MagnifyInteraction": {
            "name": "twaver.network.interaction.MagnifyInteraction",
            "shortname": "twaver.network.interaction.MagnifyInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13011,
            "description": "放大镜交互处理器",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "scale",
                    "description": "缩放比例，可选，默认值为2",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xRadius",
                    "description": "水平半径，可选，默认值为100",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yRadius",
                    "description": "垂直半径，可选，默认值为100",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.MagnifyInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.SelectInteraction(network),\n    new twaver.network.interaction.MoveInteraction(network),\n    new twaver.network.interaction.DefaultInteraction(network),\n    new twaver.network.interaction.MagnifyInteraction(network)\n]);"
            ]
        },
        "twaver.network.interaction.MoveInteraction": {
            "name": "twaver.network.interaction.MoveInteraction",
            "shortname": "twaver.network.interaction.MoveInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13144,
            "description": "移动网元交互处理器",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.MoveInteraction"
            }
        },
        "twaver.network.interaction.MSTouchInteraction": {
            "name": "twaver.network.interaction.MSTouchInteraction",
            "shortname": "twaver.network.interaction.MSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13215,
            "description": "触摸交互处理器，可以用Network#setTouchInteractions切换当前交互模式为触摸模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.MSTouchInteraction"
            }
        },
        "twaver.network.interaction.PanInteraction": {
            "name": "twaver.network.interaction.PanInteraction",
            "shortname": "twaver.network.interaction.PanInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13270,
            "description": "手抓图交互处理器，拖动拓扑时水平或垂直滚动拓扑，可以用Network#setPanInteractions快速切换当前拓扑交互模式为手抓图模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.PanInteraction"
            }
        },
        "twaver.network.interaction.SelectInteraction": {
            "name": "twaver.network.interaction.SelectInteraction",
            "shortname": "twaver.network.interaction.SelectInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13304,
            "description": "选择网元交互模式，点击空白区域时清空选中，点击网元时选中网元，框选时，选中框选区域中的网元。\n框选时，选择模式（当框选网元时，哪些网元会被选中）会影响如何选择网元，默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.SelectInteraction"
            }
        },
        "twaver.network.interaction.TouchInteraction": {
            "name": "twaver.network.interaction.TouchInteraction",
            "shortname": "twaver.network.interaction.TouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13357,
            "description": "触摸交互处理器，可以用Network#setTouchInteractions切换当前交互模式为触摸模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.TouchInteraction"
            }
        },
        "twaver.network.LinkUI": {
            "name": "twaver.network.LinkUI",
            "shortname": "twaver.network.LinkUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13398,
            "description": "连线对应的视图对象，用连线的样式在连线的起始和结束节点之间画一条线",
            "is_constructor": 1,
            "extends": "twaver.network.ElementUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.LinkUI"
            }
        },
        "twaver.network.NodeUI": {
            "name": "twaver.network.NodeUI",
            "shortname": "twaver.network.NodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13515,
            "description": "节点对应的视图对象，是其他网元对象（组、网格、多边形和子网等）的基类",
            "is_constructor": 1,
            "extends": "twaver.network.ElementUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.NodeUI"
            }
        },
        "twaver.vector.BasicAttachment": {
            "name": "twaver.vector.BasicAttachment",
            "shortname": "twaver.vector.BasicAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13571,
            "description": "告警附件和标签附件等的基类，用于显示文本信息的附件",
            "is_constructor": 1,
            "extends": "twaver.canvas.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.BasicAttachment"
            }
        },
        "twaver.vector.EditAttachment": {
            "name": "twaver.vector.EditAttachment",
            "shortname": "twaver.vector.EditAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13816,
            "description": "编辑附件，用于显示网元是否可编辑。对于可编辑的节点，节点周围显示8个可以改变网元大小的小方块；对于多边形和折线，每个可移动点显示为黄色的小圆球",
            "is_constructor": 1,
            "extends": "twaver.canvas.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.EditAttachment"
            }
        },
        "twaver.vector.IconsAttachment": {
            "name": "twaver.vector.IconsAttachment",
            "shortname": "twaver.vector.IconsAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13851,
            "description": "图标组附件，用于显示一组图标",
            "is_constructor": 1,
            "extends": "twaver.canvas.Attachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.IconsAttachment"
            }
        },
        "twaver.vector.interaction.CreateElementInteraction": {
            "name": "twaver.vector.interaction.CreateElementInteraction",
            "shortname": "twaver.vector.interaction.CreateElementInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13872,
            "description": "创建节点交互处理器，当点击拓扑时，创建指定类型的节点，并设置此节点中心位置为点击位置，可以用Network#setCreateElementInteractions快速切换当前交互模式为创建节点模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrElementFunction",
                    "description": "节点类型或者节点生成器方法，可选，默认值为twaver.Node",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateElementInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateElementInteraction(network, twaver.SubNetwork),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateElementInteraction(network,\n    function (point) {\n                    var element = new twaver.Node();\n                    element.setName(element.getClassName());\n                    element.setCenterLocation(point);\n                    var parent = network.getElementAt(point);\n                    if (parent && parent instanceof twaver.Group) {\n                        element.setParent(parent);\n                    }\n                    return element;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.vector.interaction.CreateLinkInteraction": {
            "name": "twaver.vector.interaction.CreateLinkInteraction",
            "shortname": "twaver.vector.interaction.CreateLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13912,
            "description": "创建连线交互处理器，在拓扑上单击任意网元设置连线的开始节点，再次点击任意网元设置连线的结束节点，可以用Network#setCreateElementInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "连线类型或者连线生成器方法，可选，默认值为twaver.Link",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateLinkInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateLinkInteraction(network, twaver.Link),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateLinkInteraction(network,\n    function (fromNode, toNode) {\n        var link = new twaver.Link();\n        link.setFromNode(fromNode);\n        link.setToNode(toNode);\n        link.setStyle('link.color', 'red');\n        return link;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.vector.interaction.CreateShapeNodeInteraction": {
            "name": "twaver.vector.interaction.CreateShapeNodeInteraction",
            "shortname": "twaver.vector.interaction.CreateShapeNodeInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14009,
            "description": "创建多边形交互处理器，在Network上多次点击不同位置设置多边形的points属性，最后双击结束，可以用Network#setCreateShapeNodeInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "String"
                },
                {
                    "name": "typeOrShapeNodeFunction",
                    "description": "多边形类型或者多边形生成器方法，可选，默认值为twaver.ShapeNode",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateShapeNodeInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateShapeNodeInteraction(network, twaver.ShapeNode),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateShapeNodeInteraction(network,\n    function (points) {\n        var shapeNode = new twaver.ShapeNode();\n        shapeNode.setStyle('vector.fill.color', 'red');\n        if(points){\n            shapeNode.setPoints(points);\n        }\n        return shapeNode;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.vector.interaction.DefaultInteraction": {
            "name": "twaver.vector.interaction.DefaultInteraction",
            "shortname": "twaver.vector.interaction.DefaultInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14060,
            "description": "默认交互处理器，处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等交互动作",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.DefaultInteraction"
            }
        },
        "twaver.vector.interaction.EditInteraction": {
            "name": "twaver.vector.interaction.EditInteraction",
            "shortname": "twaver.vector.interaction.EditInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14128,
            "description": "编辑交互处理器，处理改变网元大小、更改折线（ShapeLink）和多边形（ShapeNode）的轨迹等操作，可以用Network#setEditInteractions快速切换当前交互模式为编辑模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.EditInteraction"
            }
        },
        "twaver.vector.interaction.MagnifyInteraction": {
            "name": "twaver.vector.interaction.MagnifyInteraction",
            "shortname": "twaver.vector.interaction.MagnifyInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14206,
            "description": "放大镜交互处理器",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "scale",
                    "description": "缩放比例，可选，默认值为2",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xRadius",
                    "description": "水平半径，可选，默认值为100",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yRadius",
                    "description": "垂直半径，可选，默认值为100",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.MagnifyInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.SelectInteraction(network),\n    new twaver.network.interaction.MoveInteraction(network),\n    new twaver.network.interaction.DefaultInteraction(network),\n    new twaver.network.interaction.MagnifyInteraction(network)\n]);"
            ]
        },
        "twaver.vector.interaction.MSTouchInteraction": {
            "name": "twaver.vector.interaction.MSTouchInteraction",
            "shortname": "twaver.vector.interaction.MSTouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14235,
            "description": "触摸交互处理器",
            "is_constructor": 1,
            "extends": "twaver.canvas.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑图组件",
                    "type": "twaver.canvas.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.interaction.MSTouchInteraction"
            }
        },
        "twaver.vector.interaction.TouchInteraction": {
            "name": "twaver.vector.interaction.TouchInteraction",
            "shortname": "twaver.vector.interaction.TouchInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14290,
            "description": "触摸交互处理器，可以用Network#setTouchInteractions切换当前交互模式为触摸模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.BaseInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.TouchInteraction"
            }
        },
        "twaver.vector.LinkUI": {
            "name": "twaver.vector.LinkUI",
            "shortname": "twaver.vector.LinkUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14331,
            "description": "连线对应的视图对象，用连线的样式在连线的起始和结束节点之间画一条线",
            "is_constructor": 1,
            "extends": "twaver.network.ElementUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.LinkUI"
            }
        },
        "twaver.vector.LogicalZoomManager": {
            "name": "twaver.vector.LogicalZoomManager",
            "shortname": "twaver.vector.LogicalZoomManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14448,
            "description": "逻辑缩放管理器构造函数",
            "is_constructor": 1,
            "extends": "twaver.vector.BaseZoomManager",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑组件",
                    "type": "twaver.vector.Network"
                },
                {
                    "name": "sizeChange",
                    "description": "布尔值，是否缩放尺寸",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "逻辑缩放管理器",
                "type": "twaver.vector.LogicalZoomManager"
            }
        },
        "twaver.vector.NodeUI": {
            "name": "twaver.vector.NodeUI",
            "shortname": "twaver.vector.NodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14462,
            "description": "节点对应的视图对象，是其他网元对象（组、网格、多边形和子网等）的基类",
            "is_constructor": 1,
            "extends": "twaver.canvas.ElementUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.NodeUI"
            }
        },
        "twaver.vector.PhysicalZoomManager": {
            "name": "twaver.vector.PhysicalZoomManager",
            "shortname": "twaver.vector.PhysicalZoomManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14567,
            "description": "物理缩放管理器构造函数",
            "is_constructor": 1,
            "extends": "twaver.vector.BaseZoomManager",
            "return": {
                "description": "物理缩放管理器",
                "type": "twaver.vector.PhysicalZoomManager"
            }
        },
        "twaver.Alarm": {
            "name": "twaver.Alarm",
            "shortname": "twaver.Alarm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14579,
            "description": "构造函数\n\n告警是电信拓扑系统中的一种预定义的对象，它是基于OSS/J服务质量体系的API和基于ITU-T标准建议的X.733。\n\n在TWaver中，告警是用于展示OSS系统中服务端实际发生的告警。当拓扑图上产生警告时意味着OSS系统中创建的告警被监控到，OSS系统可以将新建的告警传到客户端并在客户端的拓扑图或表格上显示出来。\n\nTWaver中的告警对象定义了告警中最常见的属性。需要注意的是，TWaver中的告警对象只是在UI中使用，而不是直接存储进数据库或服务端的，一般在OSS系统的服务端上的告警会有更详细的属性以及与业务相关的属性。\n\n告警是存储在告警容器中的，告警容器是网元容器的一部分，它是用于管理告警对象的。每一个告警都可以设置相关联的网元ID，当告警产生时，就会在网元上呈现出来。",
            "is_constructor": 1,
            "extends": "twaver.Data",
            "params": [
                {
                    "name": "id",
                    "description": "告警ID用于唯一标识告警对象。在告警容器中，ID是不能重复的，如果告警ID是null，TWaver就会根据默认的规则，自动生成一个告警ID。ID可以是string，number类型，也可以是Object类型。是string或number类型时指的是告警的ID，如果为Object类型，可以传入一个带告警属性的对象，比如: var alarm = new twaver.Alarm({      alarmSeverity:AlarmSeverity.CRITICAL,      acked:true,      clients:{'buinessiID':'523'} });",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "elementId",
                    "description": "当和告警绑定的网元ID不为空时，添加一个告警，网元上就会同步呈现出这个告警。",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "alarmSeverity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity",
                    "optional": true
                },
                {
                    "name": "isAcked",
                    "description": "是否是确认告警",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "isCleared",
                    "description": "告警是否清除",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "告警对象本身",
                "type": "twaver.Alarm"
            }
        },
        "twaver.AlarmBox": {
            "name": "twaver.AlarmBox",
            "shortname": "twaver.AlarmBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14660,
            "description": "告警容器存在于网元容器中，它作为网元容器的一部分，管理着网元容器中所有网元上的告警对象。当创建一个网元容器时，告警容器就会随之生成",
            "is_constructor": 1,
            "extends": "twaver.DataBox",
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器对象",
                    "type": "twaver.ElementBox"
                }
            ],
            "return": {
                "description": "告警容器本身",
                "type": "twaver.AlarmBox"
            }
        },
        "twaver.animate.AnimateCenterLocation": {
            "name": "twaver.animate.AnimateCenterLocation",
            "shortname": "twaver.animate.AnimateCenterLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14797,
            "description": "以动画效果更改一批网元的中心位置",
            "is_constructor": 1,
            "extends": "twaver.animate.AnimateProperty",
            "params": [
                {
                    "name": "objects",
                    "description": "需要更改中心位置的网元节点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "newValues",
                    "description": "网元节点新中心位置集合",
                    "type": "twaver.List"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateCenterLocation"
            }
        },
        "twaver.animate.AnimateLocation": {
            "name": "twaver.animate.AnimateLocation",
            "shortname": "twaver.animate.AnimateLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14812,
            "description": "以动画效果更改一批网元的位置",
            "is_constructor": 1,
            "extends": "twaver.animate.AnimateProperty",
            "params": [
                {
                    "name": "objects",
                    "description": "需要更改位置的网元节点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "newValues",
                    "description": "网元节点新位置集合",
                    "type": "twaver.List"
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，动画结束后执行的动作，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.animate.AnimateLocation"
            }
        },
        "twaver.canvas.AlarmAttachment": {
            "name": "twaver.canvas.AlarmAttachment",
            "shortname": "twaver.canvas.AlarmAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14827,
            "description": "告警附件，用于在拓扑上显示网元的新发告警信息，一般显示为包含告警级别和数量的冒泡信息，默认告警冒泡附件应该显示在最上层，以免某个网元的告警信息被其他网元覆盖",
            "is_constructor": 1,
            "extends": "twaver.canvas.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.AlarmAttachment"
            }
        },
        "twaver.canvas.GridUI": {
            "name": "twaver.canvas.GridUI",
            "shortname": "twaver.canvas.GridUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14841,
            "description": "网格对应的视图对象，网格是由grid.row.count样式属性指定的行数和grid.column.count样式属性指定的列数构成的表格，其他网元可以填充到其网格中",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "网格",
                    "type": "twaver.Grid"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.GridUI"
            }
        },
        "twaver.canvas.GroupUI": {
            "name": "twaver.canvas.GroupUI",
            "shortname": "twaver.canvas.GroupUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14862,
            "description": "组对应的视图对象，组有合并和展开两种状态，合并时，组的孩子不可见；展开时，孩子可见",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑对象",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "组网元",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.GroupUI"
            }
        },
        "twaver.canvas.interaction.CreateShapeLinkInteraction": {
            "name": "twaver.canvas.interaction.CreateShapeLinkInteraction",
            "shortname": "twaver.canvas.interaction.CreateShapeLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14890,
            "description": "创建折线交互处理器，在Network上单击任意网元设置折线的开始节点，多次点击不同的背景位置设置折线的points属性，再次点击任意网元设置折线的结束节点，可以用Network#setCreateShapeLinkInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.CreateLinkInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "折线类型或者折线生成器方法，可选，默认值为twaver.ShapeLink",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateShapeLinkInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateShapeLinkInteraction(network, twaver.ShapeLink),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateShapeLinkInteraction(network,\n    function (fromNode, toNode, points) {\n        var link = new twaver.ShapeLink();\n        link.setFromNode(fromNode);\n        link.setToNode(toNode);\n        link.setStyle('link.color', 'red');\n        if(points){\n            link.setPoints(points);\n        }\n        return link;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.canvas.LabelAttachment": {
            "name": "twaver.canvas.LabelAttachment",
            "shortname": "twaver.canvas.LabelAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14923,
            "description": "标签附件，用于显示网元名称",
            "is_constructor": 1,
            "extends": "twaver.canvas.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.LabelAttachment"
            }
        },
        "twaver.canvas.LinkHandlerAttachment": {
            "name": "twaver.canvas.LinkHandlerAttachment",
            "shortname": "twaver.canvas.LinkHandlerAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14944,
            "description": "捆绑连线的标签附件，用于显示多条连线捆绑后的标签",
            "is_constructor": 1,
            "extends": "twaver.canvas.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.LinkHandlerAttachment"
            }
        },
        "twaver.canvas.Overview": {
            "name": "twaver.canvas.Overview",
            "shortname": "twaver.canvas.Overview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14958,
            "description": "创建和Network绑定的鹰眼视图，鹰眼是Network的缩略图，能通过鹰眼导航Network。鹰眼支持各种操作：\n单击：将Network的视图中心导航到指定坐标点\n双击：将Network的缩放级别还原为1\n按着CTRL键框选：将Network缩放并平移到指定区域",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "network",
                    "description": "和Overview绑定的Network",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Overview"
            },
            "example": [
                " var overview = new twaver.network.Overview(network);\noverview.adjustBounds({x:0, y:0, width:200, height:200});"
            ]
        },
        "twaver.canvas.RotatableNodeUI": {
            "name": "twaver.canvas.RotatableNodeUI",
            "shortname": "twaver.canvas.RotatableNodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15132,
            "description": "构造可旋转节点的视图对象",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "可旋转节点",
                    "type": "twaver.RotatableNode"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.RotatableNodeUI"
            }
        },
        "twaver.canvas.ShapeLinkUI": {
            "name": "twaver.canvas.ShapeLinkUI",
            "shortname": "twaver.canvas.ShapeLinkUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15146,
            "description": "折线对应的视图对象，由一组点连接而成",
            "is_constructor": 1,
            "extends": "twaver.canvas.LinkUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "折线",
                    "type": "twaver.ShapeLink"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.ShapeLinkUI"
            }
        },
        "twaver.canvas.ShapeNodeUI": {
            "name": "twaver.canvas.ShapeNodeUI",
            "shortname": "twaver.canvas.ShapeNodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15160,
            "description": "多边形网元对应的多边形网元视图，多边形由一组点组成，并将这些点依次连接而组成",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "多边形网元",
                    "type": "twaver.ShapeNode"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.ShapeNodeUI"
            }
        },
        "twaver.charts.ChartPane": {
            "name": "twaver.charts.ChartPane",
            "shortname": "twaver.charts.ChartPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15174,
            "description": "Chart面板包括了Chart以及Chart的图例。用户使用这个面板组件可以更方便地来呈现Chart。",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "chart",
                    "description": "绑定的Chart组件",
                    "type": "twaver.charts.ChartBase"
                },
                {
                    "name": "title",
                    "description": "可选，Chart的标题",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "legendOrientation",
                    "description": "可选，Chart图例的显示方向，默认为bottom",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "legendWidth",
                    "description": "可选，Chart图例的宽度，默认为80px",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.ChartPane"
            }
        },
        "twaver.charts.LegendPane": {
            "name": "twaver.charts.LegendPane",
            "shortname": "twaver.charts.LegendPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15302,
            "description": "图例面板是用于辅助Chart来显示的，它默认是显示在Chart的下方，显示Chart上所有的网元信息",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "chart",
                    "description": "绑定的Chart对象",
                    "type": "twaver.charts.ChartBase"
                }
            ],
            "return": {
                "description": "图例面板本身",
                "type": "twaver.charts.LegendPane"
            }
        },
        "twaver.Column": {
            "name": "twaver.Column",
            "shortname": "twaver.Column",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15472,
            "description": "构造函数\n列是一种基本元素，它是存在于列容器中的（ColumnBox）。列是用来显示表格或树表的基本元素。",
            "is_constructor": 1,
            "extends": "twaver.Data",
            "params": [
                {
                    "name": "id",
                    "description": "ID为列的唯一标识。如果为null，TWaver内部会按照一定的规则赋值。ID可以为string，number类型，也可以为Object类型，为string或number类型时指的是列的ID，如果为Object类型，可以传入一个带表格列属性的对象，比如： var column = new twaver.Column({      width:100,     editable:true,      movable:true});",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "列对象本身",
                "type": "twaver.Column"
            }
        },
        "twaver.ColumnBox": {
            "name": "twaver.ColumnBox",
            "shortname": "twaver.ColumnBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15759,
            "description": "列容器，它继承于数据容器，是用于管理column（列）对象",
            "is_constructor": 1,
            "extends": "twaver.DataBox",
            "params": [
                {
                    "name": "name",
                    "description": "列容器的名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "列容器对象",
                "type": "twaver.ColumnBox"
            }
        },
        "twaver.controls.Accordion": {
            "name": "twaver.controls.Accordion",
            "shortname": "twaver.controls.Accordion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15772,
            "description": "构造函数\n可折叠面板是TWaver提供的用于存储面板的控件，这种面板中可以存放多个DIV面板，并对存放的DIV面板进行折叠操作。\n可折叠面板中的DIV面板只能同时打开其中的一个DIV面板，当点击另外一个DIV的标题时，它会将当前打开的DIV合并，并展开点击的DIV。\n可折叠面板使用DIV的标题来唯一标识其中的DIV对象。\n有关Accordion的使用可以参开LinkEditorDemo",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "return": {
                "description": "可折叠面板对象本身",
                "type": "twaver.controls.Accordion"
            }
        },
        "twaver.controls.BorderPane": {
            "name": "twaver.controls.BorderPane",
            "shortname": "twaver.controls.BorderPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15941,
            "description": "它是一个采用边框布局的面板，分为上，下，左，右，中间五个区域，每个区域可以放置组件，DIV，ControlBase对象，可以设置各个区域所占的大小。中间区域采用的是填充的方式，也可以设置各个区域之间的间距",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "center",
                    "description": "中间面板的对象，面板对象可以为DIV，也可以为ControlBase的类型",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "top",
                    "description": "上面面板的对象，面板对象可以为DIV，也可以为ControlBase的类型",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "右边面板的对象，面板对象可以为DIV，也可以为ControlBase的类型",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "下面面板的对象，面板对象可以为DIV，也可以为ControlBase的类型",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "左边面板的对象，面板对象可以为DIV，也可以为ControlBase的类型",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.BorderPane"
            }
        },
        "twaver.controls.SplitPane": {
            "name": "twaver.controls.SplitPane",
            "shortname": "twaver.controls.SplitPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16112,
            "description": "劈分面板是用于将一块面板劈分成两块的面板，两块面板所占的比例大小是由劈分条的位置来决定的，并且可以通过移动劈分条来动态改变这两块面板的大小。\n劈分面板通过设置orientation来进行水平和垂直劈分",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "firstView",
                    "description": "劈分面版的第一块面板，面板可以为DIV或ControlBase类型的对象",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "nextView",
                    "description": "劈分面版的第二块面板，面板可以为DIV或ControlBase类型的对象",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "orientation",
                    "description": "劈分的方向，可以为'horizontal'或 'vertical'",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "position",
                    "description": "劈分的百分比",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.SplitPane"
            }
        },
        "twaver.controls.TableHeader": {
            "name": "twaver.controls.TableHeader",
            "shortname": "twaver.controls.TableHeader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16268,
            "description": "这个类用于管理表头",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "table",
                    "description": "指定的表格对象",
                    "type": "twaver.controls.Table"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TableHeader"
            }
        },
        "twaver.controls.TablePane": {
            "name": "twaver.controls.TablePane",
            "shortname": "twaver.controls.TablePane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16457,
            "description": "表格面板，它是用于保存表格的一种面板，表格面板中包含了表格体和表头，即使在创建表格面板时不传入表头，TWaver也会自动为表格体创建一个默认的表头",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "table",
                    "description": "指定表格对象",
                    "type": "twaver.controls.Table"
                },
                {
                    "name": "tableHeader",
                    "description": "可选，如果为空时，TWaver会创建一个默认的表头",
                    "type": "twaver.controls.TableHeader",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TablePane"
            }
        },
        "twaver.controls.TabPane": {
            "name": "twaver.controls.TabPane",
            "shortname": "twaver.controls.TabPane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16485,
            "description": "选项卡面板是一种视图组件，它是和选项卡容器绑定的，用于显示选项卡容器中的选项卡元素。\n例如：\nvar tabPane = new TabPane();\nthis.tabPane.setTabRadius(8);\nthis.tabPane.setTabGap(5);\nthis.tabPane.getTabBox().add(tab1);\nthis.tabPane.getTabBox().add(tab2);",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "return": {
                "description": "创建选项卡面板",
                "type": "twaver.controls.TabPane"
            }
        },
        "twaver.controls.TitlePane": {
            "name": "twaver.controls.TitlePane",
            "shortname": "twaver.controls.TitlePane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16808,
            "description": "构造函数\n它定义了一个带标题栏的面板，可以为标题栏设置显示的图标，文字，背景色，高度，以及文字的对齐方法",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "content",
                    "description": "内容面板，可以是DIV或ControlBase类型的对象",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "title",
                    "description": "指定的标题",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "icon",
                    "description": "标题栏的图标",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TitlePane"
            }
        },
        "twaver.controls.ViewBase": {
            "name": "twaver.controls.ViewBase",
            "shortname": "twaver.controls.ViewBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16929,
            "description": "视图基类，和数据容器（DataBox）关联，用于图形化展示数据容器中的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "return": {
                "description": "",
                "type": "twaver.controls.ViewBase"
            }
        },
        "twaver.Element": {
            "name": "twaver.Element",
            "shortname": "twaver.Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17127,
            "description": "构造函数\n网元是电信拓扑中一种最基本的数据，它继承于Data，存在于网元容器中，网元上可以添加告警信息。",
            "is_constructor": 1,
            "extends": "twaver.Data",
            "params": [
                {
                    "name": "id",
                    "description": "网元ID，用于唯一标识网元。如果为空，twaver会按照默认的规则给网元ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是网元的ID，如果为Object类型，可以传入一个带网元属性的对象，比如： var element = new twaver.Element({      image:'tw130',      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "网元对象本身",
                "type": "twaver.Element"
            }
        },
        "twaver.ElementBox": {
            "name": "twaver.ElementBox",
            "shortname": "twaver.ElementBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17285,
            "description": "ElementBox是网元容器，它用于管理TWaver中所有的网元对象，比如节点，连线，组，子网和所有的设备上的网元，比如网格，跟随者。\n\nElementBox是处于TWaver MVC框架中的M（模型）层，网元在这一层上是不可见的，但是可以进行管理，比如添加，删除，更新以及序列化。\n\nElementBox是一个大的网元容器，它里面又包含了一些小的容器，比如告警容器（AlarmBox），管理所有的告警对象；图层容器（LayerBox），管理所有的图层对象；选择容器（SelectionModule），管理所有选中的网元。它和DataBox的区别在于它可以进行告警和图层的管理。\n\nElementBox管理着所有的网元，它可以驱动所有关联的视图组件，比如Network，Tree，Table。一个网元容器可以驱动多个视图组件",
            "is_constructor": 1,
            "extends": "twaver.DataBox",
            "params": [
                {
                    "name": "name",
                    "description": "网元容器的名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "网元容器对象",
                "type": "twaver.ElementBox"
            }
        },
        "twaver.Layer": {
            "name": "twaver.Layer",
            "shortname": "twaver.Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17488,
            "description": "图层是在LayerBox中存在的，图层用于对网元进行分层，在ElementBox中的所有网元都显示在某个图层上，同一图层上网元的LayerID是相同的。\n\n图层在network上是不可见的，但是它可以进行上移，下移。也可以对图层上的网元进行是否可见，是否可移动，是否可编辑的设置",
            "is_constructor": 1,
            "extends": "twaver.Data",
            "params": [
                {
                    "name": "id",
                    "description": "图层ID，用于唯一标识这个图层对象。如果为空，TWaver会按照默认的规则给图层ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是图层的ID，如果为Object类型，可以传入一个带图层属性的对象，比如： var layer = new twaver.Layer({     name:'topLayer',    movable: false,     editable:false});",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Layer"
            }
        },
        "twaver.LayerBox": {
            "name": "twaver.LayerBox",
            "shortname": "twaver.LayerBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17567,
            "description": "图层容器是一种特殊的容器，它是包含在网元容器中的，作为网元容器的一部分，用于管理网元容器中所有的图层对象，比如上移，下移，添加，删除，显示，隐藏图层。处于上层图层上的网元会显示在其下图层上的网元上方。\n\n当创建一个图层容器时，就会有一个默认的图层对象生成，所有没有指定图层ID的网元都会显示在这个图层上，这个图层称之为defaultLayer。这个图层是不能被删除的。\n\n当删除一个图层时，所有在它上面的网元在网元容器中不会被删除",
            "is_constructor": 1,
            "extends": "twaver.DataBox",
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器对象",
                    "type": "twaver.ElementBox"
                }
            ],
            "return": {
                "description": "图层对象本身",
                "type": "twaver.LayerBox"
            }
        },
        "twaver.network.AlarmAttachment": {
            "name": "twaver.network.AlarmAttachment",
            "shortname": "twaver.network.AlarmAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17607,
            "description": "告警附件，用于在拓扑上显示网元的新发告警信息，一般显示为包含告警级别和数量的冒泡信息，默认告警冒泡附件应该显示在附件层，以免某个网元的告警信息被其他网元覆盖",
            "is_constructor": 1,
            "extends": "twaver.network.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.AlarmAttachment"
            }
        },
        "twaver.network.GridUI": {
            "name": "twaver.network.GridUI",
            "shortname": "twaver.network.GridUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17621,
            "description": "网格对应的视图对象，网格是由grid.row.count样式属性指定的行数和grid.column.count样式属性指定的列数构成的表格，其他网元可以填充到其网格中",
            "is_constructor": 1,
            "extends": "twaver.network.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "网格",
                    "type": "twaver.Grid"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.GridUI"
            }
        },
        "twaver.network.GroupUI": {
            "name": "twaver.network.GroupUI",
            "shortname": "twaver.network.GroupUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17641,
            "description": "组对应的视图对象，组有合并和展开两种状态，合并时，组的孩子不可见；展开时，孩子可见",
            "is_constructor": 1,
            "extends": "twaver.network.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "组",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.GroupUI"
            }
        },
        "twaver.network.interaction.CreateOrthogonalLinkInteraction": {
            "name": "twaver.network.interaction.CreateOrthogonalLinkInteraction",
            "shortname": "twaver.network.interaction.CreateOrthogonalLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17668,
            "description": "创建正交直角连线交互处理器",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.CreateLinkInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "连线类型或者连线生成器方法，可选，默认值为twaver.Link",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "linkType",
                    "description": "连线样式，可选，默认值为orthogonal",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isByControlPoint",
                    "description": "是否按百分比劈分正交直角连线，可选，默认值为true",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "splitPercent",
                    "description": "劈分点距起始节点的百分比位置，可选，默认值为0.5",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "isSplitByPercent",
                    "description": "是否按百分比劈分正交直角连线，可选，默认值为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateOrthogonalLinkInteraction"
            }
        },
        "twaver.network.interaction.CreateShapeLinkInteraction": {
            "name": "twaver.network.interaction.CreateShapeLinkInteraction",
            "shortname": "twaver.network.interaction.CreateShapeLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17686,
            "description": "创建折线交互处理器，在Network上单击任意网元设置折线的开始节点，多次点击不同的背景位置设置折线的points属性，再次点击任意网元设置折线的结束节点，可以用Network#setCreateShapeLinkInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.CreateLinkInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "折线类型或者折线生成器方法，可选，默认值为twaver.ShapeLink",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateShapeLinkInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateShapeLinkInteraction(network, twaver.ShapeLink),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateShapeLinkInteraction(network,\n    function (fromNode, toNode, points) {\n        var link = new twaver.ShapeLink();\n        link.setFromNode(fromNode);\n        link.setToNode(toNode);\n        link.setStyle('link.color', 'red');\n        if(points){\n            link.setPoints(points);\n        }\n        return link;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.network.LabelAttachment": {
            "name": "twaver.network.LabelAttachment",
            "shortname": "twaver.network.LabelAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17719,
            "description": "标签附件，用于显示网元名称",
            "is_constructor": 1,
            "extends": "twaver.network.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.LabelAttachment"
            }
        },
        "twaver.network.LinkHandlerAttachment": {
            "name": "twaver.network.LinkHandlerAttachment",
            "shortname": "twaver.network.LinkHandlerAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17740,
            "description": "连线捆绑标签附件，用于显示多条连线捆绑后，显示的标签",
            "is_constructor": 1,
            "extends": "twaver.network.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.network.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在附件层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.LinkHandlerAttachment"
            }
        },
        "twaver.network.Overview": {
            "name": "twaver.network.Overview",
            "shortname": "twaver.network.Overview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17754,
            "description": "创建和Network绑定的鹰眼视图，鹰眼是Network的缩略图，能通过鹰眼导航Network。鹰眼支持各种操作：\n单击：将Network的视图中心导航到指定坐标点\n双击：将Network的缩放级别还原为1\n按着CTRL键框选：将Network缩放并平移到指定区域",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "network",
                    "description": "和Overview绑定的Network",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Overview"
            },
            "example": [
                " var overview = new twaver.network.Overview(network);\noverview.adjustBounds({x:0, y:0, width:200, height:200});"
            ]
        },
        "twaver.network.RotatableNodeUI": {
            "name": "twaver.network.RotatableNodeUI",
            "shortname": "twaver.network.RotatableNodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17928,
            "description": "构造可旋转节点的视图对象",
            "is_constructor": 1,
            "extends": "twaver.network.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "可旋转节点",
                    "type": "twaver.RotatableNode"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.RotatableNodeUI"
            }
        },
        "twaver.network.ShapeLinkUI": {
            "name": "twaver.network.ShapeLinkUI",
            "shortname": "twaver.network.ShapeLinkUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17942,
            "description": "折线对应的视图对象，由一组点连接而成",
            "is_constructor": 1,
            "extends": "twaver.network.LinkUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "折线",
                    "type": "twaver.ShapeLink"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.ShapeLinkUI"
            }
        },
        "twaver.network.ShapeNodeUI": {
            "name": "twaver.network.ShapeNodeUI",
            "shortname": "twaver.network.ShapeNodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17956,
            "description": "多边形网元对应的多边形网元视图，多边形由一组点组成，并将这些点依次连接而组成",
            "is_constructor": 1,
            "extends": "twaver.network.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "多边形网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.ShapeNodeUI"
            }
        },
        "twaver.Property": {
            "name": "twaver.Property",
            "shortname": "twaver.Property",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17970,
            "description": "构造函数\n属性项是一种基本元素，它是存在于属性容器中的（PropertyBox）。属性列是用来显示在属性页中的基本元素",
            "is_constructor": 1,
            "extends": "twaver.Data",
            "params": [
                {
                    "name": "id",
                    "description": "ID为属性的唯一标识。如果为null，TWaver内部会按照一定的规则赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是属性的ID，如果为Object类型，可以传入一个属性的对象，比如： var property = new twaver.Property({  name:'Name',    horizontalAlign:'left',    width:100});",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Property"
            }
        },
        "twaver.PropertyBox": {
            "name": "twaver.PropertyBox",
            "shortname": "twaver.PropertyBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18175,
            "description": "属性页的属性容器，它是用于管理所有的属性对象，例如增加、删除属性。它继承于数据容器",
            "is_constructor": 1,
            "extends": "twaver.DataBox",
            "params": [
                {
                    "name": "name",
                    "description": "属性容器名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "属性容器对象本身",
                "type": "twaver.PropertyBox"
            }
        },
        "twaver.Tab": {
            "name": "twaver.Tab",
            "shortname": "twaver.Tab",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18188,
            "description": "构造函数\n选项卡是一种基本元素，它是存在于选项卡容器中的（TabBox）。选项卡是用来显示在选项卡面板中的基本元素",
            "is_constructor": 1,
            "extends": "twaver.Data",
            "params": [
                {
                    "name": "id",
                    "description": "ID为选项卡的唯一标识。如果为null，TWaver内部会按照一定的规则赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是选项卡的ID，如果为Object类型，可以传入一个带选项卡属性的对象，比如： var tab = new twaver.Tab({  width:50,    closable:true,      resizable:true });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Tab"
            }
        },
        "twaver.TabBox": {
            "name": "twaver.TabBox",
            "shortname": "twaver.TabBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18307,
            "description": "选项卡容器，用于管理所有选项卡对象。比如添加、删除选项卡。它继承于数据容器",
            "is_constructor": 1,
            "extends": "twaver.DataBox",
            "params": [
                {
                    "name": "name",
                    "description": "选项卡容器的名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "选项卡容器对象本身",
                "type": "twaver.TabBox"
            }
        },
        "twaver.vector.AlarmAttachment": {
            "name": "twaver.vector.AlarmAttachment",
            "shortname": "twaver.vector.AlarmAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18320,
            "description": "告警附件，用于在拓扑上显示网元的新发告警信息，一般显示为包含告警级别和数量的冒泡信息，默认告警冒泡附件应该显示在最上层，以免某个网元的告警信息被其他网元覆盖",
            "is_constructor": 1,
            "extends": "twaver.canvas.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.AlarmAttachment"
            }
        },
        "twaver.vector.GridUI": {
            "name": "twaver.vector.GridUI",
            "shortname": "twaver.vector.GridUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18334,
            "description": "网格对应的视图对象，网格是由grid.row.count样式属性指定的行数和grid.column.count样式属性指定的列数构成的表格，其他网元可以填充到其网格中",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "网格",
                    "type": "twaver.Grid"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.GridUI"
            }
        },
        "twaver.vector.GroupUI": {
            "name": "twaver.vector.GroupUI",
            "shortname": "twaver.vector.GroupUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18355,
            "description": "组对应的视图对象，组有合并和展开两种状态，合并时，组的孩子不可见；展开时，孩子可见",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑对象",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "组网元",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.GroupUI"
            }
        },
        "twaver.vector.interaction.CreateShapeLinkInteraction": {
            "name": "twaver.vector.interaction.CreateShapeLinkInteraction",
            "shortname": "twaver.vector.interaction.CreateShapeLinkInteraction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18383,
            "description": "创建折线交互处理器，在Network上单击任意网元设置折线的开始节点，多次点击不同的背景位置设置折线的points属性，再次点击任意网元设置折线的结束节点，可以用Network#setCreateShapeLinkInteractions快速切换当前交互模式为创建连线模式",
            "is_constructor": 1,
            "extends": "twaver.network.interaction.CreateLinkInteraction",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "typeOrLinkFunction",
                    "description": "折线类型或者折线生成器方法，可选，默认值为twaver.ShapeLink",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.interaction.CreateShapeLinkInteraction"
            },
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.CreateShapeLinkInteraction(network, twaver.ShapeLink),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);\n\nnetwork.setInteractions([\n    new twaver.network.interaction.CreateShapeLinkInteraction(network,\n    function (fromNode, toNode, points) {\n        var link = new twaver.ShapeLink();\n        link.setFromNode(fromNode);\n        link.setToNode(toNode);\n        link.setStyle('link.color', 'red');\n        if(points){\n            link.setPoints(points);\n        }\n        return link;\n    }),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ]
        },
        "twaver.vector.Label2Attachment": {
            "name": "twaver.vector.Label2Attachment",
            "shortname": "twaver.vector.Label2Attachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18416,
            "description": "标签附件2，用于显示网元名称2",
            "is_constructor": 1,
            "extends": "twaver.vector.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.vector.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.vector.Label2Attachment"
            }
        },
        "twaver.vector.LabelAttachment": {
            "name": "twaver.vector.LabelAttachment",
            "shortname": "twaver.vector.LabelAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18437,
            "description": "标签附件，用于显示网元名称",
            "is_constructor": 1,
            "extends": "twaver.vector.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.LabelAttachment"
            }
        },
        "twaver.vector.LinkHandlerAttachment": {
            "name": "twaver.vector.LinkHandlerAttachment",
            "shortname": "twaver.vector.LinkHandlerAttachment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18458,
            "description": "捆绑连线的标签附件，用于显示多条连线捆绑后的标签",
            "is_constructor": 1,
            "extends": "twaver.vector.BasicAttachment",
            "params": [
                {
                    "name": "elementUI",
                    "description": "网元视图",
                    "type": "twaver.canvas.ElementUI"
                },
                {
                    "name": "showInAttachmentDiv",
                    "description": "是否显示在最上层，可选，默认为false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.LinkHandlerAttachment"
            }
        },
        "twaver.vector.MixedZoomManager": {
            "name": "twaver.vector.MixedZoomManager",
            "shortname": "twaver.vector.MixedZoomManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18472,
            "description": "混合缩放管理器构造函数",
            "is_constructor": 1,
            "extends": "twaver.vector.LogicalZoomManager",
            "return": {
                "description": "混合缩放管理器",
                "type": "twaver.vector.MixedZoomManager"
            }
        },
        "twaver.vector.Overview": {
            "name": "twaver.vector.Overview",
            "shortname": "twaver.vector.Overview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18484,
            "description": "创建和Network绑定的鹰眼视图，鹰眼是Network的缩略图，能通过鹰眼导航Network。鹰眼支持各种操作：\n单击：将Network的视图中心导航到指定坐标点\n双击：将Network的缩放级别还原为1\n按着CTRL键框选：将Network缩放并平移到指定区域",
            "is_constructor": 1,
            "extends": "twaver.controls.ControlBase",
            "params": [
                {
                    "name": "network",
                    "description": "和Overview绑定的Network",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Overview"
            },
            "example": [
                " var overview = new twaver.network.Overview(network);\noverview.adjustBounds({x:0, y:0, width:200, height:200});"
            ]
        },
        "twaver.vector.RotatableNodeUI": {
            "name": "twaver.vector.RotatableNodeUI",
            "shortname": "twaver.vector.RotatableNodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18658,
            "description": "构造可旋转节点的视图对象",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "可旋转节点",
                    "type": "twaver.RotatableNode"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.RotatableNodeUI"
            }
        },
        "twaver.vector.ShapeLinkUI": {
            "name": "twaver.vector.ShapeLinkUI",
            "shortname": "twaver.vector.ShapeLinkUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18672,
            "description": "折线对应的视图对象，由一组点连接而成",
            "is_constructor": 1,
            "extends": "twaver.canvas.LinkUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "折线",
                    "type": "twaver.ShapeLink"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.ShapeLinkUI"
            }
        },
        "twaver.vector.ShapeNodeUI": {
            "name": "twaver.vector.ShapeNodeUI",
            "shortname": "twaver.vector.ShapeNodeUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18686,
            "description": "多边形网元对应的多边形网元视图，多边形由一组点组成，并将这些点依次连接而组成",
            "is_constructor": 1,
            "extends": "twaver.canvas.NodeUI",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "多边形网元",
                    "type": "twaver.ShapeNode"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.canvas.ShapeNodeUI"
            }
        },
        "twaver.charts.ChartBase": {
            "name": "twaver.charts.ChartBase",
            "shortname": "twaver.charts.ChartBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18700,
            "description": "它是TWaver中所有Chart图的基类，定义了Chart上通用的方法。它是和DataBox绑定的，以Chart图的方式来展示数据容器中的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.ViewBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.ChartBase"
            }
        },
        "twaver.controls.View": {
            "name": "twaver.controls.View",
            "shortname": "twaver.controls.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19497,
            "description": "可缩放的视图基类",
            "is_constructor": 1,
            "extends": "twaver.controls.ViewBase",
            "return": {
                "description": "",
                "type": "twaver.controls.View"
            }
        },
        "twaver.Dummy": {
            "name": "twaver.Dummy",
            "shortname": "twaver.Dummy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19672,
            "description": "哑节点是一种在network视图中不可见的网元。哑节点虽然不显示在network上，但是在DataBox中是实际存在的，并且它可以有自己的孩子和父亲节点。\n哑节点可以在tree，table或其他组件中显示，通常哑节点是用于组织数据的，比如在tree上管理网元的层次关系",
            "is_constructor": 1,
            "extends": "twaver.Element",
            "params": [
                {
                    "name": "id",
                    "description": "哑节点ID，用于唯一标识网元。如果为空，TWaver会按照默认的规则给哑节点ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是哑节点的ID，如果为Object类型，可以传入一个带哑节点属性的对象，比如： var dummy = new twaver.Dummy({     name:'dummy',      clients:{'bussinessID':125} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "哑节点对象本身",
                "type": "twaver.Dummy"
            }
        },
        "twaver.Link": {
            "name": "twaver.Link",
            "shortname": "twaver.Link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19693,
            "description": "Link是一种网元，它表现为Network上的连线。它在电信拓扑中用于展示链路或基于数据的连线。比如带有物理或逻辑意义的电缆，电路,路由线路，环路等。\n\n连线是和节点一起使用的。一条连线必须有起始、结束节点，起始节点和结束节点不能为空。\n\n当起始节点和结束节点相同时，这种连线成为自环连线。自环连线可以展示为半矩形或半圆形。当两个节点之间有多条连线时，默认可以双击绑定。TWaver会根据默认的规则选定一条连线做为代理连线，其他的连线都会隐藏。当然，也可以更改TWaver的这种代理的规则。\n\n连线和一般网元类似，也可以进行序列化和反序列化。",
            "is_constructor": 1,
            "extends": "twaver.Element",
            "params": [
                {
                    "name": "id",
                    "description": "连线ID，用于唯一标识网元。如果为空，TWaver会按照默认的规则给连线ID赋值。ID可以为string，number类型，可以为Node类型，也可以为Object类型。为string或number类型时指的是连线的ID，为Node类型时，fromNode和toNode相同，都为ID参数传入的Node对象。如果为Object类型，可以传入一个带连线属性的对象，比如： var link = new twaver.Link({     name:'linkname',     fromNode: twNode,   toNode:bbNode });",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "fromNode",
                    "description": "起始节点",
                    "type": "twaver.Node",
                    "optional": true
                },
                {
                    "name": "toNode",
                    "description": "结束节点",
                    "type": "twaver.Node",
                    "optional": true
                }
            ],
            "return": {
                "description": "连线对象本身",
                "type": "twaver.Link"
            }
        },
        "twaver.Node": {
            "name": "twaver.Node",
            "shortname": "twaver.Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19808,
            "description": "构造函数。\n节点是TWaver HTML5中最常见的一种网元。它在电信网络拓扑中表现为一种虚拟节点。节点上可以设置图片，标签，告警，附件等信息。电信拓扑中的任意网元都可以用节点来表示，比如说服务器，电脑，路由器，交换机等",
            "is_constructor": 1,
            "extends": "twaver.Element",
            "params": [
                {
                    "name": "id",
                    "description": "节点ID，用于唯一标识这个节点。如果为空，TWaver会按照默认的规则给节点ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是节点的ID，如果为Object类型，可以传入一个带节点属性的对象，比如： var node = new twaver.Node({      image:'tw130',      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "节点对象本身",
                "type": "twaver.Node"
            }
        },
        "twaver.canvas.Network": {
            "name": "twaver.canvas.Network",
            "shortname": "twaver.canvas.Network",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20042,
            "description": "用指定的ElementBox构造Network，ElementBox是Network的数据容器，如果为null则twaver内部会创建一个新的ElementBox；而且在构造Network后，也可以用Network#setElementBox方法重新绑定一个新的ElementBox",
            "is_constructor": 1,
            "extends": "twaver.controls.View",
            "params": [
                {
                    "name": "elementBox",
                    "description": "可选，默认为null，和Network关联的数据容器",
                    "type": "twaver.ElementBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Network"
            },
            "example": [
                " var box = new twaver.ElementBox();\nvar tree = new twaver.controls.Tree(box);\nvar network = new twaver.network.Network(box);"
            ]
        },
        "twaver.charts.DialChart": {
            "name": "twaver.charts.DialChart",
            "shortname": "twaver.charts.DialChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21703,
            "description": "仪表盘图，它是以表盘的形式来展示数据模型中的数据,是处于TWaver的MVC框架中的V(视图)层。\n表盘图支持3D的显示效果，仪表盘图主要分为三部分的设置：表盘的设置，表盘轴心的设置以及指针的设置",
            "is_constructor": 1,
            "extends": "twaver.charts.ChartBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据模型",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "仪表盘对象本身",
                "type": "twaver.charts.DialChart"
            }
        },
        "twaver.charts.PieChart": {
            "name": "twaver.charts.PieChart",
            "shortname": "twaver.charts.PieChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22284,
            "description": "饼图，它是以图表的形式来展示数据模型中的数据,是处于TWaver的MVC框架中的V(视图)层。\n饼图支持多种显示的类型，比如圆形、椭圆形、环形、线形、椭圆环形等。",
            "is_constructor": 1,
            "extends": "twaver.charts.ChartBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.PieChart"
            }
        },
        "twaver.charts.RadarChart": {
            "name": "twaver.charts.RadarChart",
            "shortname": "twaver.charts.RadarChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22430,
            "description": "雷达图，也称为螂蛛网图或戴布拉图。它是一个以多个坐标表示网元上'chart.values'值的图。它是处于TWaver的MVC框架中的V(视图)层。\n雷达图通常是用来描述多个实体之间在不同坐标集上的比较。雷达图可以很清晰的显示同一个实体上几个不同因素的值，也可以呈现多个不同实体在同一个坐标上值的比较",
            "is_constructor": 1,
            "extends": "twaver.charts.ChartBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据模型",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "雷达图对象本身",
                "type": "twaver.charts.RadarChart"
            }
        },
        "twaver.charts.ScaleChart": {
            "name": "twaver.charts.ScaleChart",
            "shortname": "twaver.charts.ScaleChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22869,
            "description": "刻度比例图，它是棒图、气泡图、曲线图的基类。这类图的特征是有X、Y坐标轴。它提供了坐标轴上一系列的参数设置",
            "is_constructor": 1,
            "extends": "twaver.charts.ChartBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.ScaleChart"
            }
        },
        "twaver.controls.ListBase": {
            "name": "twaver.controls.ListBase",
            "shortname": "twaver.controls.ListBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23275,
            "description": "构造函数\n这个类定义了列表、表格、树中通用的方法，它是这些类的基类。它和数据容器绑定，以图形化的方式展示数据容器中的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.View",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "ListBase对象本身",
                "type": "twaver.controls.ListBase"
            }
        },
        "twaver.controls.PropertySheet": {
            "name": "twaver.controls.PropertySheet",
            "shortname": "twaver.controls.PropertySheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23508,
            "description": "构造函数\n属性表是TWaver视图组件中的一种，它和数据容器绑定，并显示数据容器中当前选中的网元属性。\n属性表是只有两列的表格，以键、值这样的对应关系来显示属性，并可以对属性进行分组",
            "is_constructor": 1,
            "extends": "twaver.controls.View",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.PropertySheet"
            }
        },
        "twaver.Follower": {
            "name": "twaver.Follower",
            "shortname": "twaver.Follower",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24015,
            "description": "构造函数。\n跟随者是一种特殊的网元，它可以设置宿主节点，当宿主节点移动时，跟随者也会移动",
            "is_constructor": 1,
            "extends": "twaver.Node",
            "params": [
                {
                    "name": "id",
                    "description": "跟随者ID，用于唯一标识这个跟随者。如果为空，TWaver会按照默认的规则给跟随者ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是跟随者的ID，如果为Object类型，可以传入一个带跟随者属性的对象，比如： var follow = new twaver.Follow({      image:'tw130',      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Follower"
            }
        },
        "twaver.LinkSubNetwork": {
            "name": "twaver.LinkSubNetwork",
            "shortname": "twaver.LinkSubNetwork",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24105,
            "description": "子网连线，具有连线和子网的双重特性，它和普通连线的区别在于可以双击进入/退出子网，进入子网时可以展现出这个子网连线下所有的孩子网元",
            "is_constructor": 1,
            "extends": "twaver.Link",
            "params": [
                {
                    "name": "id",
                    "description": "连线子网ID，用于唯一标识子网连线。如果为空，TWaver会按照默认的规则给子网连线ID赋值。ID可以为string，number类型，可以为Node类型，也可以为Object类型。为string或number类型时指的是连线子网的ID，为Node类型时，fromNode和toNode相同，都为ID参数传入的Node对象，如果为Object类型，可以传入一个带连线子网属性的对象，比如： var linkSubNetwork = new twaver.LinkSubNetwork({     name:'linksubnetworkname',     fromNode: twNode,   toNode:bbNode });",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "子网连线本身",
                "type": "twaver.LinkSubNetwork"
            }
        },
        "twaver.network.Network": {
            "name": "twaver.network.Network",
            "shortname": "twaver.network.Network",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24125,
            "description": "用指定的ElementBox构造Network，ElementBox是Network的数据容器，如果为null则twaver内部会创建一个新的ElementBox；而且在构造Network后，也可以用Network#setElementBox方法重新绑定一个新的ElementBox",
            "is_constructor": 1,
            "extends": "twaver.controls.View",
            "params": [
                {
                    "name": "elementBox",
                    "description": "可选，默认为null，和Network关联的数据容器",
                    "type": "twaver.ElementBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Network"
            },
            "example": [
                " var box = new twaver.ElementBox();\nvar tree = new twaver.controls.Tree(box);\nvar network = new twaver.network.Network(box);"
            ]
        },
        "twaver.ShapeLink": {
            "name": "twaver.ShapeLink",
            "shortname": "twaver.ShapeLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25687,
            "description": "它是由一系列的点决定线路走向的一种连线。可以用于展示一些复杂线路的连线。通过添加、删除点可以更改连线的形状",
            "is_constructor": 1,
            "extends": "twaver.Link",
            "params": [
                {
                    "name": "id",
                    "description": "折线ID，用于唯一标识折线对象。如果为空，TWaver会按照默认的规则给折线ID赋值。ID可以为string，number类型，可以为Node类型，也可以为Object类型。为string或number类型时指的是折线的ID，为Node类型时，fromNode和toNode相同，都为ID参数传入的Node对象，如果为Object类型，可以传入一个带折线属性的对象，比如： var shapeLink = new twaver.ShapeLink({     name:'shapelinkname',     fromNode: twNode,   toNode:bbNode });",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "fromNode",
                    "description": "起始节点",
                    "type": "twaver.Node",
                    "optional": true
                },
                {
                    "name": "toNode",
                    "description": "结束节点",
                    "type": "twaver.Node",
                    "optional": true
                }
            ],
            "return": {
                "description": "折线对象本身",
                "type": "twaver.ShapeLink"
            }
        },
        "twaver.vector.Network": {
            "name": "twaver.vector.Network",
            "shortname": "twaver.vector.Network",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25752,
            "description": "用指定的ElementBox构造Network，ElementBox是Network的数据容器，如果为null则twaver内部会创建一个新的ElementBox；而且在构造Network后，也可以用Network#setElementBox方法重新绑定一个新的ElementBox",
            "is_constructor": 1,
            "extends": "twaver.controls.View",
            "params": [
                {
                    "name": "elementBox",
                    "description": "可选，默认为null，和Network关联的数据容器",
                    "type": "twaver.ElementBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.network.Network"
            },
            "example": [
                " var box = new twaver.ElementBox();\nvar tree = new twaver.controls.Tree(box);\nvar network = new twaver.network.Network(box);"
            ]
        },
        "twaver.charts.BarChart": {
            "name": "twaver.charts.BarChart",
            "shortname": "twaver.charts.BarChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27511,
            "description": "棒图是TWaver图表中的一种，它是以条形柱状的形式展示数据。它支持多种类型的呈现方式，通过setType方法设置。\n棒图是和DataBox绑定的，它呈现的是DataBox中Data的chart.values的值。",
            "is_constructor": 1,
            "extends": "twaver.charts.ScaleChart",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.BarChart"
            }
        },
        "twaver.charts.BubbleChart": {
            "name": "twaver.charts.BubbleChart",
            "shortname": "twaver.charts.BubbleChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27647,
            "description": "气泡图属于分散图的一种，它是用气泡来绘制数据的。在一个气泡图中，x轴，y轴以及气泡值本身分别代表了一个事件的三个值的变化，而气泡值的大小又取决于x轴与y轴上值的大小。\n气泡图支持多种形状的呈现，它取决于网元上chart.bubble.shape的值",
            "is_constructor": 1,
            "extends": "twaver.charts.ScaleChart",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.BubbleChart"
            }
        },
        "twaver.charts.LineChart": {
            "name": "twaver.charts.LineChart",
            "shortname": "twaver.charts.LineChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27832,
            "description": "曲线图是图表组件中的一种。它是以曲线的形式展示数据。曲线图展示的是数据容器的网元中chart.values的值",
            "is_constructor": 1,
            "extends": "twaver.charts.ScaleChart",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.charts.LineChart"
            }
        },
        "twaver.controls.List": {
            "name": "twaver.controls.List",
            "shortname": "twaver.controls.List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27942,
            "description": "构造函数\n它是以列表的形式来展示数据容器中的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.ListBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "指定的数据容器",
                    "type": "twaver.DataBox",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.List"
            }
        },
        "twaver.controls.TableBase": {
            "name": "twaver.controls.TableBase",
            "shortname": "twaver.controls.TableBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28155,
            "description": "构造函数\n它是表格和树表的基类，定义了表格和树表类中通用的方法，它是和DataBox绑定的，以图表的形式显示DataBox中的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.ListBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "指定的数据模型",
                    "type": "twaver.DataBox"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TableBase"
            }
        },
        "twaver.controls.Tree": {
            "name": "twaver.controls.Tree",
            "shortname": "twaver.controls.Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28291,
            "description": "TWaver HTML5的树是图形组件的一种，它是和DataBox绑定的，以树的形式展示DataBox中的数据以及数据之间的层次关系。\nTWaver HTML5的Tree采用了一种新的机制，只展示可见部分的数据，因此它的性能很高，能承载上万的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.ListBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.Tree"
            }
        },
        "twaver.Grid": {
            "name": "twaver.Grid",
            "shortname": "twaver.Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28647,
            "description": "构造函数\n网格是由行和列组成的一种网元。网格是单元格的集合，每个单元格上可以附上网格。\n网格可以指定其行和列的数量，也可以设置行和列的宽高。\nGrid的具体用法可以参考GridEditorDemo。",
            "is_constructor": 1,
            "extends": "twaver.Follower",
            "params": [
                {
                    "name": "id",
                    "description": "网格ID，用于唯一标识这个网格对象。如果为空，TWaver会按照默认的规则给连线网格ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是网格的ID，如果为Object类型，可以传入一个带网格属性的对象，比如： var grid = new twaver.Grid({      image:'tw130',      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Grid"
            }
        },
        "twaver.Group": {
            "name": "twaver.Group",
            "shortname": "twaver.Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28681,
            "description": "组是一种特殊的网元。它在某个区域形状中展示其孩子网元。组可以进行展开，合并。当组展开时，它的孩子网元都会在network上显示出来；合并组时，孩子网元都会隐藏。\n组和子网不同，组是在同一层展示它的孩子，而子网是需要进入下一层展示它的孩子网元",
            "is_constructor": 1,
            "extends": "twaver.Follower",
            "params": [
                {
                    "name": "id",
                    "description": "组ID，用于唯一标识这个组对象。如果为空，TWaver会按照默认的规则给组ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是组的ID，如果为Object类型，可以传入一个带组属性的对象，比如： var group = new twaver.Group({      image:'tw130',      name:'TWaver Router',      expanded:true,   styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Group"
            }
        },
        "twaver.RotatableNode": {
            "name": "twaver.RotatableNode",
            "shortname": "twaver.RotatableNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28729,
            "description": "可旋转节点, 设置以度为单位的旋转角度后, 节点的图片会旋转相应角度",
            "is_constructor": 1,
            "extends": "twaver.Follower",
            "params": [
                {
                    "name": "id",
                    "description": "网元ID，用于唯一标识网元对象。如果为空，TWaver会在内部构造唯一ID. 如果参数id为string或number类型, 则参数id将直接作为网元id; 如果为Object类型, 则将其属性赋值给网元",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.RotatableNode"
            },
            "example": [
                " var rotatableNode = new twaver.RotatableNode({\n    image: 'tw130',\n    name: 'TWaver Router',\n    expanded: true,\n    styles: {\n        'lable.yoffset': -75\n    }\n});"
            ]
        },
        "twaver.ShapeNode": {
            "name": "twaver.ShapeNode",
            "shortname": "twaver.ShapeNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28750,
            "description": "构造函数\n多边形节点是一种特殊的网元。普通网元在network上是通过图片来展示的，而多边形节点网元是通过多边形来代替图片呈现的。\n\n多边形网元是由一系列的点组成的多边形形状的网元，可以通过增加、删除点来更改其形状，多边形的点之间可以通过line （直线），move（移动），quad（曲线）来连接。\n\n多边形可以通过各种颜色，渐变色来填充绘制，也可以设置其外边框。\n\n多边形网元和折线都是通过一系列的点来绘制的网元，但是不同的是折线它是一条Link，必须有起始和结束节点，而且必须是一条连续的路径。而多边形网元的点之间可以move to，这样可以是一条不连续的路径。\n\n多边形网元的应用可以参考States Map Demo，它是一系列的点来绘制各个州",
            "is_constructor": 1,
            "extends": "twaver.Follower",
            "params": [
                {
                    "name": "id",
                    "description": "多边形节点ID，用于唯一标识这个多边形节点对象。如果为空，twaver会按照默认的规则给连线多边形节点ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是多边形节点的ID，如果为Object类型，可以传入一个带多边形节点属性的对象，比如： var shapeNode = new twaver.ShapeNode({      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.ShapeNode"
            }
        },
        "twaver.SubNetwork": {
            "name": "twaver.SubNetwork",
            "shortname": "twaver.SubNetwork",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28844,
            "description": "子网是TWaver中的一种网元，子网可以进行钻取。在network上用于分层展现。默认双击可以进入下一层，展示子网的所有孩子。\n子网可以设置自己的背景色和图片。子网中可以嵌入子网，这样在network上展示网元时可以进行分层呈现",
            "is_constructor": 1,
            "extends": "twaver.Follower",
            "params": [
                {
                    "name": "id",
                    "description": "子网ID，用于唯一标识这个子网对象。如果为空，twaver会按照默认的规则给连线子网ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是子网的ID，如果为Object类型，可以传入一个带子网属性的对象，比如： var subnetwork = new twaver.Subnetwork({      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.SubNetwork"
            }
        },
        "twaver.Bus": {
            "name": "twaver.Bus",
            "shortname": "twaver.Bus",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28867,
            "description": "总线是一种特殊的网元，它和shapeNode类似，也是由一系列的点组成的，但是它是不闭合的，也没有内部填充色。\n总线可以随着network的宽度更改而更改。总线上可以连接多个网元，来进行总线布局。\n总线的具体用法可以参考Bus Layout Demo",
            "is_constructor": 1,
            "extends": "twaver.ShapeNode",
            "params": [
                {
                    "name": "id",
                    "description": "总线ID，用于唯一标识这个多总线对象。如果为空，TWaver会按照默认的规则给总线ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是总线的ID，如果为Object类型，可以传入一个带总线属性的对象，比如： var bus = new twaver.Bus({      name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Bus"
            }
        },
        "twaver.controls.Table": {
            "name": "twaver.controls.Table",
            "shortname": "twaver.controls.Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28882,
            "description": "表格是TWaver HTML5中提供的视图组件的一种，它是和DataBox绑定的，以表格的形式呈现出DataBox中的数据。TWaver HTML5中表格能承载万级别的数据，它采用了一种新的机制来绘制表格，极大地提高了传统的表格性能。",
            "is_constructor": 1,
            "extends": "twaver.controls.TableBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.Table"
            }
        },
        "twaver.controls.TreeTable": {
            "name": "twaver.controls.TreeTable",
            "shortname": "twaver.controls.TreeTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29114,
            "description": "TreeTable是结合了Tree和Table特性的一种视图组件，它既有树的展开、合并功能，也有表格那种能呈现多列数据的功能。\nTreeTable是和数据容器一起工作的，它以图形的方式显示数据容器中的数据",
            "is_constructor": 1,
            "extends": "twaver.controls.TableBase",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.controls.TreeTable"
            }
        },
        "twaver.ShapeSubNetwork": {
            "name": "twaver.ShapeSubNetwork",
            "shortname": "twaver.ShapeSubNetwork",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29538,
            "description": "多边形子网是一种子网网元，它是有一系列的点组成的多边形形状的子网。它继承于ShapeNode，和ShapeNode的区别在于它可以双击进入/退出下一层",
            "is_constructor": 1,
            "extends": "twaver.ShapeNode",
            "params": [
                {
                    "name": "id",
                    "description": "多边形子网ID，用于唯一标识这个多边形子网对象。如果为空，TWaver会按照默认的规则给多边形子网ID赋值。ID可以为string，number类型，也可以为Object类型。为string或number类型时指的是多边形子网的ID，如果为Object类型，可以传入一个带多边形子网属性的对象，比如： var shapeSubNetwork = new twaver.ShapeSubNetwork({  name:'TWaver Router',      styles:{'lable.yoffset':-75} });",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.ShapeSubNetwork"
            }
        }
    },
    "classitems": [
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 36,
            "description": "释放告警网元映射中的所有资源，包括告警容器，网元容器等",
            "itemtype": "method",
            "name": "twaver.AlarmElementMapping.dispose",
            "class": "twaver.AlarmElementMapping"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 42,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.AlarmElementMapping.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.AlarmElementMapping"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 49,
            "description": "通过网元获取相关联的告警对象",
            "itemtype": "method",
            "name": "twaver.AlarmElementMapping.getCorrespondingAlarms",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "告警对象集合",
                "type": "twaver.List"
            },
            "class": "twaver.AlarmElementMapping"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 57,
            "description": "通过告警获取发生这个告警的网元对象",
            "itemtype": "method",
            "name": "twaver.AlarmElementMapping.getCorrespondingElements",
            "params": [
                {
                    "name": "alarm",
                    "description": "告警对象",
                    "type": "twaver.Alarm"
                }
            ],
            "return": {
                "description": "发生告警的网元对象集合",
                "type": "twaver.List"
            },
            "class": "twaver.AlarmElementMapping"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 80,
            "description": "添加一个告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.add",
            "params": [
                {
                    "name": "value",
                    "description": "告警级别的值，值越大，告警级别越高",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "告警级别的名称",
                    "type": "String"
                },
                {
                    "name": "nickName",
                    "description": "告警级别的昵称，用于显示在告警冒泡中",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "告警级别的颜色",
                    "type": "String"
                },
                {
                    "name": "displayName",
                    "description": "告警级别显示的名称",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "告警级别对象本身",
                "type": "twaver.AlarmSeverity"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 93,
            "description": "清除所有的告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.clear",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 100,
            "description": "清除告警:告警级别中的一种，告警级别的值为0，默认是最低的告警级别",
            "itemtype": "property",
            "name": "CLEARED",
            "type": "twaver.AlarmSeverity",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 108,
            "description": "比较两种指定的告警级别的值:如果告警级别1大于告警级别2，返回1；如果告警级别1小于告警级别2，返回-1；如果相等，返回0",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.compare",
            "params": [
                {
                    "name": "severity1",
                    "description": "",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "severity2",
                    "description": "",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "如果告警级别1大于告警级别2，返回1；如果告警级别1小于告警级别2，返回-1；如果相等，返回0",
                "type": "Number"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 118,
            "description": "严重告警。告警级别中的一种，告警级别的值为500，默认是最高的告警级别",
            "itemtype": "property",
            "name": "CRITICAL",
            "type": "twaver.AlarmSeverity",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 126,
            "description": "覆盖所有的告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.forEach",
            "params": [
                {
                    "name": "callbackFunction",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 135,
            "description": "通过告警级别的名称获取告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.getByName",
            "params": [
                {
                    "name": "name",
                    "description": "告警级别的名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "告警级别对象",
                "type": "twaver.AlarmSeverity"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 144,
            "description": "通过告警级别的值获取告警级别。\n告警级别的值越大，告警级别越高。告警级别的值是不可以重复的",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.getByValue",
            "params": [
                {
                    "name": "value",
                    "description": "告警级别的值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "告警级别对象",
                "type": "twaver.AlarmSeverity"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 154,
            "description": "获取排序的函数。默认是按照告警级别的值来排序的",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.getSortFunction",
            "return": {
                "description": "告警级别排序的函数",
                "type": "Function"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 162,
            "description": "不确定告警。告警级别的值为100",
            "itemtype": "property",
            "name": "INDETERMINATE",
            "type": "twaver.AlarmSeverity",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 170,
            "description": "判断是否是清除告警",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.isClearedAlarmSeverity",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "true为清除告警，否则为false",
                "type": "Boolean"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 179,
            "description": "主要告警。告警级别的值为400",
            "itemtype": "property",
            "name": "MAJOR",
            "type": "twaver.AlarmSeverity",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 187,
            "description": "次要告警。告警级别的值为300",
            "itemtype": "property",
            "name": "MINOR",
            "type": "twaver.AlarmSeverity",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 195,
            "description": "获取类名",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 202,
            "description": "删除一个告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.remove",
            "params": [
                {
                    "name": "name",
                    "description": "告警级别的名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "删除了的告警级别对象",
                "type": "twaver.AlarmSeverity"
            },
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 211,
            "description": "设置排序的函数。默认是按照告警级别的值来排序的",
            "itemtype": "method",
            "name": "twaver.AlarmSeverity.setSortFunction",
            "params": [
                {
                    "name": "sortFunction",
                    "description": "告警级别排序的函数",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 219,
            "description": "所有的告警级别",
            "itemtype": "property",
            "name": "severities",
            "type": "twaver.List",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 227,
            "description": "警告告警。告警级别的值为200",
            "itemtype": "property",
            "name": "WARNING",
            "type": "twaver.AlarmSeverity",
            "static": 1,
            "class": "twaver.AlarmSeverity"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 247,
            "description": "确认某个告警级别的一个告警，调用这个方法后，网元上的新发告警数量会减一，确认告警的数量会加一",
            "itemtype": "method",
            "name": "twaver.AlarmState.acknowledgeAlarm",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 254,
            "description": "确认网元上某个告警级别的所有告警，调用这个方法后，网元上这种告警级别的所有新发告警数量都增加到确认告警的数量上，新发告警的数量则变为零",
            "itemtype": "method",
            "name": "twaver.AlarmState.acknowledgeAllAlarms",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 261,
            "description": "清除所有的告警状态",
            "itemtype": "method",
            "name": "twaver.AlarmState.clear",
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 267,
            "description": "减少指定告警级别的确认告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.decreaseAcknowledgedAlarm",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "decrement",
                    "description": "减少了的确认告警的数量，为空时数量为1",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 275,
            "description": "减少指定告警级别的新发告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.decreaseNewAlarm",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "decrement",
                    "description": "减少的新发告警的数量，为空时数量为1",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 283,
            "description": "获取指定级别的确认告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.getAcknowledgedAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "指定级别的确认告警的数量",
                "type": "Number"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 291,
            "description": "获取指定告警级别的数量，包括新发告警和确认告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.getAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "告警级别的数量",
                "type": "Number"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 299,
            "description": "获取告警状态类的名称",
            "itemtype": "method",
            "name": "twaver.AlarmState.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 306,
            "description": "获取最高级别的确认告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.getHighestAcknowledgedAlarmSeverity",
            "return": {
                "description": "告警级别",
                "type": "twaver.AlarmSeverity"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 313,
            "description": "获取本地告警中最高级别的告警，包括新发告警和确认告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.getHighestNativeAlarmSeverity",
            "return": {
                "description": "最高级别的告警",
                "type": "twaver.AlarmSeverity"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 320,
            "description": "获取最高级别的新发告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.getHighestNewAlarmSeverity",
            "return": {
                "description": "告警级别",
                "type": "twaver.AlarmSeverity"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 327,
            "description": "获取最高级别的告警。包括新发告警，确认告警和传递告警之间的比较",
            "itemtype": "method",
            "name": "twaver.AlarmState.getHighestOverallAlarmSeverity",
            "return": {
                "description": "告警级别",
                "type": "twaver.AlarmSeverity"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 334,
            "description": "获取指定告警级别新发告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.getNewAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别，为空时获取的是所有的告警级别",
                    "type": "twaver.AlarmSeverity",
                    "optional": true
                }
            ],
            "return": {
                "description": "告警级别的数量",
                "type": "Number"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 342,
            "description": "获取传播告警的级别。网元上的传播告警级别默认是取的孩子上的最高告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmState.getPropagateSeverity",
            "return": {
                "description": "传播告警的级别",
                "type": "twaver.AlarmSeverity"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 349,
            "description": "是否显示告警级别较低的新发告警:TWaver是对最高级别的新发告警的网元进行渲染。如果返回值为true，告警冒泡中将会在文本最后显示\"+\"，来表示还有更多的告警级别较低的新发告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.hasLessSevereNewAlarms",
            "return": {
                "description": "如果返回值为true，告警冒泡中将会在文本最后显示\"+\"，表示还有更多的告警级别较低的新发告警。返回flase，告警冒泡中只显示最高级别的告警信息",
                "type": "Boolean"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 356,
            "description": "增加指定告警级别的确认告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.increaseAcknowledgedAlarm",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "increment",
                    "description": "告警级别增加的数量",
                    "type": "Number"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 364,
            "description": "增加指定告警级别的新发告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.increaseNewAlarm",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "increment",
                    "description": "增加的新发告警的数量，为空时数量为1",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 372,
            "description": "判断告警状态是否为空，为空代表没有任何告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.isEmpty",
            "return": {
                "description": "true为没有任何告警，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 379,
            "description": "是否允许传播告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.isEnablePropagation",
            "return": {
                "description": "如果孩子的告警可以传播到父亲上，返回true；否则为false",
                "type": "Boolean"
            },
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 386,
            "description": "删除指定告警级别的所有确认告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.removeAllAcknowledgedAlarms",
            "params": [
                {
                    "name": "severity",
                    "description": "指定的告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 393,
            "description": "删除指定告警级别的所有新发告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.removeAllNewAlarms",
            "params": [
                {
                    "name": "severity",
                    "description": "指定的告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 400,
            "description": "设置指定级别的确认告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.setAcknowledgedAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "count",
                    "description": "告警级别的数量",
                    "type": "Number"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 408,
            "description": "设置是否允许传播告警",
            "itemtype": "method",
            "name": "twaver.AlarmState.setEnablePropagation",
            "params": [
                {
                    "name": "enablePropagation",
                    "description": "如果孩子的告警可以传播到父亲上，则为true，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 415,
            "description": "设置指定级别的新发告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmState.setNewAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                },
                {
                    "name": "count",
                    "description": "告警级别的数量",
                    "type": "Number"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 423,
            "description": "设置传播告警的级别。网元上的传播告警级别默认是取的孩子上的最高告警级别",
            "itemtype": "method",
            "name": "twaver.AlarmState.setPropagateSeverity",
            "params": [
                {
                    "name": "propagateSeverity",
                    "description": "传播告警级别的值",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "class": "twaver.AlarmState"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 439,
            "description": "动画每帧执行的动作，子类重载此方法实现自定义动画效果",
            "itemtype": "method",
            "name": "twaver.animate.Animate.action",
            "params": [
                {
                    "name": "rate",
                    "description": "动画完成进度",
                    "type": "Number"
                }
            ],
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 446,
            "description": "当前帧索引",
            "itemtype": "property",
            "name": "current",
            "type": "Number",
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 453,
            "description": "动画的每一帧之间等待时间，默认值为4毫秒",
            "itemtype": "property",
            "name": "delay",
            "type": "Number",
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 460,
            "description": "回调函数:动画结束后执行的动作",
            "itemtype": "property",
            "name": "finishFunction",
            "type": "Function",
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 467,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.animate.Animate.getClassName",
            "return": {
                "description": "返回此类的字符串类名",
                "type": "String"
            },
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 474,
            "description": "获取当前帧的延迟毫秒数，默认实现为每帧延迟毫秒数乘以当前帧索引，动画表现出由快到慢的渐变过程",
            "itemtype": "method",
            "name": "twaver.animate.Animate.getCurrentDelay",
            "return": {
                "description": "返回当前帧的延迟毫秒数",
                "type": "Number"
            },
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 481,
            "description": "下一个动画是否等待当前动画结束，默认值为false",
            "itemtype": "property",
            "name": "shouldBeFinished",
            "type": "Boolean",
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 488,
            "description": "动画帧数，默认值为8",
            "itemtype": "property",
            "name": "step",
            "type": "Number",
            "class": "twaver.animate.Animate"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 506,
            "description": "遍历所有的兄弟链路。",
            "itemtype": "method",
            "name": "twaver.BundleLinks.forEachSiblingLink",
            "params": [
                {
                    "name": "f",
                    "description": "遍历链路时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域。为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.BundleLinks"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 514,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.BundleLinks.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.BundleLinks"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 521,
            "description": "获取所有绑定的链路",
            "itemtype": "method",
            "name": "twaver.BundleLinks.getLinks",
            "return": {
                "description": "绑定链路的集合",
                "type": "twaver.List"
            },
            "class": "twaver.BundleLinks"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 528,
            "description": "获取所有的兄弟链路",
            "itemtype": "method",
            "name": "twaver.BundleLinks.getSiblings",
            "return": {
                "description": "兄弟链路的集合",
                "type": "twaver.List"
            },
            "class": "twaver.BundleLinks"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 546,
            "description": "获取附件透明度，默认值为1",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getAlpha",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 553,
            "description": "获取字符串类名",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 560,
            "description": "获取和附件关联的网元",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getElement",
            "return": {
                "description": "返回和附件关联的网元",
                "type": "twaver.Element"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 567,
            "description": "获取和附件关联的网元视图",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getElementUI",
            "return": {
                "description": "返回和附件关联的网元视图",
                "type": "twaver.canvas.ElementUI"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 574,
            "description": "获取附件的字体",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getFont",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回附件的字体",
                "type": "String"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 582,
            "description": "获取和附件关联的拓扑",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getNetwork",
            "return": {
                "description": "返回和附件关联的拓扑",
                "type": "twaver.canvas.Network"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 589,
            "description": "获取指定样式的值，封装了Element#getStyle方法",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式的值",
                "type": "Object"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 597,
            "description": "获取附件视图的位置及大小，值为包含x、y、width和height属性的Object对象",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.getViewRect",
            "return": {
                "description": "返回附件视图的位置及大小，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 604,
            "description": "命中测试，判断点击指定坐标点是否能选中附件",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.hit",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "如果点击指定坐标能选中附件，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 613,
            "description": "命中测试，判断附件是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.hitCanvasRect",
            "params": [
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回附件是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 621,
            "description": "获取附件是否显示在最上层",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.isShowOnTop",
            "return": {
                "description": "返回附件是否显示在最上层",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 628,
            "description": "绘制附件, 子类重载此方法绘制子类自己",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.paint",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 635,
            "description": "设置附件是否显示在最上层",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.setShowOnTop",
            "params": [
                {
                    "name": "t",
                    "description": "附件是否显示在最上层",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 642,
            "description": "更新属性, 并重新计算附件大小和位置",
            "itemtype": "method",
            "name": "twaver.canvas.Attachment.validate",
            "class": "twaver.canvas.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 659,
            "description": "添加附件，如果showInAttachmentDiv为true，则附件被添加到拓扑的附件层（attachmentDiv），否则附件被添加到网元视图上",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.addAttachment",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.network.Attachment"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 666,
            "description": "添加内容区域，所有内容区域合并后构成unionBodyBounds",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.addBodyBounds",
            "params": [
                {
                    "name": "rect",
                    "description": "区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 673,
            "description": "给指定区域添加阴影区域",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.appendShadowBound",
            "params": [
                {
                    "name": "part",
                    "description": "要添加阴影的对象",
                    "type": "Object"
                },
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "添加阴影后的区域",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 682,
            "description": "检查是否显示告警附件，如果Network#getAlarmLabel(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.checkAlarmAttachment",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 688,
            "description": "检查所有附件是否显示，网元刷新时（validate）被调用，包括告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.checkAttachments",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 694,
            "description": "检查是否显示编辑附件，如果此网元可选中（Network#isSelected(element)返回true），而且可编辑（Network#isEditable(element)返回true），而且此网元视图可编辑（isEditable()返回true），则显示，否则不显示",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.checkEditAttachment",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 700,
            "description": "检查是否显示图标组附件，如果Network#getIconsNames(element)返回null或者length为0，则不显示",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.checkIconsAttachment",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 706,
            "description": "检查是否显示标签附件，如果Network#getLabel(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.checkLabelAttachment",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 712,
            "description": "清除阴影",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.clearShadow",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 719,
            "description": "获取告警附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getAlarmAttachment",
            "return": {
                "description": "返回告警附件",
                "type": "twaver.network.AlarmAttachment"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 726,
            "description": "获取所有附件集合，包含告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getAttachments",
            "return": {
                "description": "返回所有附件集合",
                "type": "twaver.List"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 733,
            "description": "获得内容区域，默认为createBodyRect返回的结果",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 740,
            "description": "获取该类字符串类名",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 747,
            "description": "获取指定样式的渲染颜色，如果innerColor不为空则返回innerColor，否则返回指定样式的值",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getDyeColor",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回渲染颜色",
                "type": "String"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 755,
            "description": "获取编辑附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getEditAttachment",
            "return": {
                "description": "返回编辑附件",
                "type": "twaver.network.EditAttachment"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 762,
            "description": "获取和网元视图关联的网元",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getElement",
            "return": {
                "description": "返回和网元视图关联的网元",
                "type": "twaver.Element"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 769,
            "description": "获取给定样式属性的值作为字体，如果指定样式的值是null，则返回twaver.Defaults.FONT",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getFont",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回字体",
                "type": "String"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 777,
            "description": "获取热点，用于定位附件等的位置",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getHotSpot",
            "return": {
                "description": "返回热点，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 784,
            "description": "获取图标组附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getIconsAttachment",
            "return": {
                "description": "返回图标组附件",
                "type": "twaver.network.IconsAttachment"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 791,
            "description": "获取网元填充色",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getInnerColor",
            "return": {
                "description": "返回网元填充色",
                "type": "String"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 798,
            "description": "获取标签附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getLabelAttachment",
            "return": {
                "description": "返回标签附件",
                "type": "twaver.network.LabelAttachment"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 805,
            "description": "获取和网元视图关联的拓扑",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getNetwork",
            "return": {
                "description": "返回和网元视图关联的拓扑",
                "type": "twaver.network.Network"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 812,
            "description": "获取网元边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getOuterColor",
            "return": {
                "description": "返回网元边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 819,
            "description": "获取网元选中后阴影颜色",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getShadowColor",
            "return": {
                "description": "返回网元选中后阴影颜色",
                "type": "String"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 826,
            "description": "获取指定样式属性的值，封装了Element.getStyle",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式属性的值",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 834,
            "description": "获取合并的内容区域",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getUnionBodyBounds",
            "return": {
                "description": "返回合并的内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 841,
            "description": "获取视图内容区域，包括unionBodyBounds和所有附件的区域",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.getViewRect",
            "return": {
                "description": "返回视图内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 848,
            "description": "和网元视图关联的网元属性变化时的处理函数，默认实现为调用invalidate方法让网元视图刷新",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.handlePropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 855,
            "description": "和网元视图关联的网元被选中或取消选中时的处理函数，默认实现为调用invalidate方法让网元视图刷新",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 862,
            "description": "命中测试，判断网元视图是否包含指定坐标",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.hit",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "网元视图是否包含指定坐标，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 871,
            "description": "网元是否包含指定坐标点",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.hitCanvasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回网元是否包含指定坐标点",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 880,
            "description": "网元是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.hitCanvasRect",
            "params": [
                {
                    "name": "r",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回网元是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 888,
            "description": "网元附件是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.hitCanvasRectAtAttachments",
            "params": [
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回网元附件是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 896,
            "description": "网元主体是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.hitCanvasRectAtBody",
            "params": [
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回网元主体是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 904,
            "description": "获取指定坐标下的视图对象，为附件或者网元视图本身",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定坐标下的视图对象，为附件或者网元视图本身",
                "type": "Object"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 913,
            "description": "判断网元视图是否和指定区域相交",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.intersects",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果网元视图包含指定矩形区域，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 921,
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.invalidate",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 927,
            "description": "获取网元视图是否可编辑，默认值为true",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.isEditable",
            "return": {
                "description": "如果网元视图可编辑，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 934,
            "description": "判断是否需要设置阴影，默认实现是如果设置了阴影颜色，而且网元被被选中，而且select.style样式为shadow，则返回true，否则返回false",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.isShadowable",
            "return": {
                "description": "如果需要设置阴影，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 941,
            "description": "绘制网元视图",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.paint",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 948,
            "description": "绘制网元附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.paintAttachment",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "att",
                    "description": "附件",
                    "type": "twaver.canvas.Attachment"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 956,
            "description": "绘制网元所有附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.paintAttachments",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 963,
            "description": "绘制网元主体",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.paintBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 970,
            "description": "删除指定附件",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.removeAttachment",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.network.Attachment"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 977,
            "description": "设置热点，用于定位附件等的位置",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.setHotSpot",
            "params": [
                {
                    "name": "value",
                    "description": "热点，值为包含x和y属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 984,
            "description": "给指定画布元素设置阴影效果",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.setShadow",
            "params": [
                {
                    "name": "part",
                    "description": "网元视图（ElementUI）或者附件（Attachment）",
                    "type": "Object"
                },
                {
                    "name": "canvas",
                    "description": "画布元素",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "rect",
                    "description": "画图大小及位置，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "画布渲染内容",
                "type": "CanvasRenderingContext2D"
            },
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 994,
            "description": "更新样式",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.updateStyle",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1000,
            "description": "此方法被Network调用，用以重画网元视图内容，此内部检查所有附件是否可见（checkAttachments），并调用updateMeasure方法重画网元内容，最后调用附件的updateMeasure方法，让附件重画",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.validate",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1006,
            "description": "更新视图",
            "itemtype": "method",
            "name": "twaver.canvas.ElementUI.validateImpl",
            "class": "twaver.canvas.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1022,
            "description": "批量添加事件监听器，参数个数不限，类型为String，值为所有合法的事件类型：比如mousedown，mouseup；此方法会查找函数名为\"handle_\"加\"事件类型\"（handle_mousedown，handle_mousedown）的函数，作为指定事件类型的回调函数。此方法一般在setUp方法里被调用",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.addListener",
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1028,
            "description": "获取缩放和便宜后的矩形对象",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.convertFromUIToMarkerRect",
            "params": [
                {
                    "name": "vr",
                    "description": "矩形对象",
                    "type": "Object"
                },
                {
                    "name": "xoff",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoff",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回缩放和便宜后的矩形对象",
                "type": "Object"
            },
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1038,
            "description": "获取缩放和平移后的坐标点",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.convertPointFromView",
            "params": [
                {
                    "name": "p",
                    "description": "坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缩放和平移后的坐标点",
                "type": "Object"
            },
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1046,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1053,
            "description": "获取鼠标点所在的位置",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.getMarkerPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标点所在的位置",
                "type": "Object"
            },
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1061,
            "description": "绘制交互模式",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.paint",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1068,
            "description": "批量删除事件监听器，参数个数不限，类型为String，值为所有合法的事件类型：比如mousedown，mouseup；此方法会删除指定事件类型的函数名为\"hanle_\"加\"事件类型\"（handle_mousedown，handle_mousedown）的监听器。此方法一般在tearDown方法里被调用",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.removeListener",
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1074,
            "description": "重绘交互模式",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.repaint",
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1080,
            "description": "初始化交互处理器，一般调用addListener方法添加鼠标、键盘以及触摸事件监听器；Network#setInteractions会调用此方法",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.setUp",
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1086,
            "description": "销毁交互处理器，一般调用removeListener方法删除鼠标、键盘以及触摸事件监听器；使用Network#setInteractions切换交互处理器时会调用此方法撤销旧的交互处理器",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.BaseInteraction.tearDown",
            "class": "twaver.canvas.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1102,
            "description": "清除拖动鼠标和松开鼠标监听",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewInteraction.clear",
            "class": "twaver.canvas.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1108,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.canvas.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1115,
            "description": "按下鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewInteraction.handleMousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1122,
            "description": "拖动鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewInteraction.handleMousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1129,
            "description": "松开鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewInteraction.handleMouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1146,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewMSTouchInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.canvas.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1153,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewMSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1160,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewMSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1167,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewMSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1184,
            "description": "清除拖动鼠标和松开鼠标监听",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewTouchInteraction.clear",
            "class": "twaver.canvas.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1190,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewTouchInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.canvas.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1197,
            "description": "触摸结束时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1204,
            "description": "触摸移动时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1211,
            "description": "触摸开始时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.OverviewTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1228,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.charts.ChartInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.charts.ChartInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1235,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1242,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartInteraction.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1249,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartInteraction.handleMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1256,
            "description": "处理鼠标滚轮事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartInteraction.handleMouseWheel",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1273,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1280,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1287,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1294,
            "description": "处理鼠标滚轮事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.handleMouseWheel",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1301,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1308,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1315,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartMSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.ChartMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1332,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.charts.ChartTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.charts.ChartTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1339,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.ChartTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1346,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.ChartTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1353,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.charts.ChartTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.ChartTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1370,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.charts.LegendPaneInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.charts.LegendPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1377,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.charts.LegendPaneInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.charts.LegendPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1394,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.charts.LegendPaneTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.charts.LegendPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1401,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.charts.LegendPaneTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.charts.LegendPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1418,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseInteraction.getClassName",
            "return": {
                "description": "返回此类的字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.ListBaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1425,
            "description": "处理键盘按下事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseInteraction.handleKeyDown",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.controls.ListBaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1432,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.ListBaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1439,
            "description": "处理滚动事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseInteraction.handleScroll",
            "params": [
                {
                    "name": "e",
                    "description": "滚动事件",
                    "type": "Event"
                }
            ],
            "class": "twaver.controls.ListBaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1456,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.ListBaseTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1463,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.ListBaseTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1470,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.ListBaseTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1477,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.ListBaseTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1494,
            "description": "添加菜单项",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.addMenuItem",
            "params": [
                {
                    "name": "menuItem",
                    "description": "包含id, type, icon, label, visible, enabled, separator, action, items, selected, groupName属性的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1501,
            "description": "添加分隔条",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.addSeparator",
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1507,
            "description": "销毁右键菜单对象，删除关联的视图的右键事件",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.dispose",
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1513,
            "description": "获取背景颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getBackground",
            "return": {
                "description": "返回背景颜色",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1520,
            "description": "获取边框颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getBorder",
            "return": {
                "description": "返回边框颜色",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1527,
            "description": "返回勾选框在选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getCheckboxSelectedIcon",
            "return": {
                "description": "获取勾选框在选中状态时的图标名称",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1534,
            "description": "获取勾选框在未选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getCheckboxUnselectedIcon",
            "return": {
                "description": "返回勾选框在未选中状态时的图标名称",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1541,
            "description": "获取类名",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1548,
            "description": "获取右键菜单关联的视图对象",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getContextView",
            "return": {
                "description": "返回视图对象",
                "type": "Object"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1555,
            "description": "获取菜单项不可用时的文字颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getDisabledColor",
            "return": {
                "description": "返回菜单项不可用时的文字颜色",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1562,
            "description": "获取菜单项高亮背景颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getFocusColor",
            "return": {
                "description": "返回菜单项高亮背景颜色",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1569,
            "description": "根据编号返回菜单项",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getMenuItem",
            "params": [
                {
                    "name": "id",
                    "description": "编号",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回菜单项",
                "type": "Object"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1577,
            "description": "根据编号返回菜单项",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getMenuItemById",
            "params": [
                {
                    "name": "id",
                    "description": "编号",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回菜单项",
                "type": "Object"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1585,
            "description": "获取菜单项高度",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getMenuItemHeight",
            "return": {
                "description": "返回菜单项高度",
                "type": "Number"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1592,
            "description": "获取菜单项数组",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getMenuItems",
            "return": {
                "description": "返回菜单项数组",
                "type": "Array"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1599,
            "description": "获取单选框在选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getRadiobuttonSelectedIcon",
            "return": {
                "description": "返回单选框在选中状态时的图标名称",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1606,
            "description": "获取单选框在未选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getRadiobuttonUnselectedIcon",
            "return": {
                "description": "返回单选框在未选中状态时的图标名称",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1613,
            "description": "获取子菜单项不可用时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getSubMenuDisableIcon",
            "return": {
                "description": "返回子菜单项不可用时的图标名称",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1620,
            "description": "获取子菜单项可用时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getSubMenuEnableIcon",
            "return": {
                "description": "返回子菜单项可用时的图标名称",
                "type": "String"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1627,
            "description": "获取右键菜单div元素",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getView",
            "return": {
                "description": "返回右键菜单div元素",
                "type": "HTMLElement"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1634,
            "description": "获取右键菜单宽度",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.getWidth",
            "return": {
                "description": "返回右键菜单宽度",
                "type": "Number"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1641,
            "description": "隐藏右键菜单",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.hide",
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1647,
            "description": "获取菜单项是否可用，默认菜单项的enable属性不为false时可用",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.isEnabled",
            "params": [
                {
                    "name": "menuItem",
                    "description": "菜单项",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回菜单项是否可用",
                "type": "Boolean"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1655,
            "description": "获取菜单项是否可见，默认菜单项的visible属性不为false时可用",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.isVisible",
            "params": [
                {
                    "name": "menuItem",
                    "description": "菜单项",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回菜单项是否可见",
                "type": "Boolean"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1663,
            "description": "菜单点击时的回调函数",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.onAction",
            "params": [
                {
                    "name": "menuItem",
                    "description": "菜单项",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1670,
            "description": "菜单项绘制后的回调函数",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.onMenuItemRendered",
            "params": [
                {
                    "name": "div",
                    "description": "div元素",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "menuItem",
                    "description": "菜单项",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1678,
            "description": "菜单显示前的回调函数，如果返回false，则右键菜单不显示",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.onMenuShowing",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回值决定右键菜单是否显示",
                "type": "Boolean"
            },
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1686,
            "description": "绘制菜单",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.renderMenu",
            "params": [
                {
                    "name": "view",
                    "description": "HTML元素",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "menuItems",
                    "description": "菜单项数组",
                    "type": "Array"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1694,
            "description": "绘制菜单项",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.renderMenuItem",
            "params": [
                {
                    "name": "div",
                    "description": "div元素",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "menuItem",
                    "description": "菜单项",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1702,
            "description": "设置背景色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setBackground",
            "params": [
                {
                    "name": "value",
                    "description": "背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1709,
            "description": "设置边框颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setBorder",
            "params": [
                {
                    "name": "value",
                    "description": "颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1716,
            "description": "设置勾选框在选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setCheckboxSelectedIcon",
            "params": [
                {
                    "name": "value",
                    "description": "勾选框在选中状态时的图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1723,
            "description": "设置勾选框在未选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setCheckboxUnselectedIcon",
            "params": [
                {
                    "name": "value",
                    "description": "勾选框在未选中状态时的图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1730,
            "description": "设置右键菜单关联的视图对象",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setContextView",
            "params": [
                {
                    "name": "contextView",
                    "description": "右键菜单关联的视图对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1737,
            "description": "设置菜单项不可用时的文字颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setDisabledColor",
            "params": [
                {
                    "name": "value",
                    "description": "菜单项不可用时的文字颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1744,
            "description": "设置菜单项高亮背景颜色",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setFocusColor",
            "params": [
                {
                    "name": "value",
                    "description": "菜单项高亮背景颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1751,
            "description": "设置菜单项高度",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setMenuItemHeight",
            "params": [
                {
                    "name": "value",
                    "description": "菜单项高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1758,
            "description": "设置菜单项数组",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setMenuItems",
            "params": [
                {
                    "name": "menuItems",
                    "description": "菜单项数组",
                    "type": "Array"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1765,
            "description": "设置单选框在选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setRadiobuttonSelectedIcon",
            "params": [
                {
                    "name": "value",
                    "description": "单选框在选中状态时的图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1772,
            "description": "设置单选框在未选中状态时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setRadiobuttonUnselectedIcon",
            "params": [
                {
                    "name": "value",
                    "description": "单选框在未选中状态时的图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1779,
            "description": "设置子菜单项不可用时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setSubMenuDisableIcon",
            "params": [
                {
                    "name": "value",
                    "description": "子菜单项不可用时的图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1786,
            "description": "设置子菜单项可用时的图标名称",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setSubMenuEnableIcon",
            "params": [
                {
                    "name": "value",
                    "description": "子菜单项可用时的图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1793,
            "description": "设置右键菜单宽度",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.setWidth",
            "params": [
                {
                    "name": "value",
                    "description": "宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1800,
            "description": "显示右键菜单",
            "itemtype": "method",
            "name": "twaver.controls.PopupMenu.show",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PopupMenu"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1817,
            "description": "鼠标移动到列分割线时，更改鼠标样式",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetInteraction.changeCursor",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1824,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1831,
            "description": "获取当前鼠标相对于属性页的x坐标值",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetInteraction.getX",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标相对于属性页的x坐标值",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1839,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1846,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetInteraction.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1853,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetInteraction.handleMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1860,
            "description": "属性页属性和值的最小列宽",
            "itemtype": "property",
            "name": "minGap",
            "type": "Number",
            "class": "twaver.controls.PropertySheetInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1877,
            "description": "返回此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetTouchInteraction.getClassName",
            "return": {
                "description": "获取此类的字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheetTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1884,
            "description": "获取当前触摸点相对于属性页的x坐标值",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetTouchInteraction.getX",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点相对于属性页的x坐标值",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheetTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1892,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1899,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1906,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1913,
            "description": "属性页属性和值的最小列宽",
            "itemtype": "property",
            "name": "minGap",
            "type": "Number",
            "class": "twaver.controls.PropertySheetTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1930,
            "description": "清除临时状态，并设置分割线位置",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneInteraction.clear",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1937,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.SplitPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1944,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1951,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneInteraction.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1958,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneInteraction.handleMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1975,
            "description": "清除临时状态，并设置分割线位置",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneTouchInteraction.clear",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1982,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.SplitPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1989,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 1996,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2003,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.SplitPaneTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.SplitPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2020,
            "description": "根据当前操作，更改鼠标样式",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.changeCursor",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2027,
            "description": "清除临时状态，而且如果当前操作是移动列，则执行移动列动作",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.clear",
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2033,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2040,
            "description": "获取当前鼠标下的列",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.getColumnAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的列",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2048,
            "description": "获取当前鼠标下的列信息",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.getColumnInfoAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的列信息",
                "type": "Object"
            },
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2056,
            "description": "获取当前鼠标下可移动列的HTML元素",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.getMovableDivAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下可移动列的HTML元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2064,
            "description": "获取当前鼠标相对于表头的x坐标值",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.getX",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标相对于表头的x坐标值",
                "type": "Number"
            },
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2072,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2079,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2086,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderInteraction.handleMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2103,
            "description": "清除零时状态，而且如果当前操作是移动列，则执行移动列动作",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.clear",
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2109,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2116,
            "description": "获取当前触摸点下的列",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.getColumnAt",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点下的列",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2124,
            "description": "获取当前触摸点下的列信息",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.getColumnInfoAt",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点下的列信息",
                "type": "Object"
            },
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2132,
            "description": "获取当前触摸点下可移动列的HTML元素",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.getMovableDivAt",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点下可移动列的HTML元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2140,
            "description": "获取当前触摸点相对于表头的x坐标值",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.getX",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点相对于表头的x坐标值",
                "type": "Number"
            },
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2148,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2155,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2162,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.TableHeaderTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.TableHeaderTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2179,
            "description": "根据当前操作，更改鼠标样式",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.changeCursor",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2186,
            "description": "清除临时状态，而且如果当前操作是移动选项卡，则执行移动选项卡动作",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.clear",
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2192,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2199,
            "description": "获取当前鼠标下可移动选项卡的HTML元素",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.getMovableDivAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下可移动选项卡的HTML元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2207,
            "description": "获取当前鼠标下的选项卡",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.getTabAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的选项卡",
                "type": "twaver.Tab"
            },
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2215,
            "description": "获取当前鼠标下的选项卡信息",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.getTabInfoAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的选项卡信息",
                "type": "Object"
            },
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2223,
            "description": "获取当前鼠标相对于选项卡的x坐标值",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.getX",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标相对于选项卡的x坐标值",
                "type": "Number"
            },
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2231,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2238,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2245,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneInteraction.handleMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TabPaneInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2262,
            "description": "清除临时状态，而且如果当前操作是移动选项卡，则执行移动选项卡动作",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.clear",
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2268,
            "description": "获取此类字符串类名",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.getClassName",
            "return": {
                "description": "返回此类字符串类名",
                "type": "String"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2275,
            "description": "获取当前触摸点下可移动选项卡的HTML元素",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.getMovableDivAt",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点下可移动选项卡的HTML元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2283,
            "description": "获取当前触摸点下的选项卡",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.getTabAt",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点下的选项卡",
                "type": "twaver.Tab"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2291,
            "description": "获取当前触摸点下的选项卡信息",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.getTabInfoAt",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点下的选项卡信息",
                "type": "Object"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2299,
            "description": "获取当前触摸点相对于选项卡面板的x坐标值",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.getX",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "return": {
                "description": "返回当前触摸点相对于选项卡面板的x坐标值",
                "type": "Number"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2307,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2314,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2321,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.TabPaneTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2329,
            "itemtype": "property",
            "name": "constructor",
            "type": "Object",
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2336,
            "description": "可折叠面板的底部边框颜色, 默认值为lightgray",
            "itemtype": "property",
            "name": "ACCORDION_BORDER_BOTTOM_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2344,
            "description": "可折叠面板收缩后的图标, 默认为collapse_icon",
            "itemtype": "property",
            "name": "ACCORDION_COLLAPSE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2352,
            "description": "可折叠面板展开后的图标, 默认值为expand_icon",
            "itemtype": "property",
            "name": "ACCORDION_EXPAND_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2360,
            "description": "可折叠面板图标位置，默认为'left'，可选值为'left', 'right'",
            "itemtype": "property",
            "name": "ACCORDION_ICON_POSITION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2368,
            "description": "可折叠面板标题背景颜色, 默认值为#EBEBEB",
            "itemtype": "property",
            "name": "ACCORDION_TITLE_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2376,
            "description": "可折叠面板的标题高度, 默认值为20",
            "itemtype": "property",
            "name": "ACCORDION_TITLE_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2384,
            "description": "附件画连线时, 线条两端的样式, 默认值为butt",
            "itemtype": "property",
            "name": "ATTACHMENT_CAP",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2392,
            "description": "附件内容高度, 默认值为20",
            "itemtype": "property",
            "name": "ATTACHMENT_CONTENT_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2400,
            "description": "附件内容宽度, 默认值为30",
            "itemtype": "property",
            "name": "ATTACHMENT_CONTENT_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2408,
            "description": "附件圆角半径, 默认值为5",
            "itemtype": "property",
            "name": "ATTACHMENT_CORNER_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2416,
            "description": "附件显示的方向, 默认值为right",
            "itemtype": "property",
            "name": "ATTACHMENT_DIRECTION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2424,
            "description": "附件是否填充, 默认值为false",
            "itemtype": "property",
            "name": "ATTACHMENT_FILL",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2432,
            "description": "附件填充颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "ATTACHMENT_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2440,
            "description": "附件渐变色填充样式, 默认值为null, 表示不用渐变色填充",
            "itemtype": "property",
            "name": "ATTACHMENT_GRADIENT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2448,
            "description": "附件渐变填充颜色, 默认值为#FFFFFF",
            "itemtype": "property",
            "name": "ATTACHMENT_GRADIENT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2456,
            "description": "附件画线时，线条连接点样式, 默认值为miter",
            "itemtype": "property",
            "name": "ATTACHMENT_JOIN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2464,
            "description": "附件边框颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "ATTACHMENT_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2472,
            "description": "附件边框宽度, 默认值为-1",
            "itemtype": "property",
            "name": "ATTACHMENT_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2480,
            "description": "附件内容和边界之间的间距, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_PADDING",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2488,
            "description": "附件内容和下边界之间的间距, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_PADDING_BOTTOM",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2496,
            "description": "附件内容和左边界之间的间距, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_PADDING_LEFT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2504,
            "description": "附件内容和右边界之间的间距, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_PADDING_RIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2512,
            "description": "附件内容和上边界之间的间距, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_PADDING_TOP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2520,
            "description": "附件箭头长度, 默认值为10",
            "itemtype": "property",
            "name": "ATTACHMENT_POINTER_LENGTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2528,
            "description": "附件箭头宽度, 默认值为8",
            "itemtype": "property",
            "name": "ATTACHMENT_POINTER_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2536,
            "description": "附件相对于网元位置, 默认值为topright.topright",
            "itemtype": "property",
            "name": "ATTACHMENT_POSITION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2544,
            "description": "附件选中时是否有阴影效果, 默认值为true",
            "itemtype": "property",
            "name": "ATTACHMENT_SHADOWABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2552,
            "description": "附件x轴偏移量, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_XOFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2560,
            "description": "附件y轴偏移量, 默认值为0",
            "itemtype": "property",
            "name": "ATTACHMENT_YOFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2568,
            "description": "柱状图y轴最小值, 默认值为0",
            "itemtype": "property",
            "name": "BARCHART_LOWER_LIMIT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2576,
            "description": "柱状图类型, 默认值为default",
            "itemtype": "property",
            "name": "BARCHART_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2584,
            "description": "柱状图y轴最大值, 默认值为null, 表示未设置",
            "itemtype": "property",
            "name": "BARCHART_UPPER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2592,
            "description": "柱状图x轴线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BARCHART_XAXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2600,
            "description": "柱状图x轴线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "BARCHART_XAXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2608,
            "description": "柱状图x轴文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BARCHART_XAXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2616,
            "description": "柱状图x轴文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BARCHART_XAXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2624,
            "description": "柱状图x轴刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BARCHART_XSCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2632,
            "description": "柱状图x轴刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BARCHART_XSCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2640,
            "description": "柱状图x轴刻度文字方向, 默认值为horizontal",
            "itemtype": "property",
            "name": "BARCHART_XSCALE_TEXT_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2648,
            "description": "柱状图y轴线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BARCHART_YAXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2656,
            "description": "柱状图y轴线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "BARCHART_YAXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2664,
            "description": "柱状图y轴文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BARCHART_YAXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2672,
            "description": "柱状图y轴文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BARCHART_YAXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2680,
            "description": "柱状图y轴刻度线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2688,
            "description": "柱状图y轴刻度线条宽度, 默认值为0.3",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2696,
            "description": "柱状图y轴最小刻度文字是否可见, 默认值为false",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_MIN_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2704,
            "description": "柱状图y轴刻度线间隔(按像素), 默认值为20",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_PIXEL_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2712,
            "description": "柱状图y轴刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2720,
            "description": "柱状图y轴刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2728,
            "description": "柱状图y轴刻度文字是否可见, 默认值为true",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2736,
            "description": "柱状图y轴刻度线间隔(按值), 默认值为0",
            "itemtype": "property",
            "name": "BARCHART_YSCALE_VALUE_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2744,
            "description": "布局面板水平间距, 默认值为0",
            "itemtype": "property",
            "name": "BORDERPANE_HGAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2752,
            "description": "布局面板垂直间距, 默认值为0",
            "itemtype": "property",
            "name": "BORDERPANE_VGAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2760,
            "description": "气泡图y轴最小值, 默认值为null, 表示没有最小值",
            "itemtype": "property",
            "name": "BUBBLECHART_LOWER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2768,
            "description": "气泡图选中阴影颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BUBBLECHART_SELECT_SHADOW_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2776,
            "description": "气泡图选中阴影偏移量, 默认值为3",
            "itemtype": "property",
            "name": "BUBBLECHART_SELECT_SHADOW_OFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2784,
            "description": "气泡图y轴最大值, 默认值为null, 表示没有最大值",
            "itemtype": "property",
            "name": "BUBBLECHART_UPPER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2792,
            "description": "气泡图x轴线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BUBBLECHART_XAXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2800,
            "description": "气泡图x轴线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "BUBBLECHART_XAXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2808,
            "description": "气泡图x轴最小值, 默认值为null, 表示无最小值",
            "itemtype": "property",
            "name": "BUBBLECHART_XAXIS_LOWER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2816,
            "description": "气泡图x轴文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BUBBLECHART_XAXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2824,
            "description": "气泡图x轴文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BUBBLECHART_XAXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2832,
            "description": "气泡图x轴最大值, 默认值为null, 表示无最大值",
            "itemtype": "property",
            "name": "BUBBLECHART_XAXIS_UPPER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2840,
            "description": "气泡图x轴刻度线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BUBBLECHART_XSCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2848,
            "description": "气泡图x轴刻度线条宽度, 默认值为0.3",
            "itemtype": "property",
            "name": "BUBBLECHART_XSCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2856,
            "description": "气泡图x轴刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BUBBLECHART_XSCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2864,
            "description": "气泡图x轴刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BUBBLECHART_XSCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2872,
            "description": "气泡图x轴刻度文字方向, 默认值为horizontal",
            "itemtype": "property",
            "name": "BUBBLECHART_XSCALE_TEXT_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2880,
            "description": "气泡图y轴线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BUBBLECHART_YAXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2888,
            "description": "气泡图y轴线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "BUBBLECHART_YAXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2896,
            "description": "气泡图y轴文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BUBBLECHART_YAXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2904,
            "description": "气泡图y轴文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BUBBLECHART_YAXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2912,
            "description": "气泡图y轴刻度线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2920,
            "description": "气泡图y轴刻度线条宽度, 默认值为0.3",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2928,
            "description": "气泡图y轴刻度最小值是否可见, 默认值为false",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_MIN_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2936,
            "description": "气泡图y轴刻度间距(按像素), 默认值为20",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_PIXEL_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2944,
            "description": "气泡图y轴刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2952,
            "description": "气泡图y轴刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2960,
            "description": "气泡图y轴刻度文字是否可见, 默认值为true",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2968,
            "description": "气泡图y轴刻度间距(按值), 默认值为0",
            "itemtype": "property",
            "name": "BUBBLECHART_YSCALE_VALUE_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2976,
            "description": "调用延迟时的延迟时间(单位ms), 默认值为17",
            "itemtype": "property",
            "name": "CALL_LATER_DELAY",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 2984,
            "description": "网元UI对象生成器, 用于twaver.canvas.Network",
            "itemtype": "method",
            "name": "twaver.Defaults.CANVASUI_FUNCTION",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.canvas.Network"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元对应的UI对象",
                "type": "twaver.canvas.ElementUI"
            },
            "example": [
                " 默认实现为:\nfunction (network, element) {\n    var clazz = element.getCanvasUIClass();\n    if (clazz) {\n        return new clazz(network, element);\n    }\n    return null;\n}"
            ],
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3002,
            "description": "图表的背景是否填充, 默认值为true",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_FILL",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3010,
            "description": "图表的背景填充色, 默认值为rgba(50,50,50,0.11)",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3018,
            "description": "图表背景渐进色样式, 默认值为linear.north",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_GRADIENT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3026,
            "description": "图表背景渐进色, 默认值为#FFFFFF",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_GRADIENT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3034,
            "description": "图表背景边框颜色, 默认值为rgba(50,50,50,0.11)",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3042,
            "description": "图表背景边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3050,
            "description": "图表背景是否可见, 默认值为false",
            "itemtype": "property",
            "name": "CHART_BACKGROUND_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3058,
            "description": "双击图表是否还原至原始比例, 默认值为true",
            "itemtype": "property",
            "name": "CHART_DOUBLE_CLICK_TO_RESET",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3066,
            "description": "图表选中误差, 当点击鼠标位置和图表的距离在指定范围内时, 认为图表被选中了, 默认值为0",
            "itemtype": "property",
            "name": "CHART_SELECT_TOLERANCE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3074,
            "description": "图表是否启用提示信息, 默认值为true",
            "itemtype": "property",
            "name": "CHART_TOOLTIP_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3082,
            "description": "图表值字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "CHART_VALUE_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3090,
            "description": "图表值是否可见, 默认值为true",
            "itemtype": "property",
            "name": "CHART_VALUE_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3098,
            "description": "图表水平边距, 默认值为6",
            "itemtype": "property",
            "name": "CHART_XGAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3106,
            "description": "图表x轴方向是否可移动, 默认值为true",
            "itemtype": "property",
            "name": "CHART_XTRANSLATE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3114,
            "description": "图表x轴方向是否可缩放, 默认值为true",
            "itemtype": "property",
            "name": "CHART_XZOOM_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3122,
            "description": "图表垂直边距, 默认值为6",
            "itemtype": "property",
            "name": "CHART_YGAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3130,
            "description": "图表y轴方向是否可移动, 默认值为true",
            "itemtype": "property",
            "name": "CHART_YTRANSLATE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3138,
            "description": "图表y轴方向是否可缩放, 默认值为true",
            "itemtype": "property",
            "name": "CHART_YZOOM_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3146,
            "description": "图表面板图例位置, 默认值为bottom",
            "itemtype": "property",
            "name": "CHARTPANE_LEGEND_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3154,
            "description": "图表面板图例宽度, 默认值为80",
            "itemtype": "property",
            "name": "CHARTPANE_LEGEND_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3162,
            "description": "图表面板标题栏高度, 默认值为20",
            "itemtype": "property",
            "name": "CHARTPANE_TITLE_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3170,
            "description": "图表面板标题栏水平对齐方式, 默认值为center",
            "itemtype": "property",
            "name": "CHARTPANE_TITLE_HORIZONTAL_ALIGN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3178,
            "description": "可选颜色数组",
            "itemtype": "property",
            "name": "COLORS",
            "type": "Array",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3186,
            "description": "表格列是否可编辑, 默认值为false",
            "itemtype": "property",
            "name": "COLUMN_EDITABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3194,
            "description": "表格列水平对齐方式, 默认值为null",
            "itemtype": "property",
            "name": "COLUMN_HORIZONTAL_ALIGN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3202,
            "description": "表格列内容是否为纯文本，默认为true",
            "itemtype": "property",
            "name": "COLUMN_INNER_TEXT",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3210,
            "description": "表格列是否可移动, 默认值为true",
            "itemtype": "property",
            "name": "COLUMN_MOVABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3218,
            "description": "表格列属性类型, 默认值为accessor",
            "itemtype": "property",
            "name": "COLUMN_PROPERTY_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3226,
            "description": "表格列渲染器, 默认值为null",
            "itemtype": "property",
            "name": "COLUMN_RENDER_CELL",
            "type": "Function",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3234,
            "description": "表格列头渲染器, 默认值为null",
            "itemtype": "property",
            "name": "COLUMN_RENDER_HEADER",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3242,
            "description": "表格列是否可改变大小, 默认值为true",
            "itemtype": "property",
            "name": "COLUMN_RESIZABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3250,
            "description": "表格列是否可排序, 默认值为true",
            "itemtype": "property",
            "name": "COLUMN_SORTABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3258,
            "description": "表格列值类型, 默认值为string",
            "itemtype": "property",
            "name": "COLUMN_VALUE_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3266,
            "description": "表格列是否可见, 默认值为true",
            "itemtype": "property",
            "name": "COLUMN_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3274,
            "description": "表格列宽度, 默认值为80",
            "itemtype": "property",
            "name": "COLUMN_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3282,
            "description": "仪表盘外圈填充颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "DIALCHART_COLOR_RANGE_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3290,
            "description": "仪表盘结束角度, 默认值为360",
            "itemtype": "property",
            "name": "DIALCHART_END_ANGLE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3298,
            "description": "仪表盘内圈偏暗半径, 默认值为10",
            "itemtype": "property",
            "name": "DIALCHART_INNER_DARKER_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3306,
            "description": "仪表盘内圈所占比例, 默认值为0.8",
            "itemtype": "property",
            "name": "DIALCHART_INNER_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3314,
            "description": "仪表盘最小值, 默认值为0",
            "itemtype": "property",
            "name": "DIALCHART_LOWER_LIMIT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3322,
            "description": "仪表盘大刻度数量, 默认值为11",
            "itemtype": "property",
            "name": "DIALCHART_MAJOR_SCALE_COUNT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3330,
            "description": "仪表盘大刻度颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "DIALCHART_MAJOR_SCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3338,
            "description": "仪表盘大刻度长度, 默认值为8",
            "itemtype": "property",
            "name": "DIALCHART_MAJOR_SCALE_LINE_LENGTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3346,
            "description": "仪表盘大刻度宽度, 默认值为2",
            "itemtype": "property",
            "name": "DIALCHART_MAJOR_SCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3354,
            "description": "仪表盘小刻度数量, 默认值为4",
            "itemtype": "property",
            "name": "DIALCHART_MINOR_SCALE_COUNT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3362,
            "description": "仪表盘小刻度颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "DIALCHART_MINOR_SCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3370,
            "description": "仪表盘小刻度长度, 默认值为4",
            "itemtype": "property",
            "name": "DIALCHART_MINOR_SCALE_LINE_LENGTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3378,
            "description": "仪表盘小刻度宽度, 默认值为1",
            "itemtype": "property",
            "name": "DIALCHART_MINOR_SCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3386,
            "description": "仪表盘外圈偏亮半径, 默认值为10",
            "itemtype": "property",
            "name": "DIALCHART_OUTER_BRIGHTER_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3394,
            "description": "仪表盘边框颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "DIALCHART_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3402,
            "description": "仪表盘边框宽度, 默认值为0",
            "itemtype": "property",
            "name": "DIALCHART_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3410,
            "description": "仪表盘轴是否填充, 默认值为true",
            "itemtype": "property",
            "name": "DIALCHART_PIVOT_FILL",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3418,
            "description": "仪表盘轴填充颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "DIALCHART_PIVOT_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3426,
            "description": "仪表盘轴边框颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "DIALCHART_PIVOT_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3434,
            "description": "仪表盘轴边框宽度, 默认值为0",
            "itemtype": "property",
            "name": "DIALCHART_PIVOT_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3442,
            "description": "仪表盘轴半径, 默认值为10",
            "itemtype": "property",
            "name": "DIALCHART_PIVOT_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3450,
            "description": "仪表盘刻度是否在内部, 默认值为true",
            "itemtype": "property",
            "name": "DIALCHART_SCALE_INSIDE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3458,
            "description": "仪表盘最小刻度值是否可见, 默认值为true",
            "itemtype": "property",
            "name": "DIALCHART_SCALE_LOWER_LIMIT_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3466,
            "description": "仪表盘刻度字体颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "DIALCHART_SCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3474,
            "description": "仪表盘刻度字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "DIALCHART_SCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3482,
            "description": "仪表盘刻度文字是否可见, 默认值为true",
            "itemtype": "property",
            "name": "DIALCHART_SCALE_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3490,
            "description": "仪表盘最小刻度值是否可见, 默认值为true",
            "itemtype": "property",
            "name": "DIALCHART_SCALE_UPPER_LIMIT_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3498,
            "description": "仪表盘选中时阴影颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "DIALCHART_SELECT_SHADOW_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3506,
            "description": "仪表盘选中时阴影偏移量, 默认值为3",
            "itemtype": "property",
            "name": "DIALCHART_SELECT_SHADOW_OFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3514,
            "description": "仪表盘起始角度, 默认值为0",
            "itemtype": "property",
            "name": "DIALCHART_START_ANGLE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3522,
            "description": "仪表盘最大值, 默认值为100",
            "itemtype": "property",
            "name": "DIALCHART_UPPER_LIMIT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3530,
            "description": "仪表盘值位置, 默认值为0.5",
            "itemtype": "property",
            "name": "DIALCHART_VALUE_POSITION",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3538,
            "description": "网元UI对象生成器",
            "itemtype": "method",
            "name": "twaver.Defaults.ELEMENTUI_FUNCTION",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑",
                    "type": "twaver.network.Network"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元对应的UI对象",
                "type": "twaver.network.ElementUI"
            },
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3548,
            "description": "点击视图时, 是否让视图获得焦点, 默认值为true",
            "itemtype": "property",
            "name": "FOCUS_ON_CLICK",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3556,
            "description": "默认字体样式(12px arial, tahoma, sans-serif, helvetica)",
            "itemtype": "property",
            "name": "FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3564,
            "description": "总线网元图标, 默认值为bus_icon",
            "itemtype": "property",
            "name": "ICON_BUS",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3572,
            "description": "数据的图标, 默认值为data_icon",
            "itemtype": "property",
            "name": "ICON_DATA",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3580,
            "description": "数据容器的图标,默认值为databox_icon",
            "itemtype": "property",
            "name": "ICON_DATABOX",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3588,
            "description": "网格图标, 默认值为grid_icon",
            "itemtype": "property",
            "name": "ICON_GRID",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3596,
            "description": "组图标, 默认值为group_icon",
            "itemtype": "property",
            "name": "ICON_GROUP",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3604,
            "description": "连线图标, 默认值为link_icon",
            "itemtype": "property",
            "name": "ICON_LINK",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3612,
            "description": "子网连线图标, 默认值为linksubnetwork_icon",
            "itemtype": "property",
            "name": "ICON_LINKSUBNETWORK",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3620,
            "description": "节点图标, 默认值为node_icon",
            "itemtype": "property",
            "name": "ICON_NODE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3628,
            "description": "折线图标, 默认值为shapelink_icon",
            "itemtype": "property",
            "name": "ICON_SHAPELINK",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3636,
            "description": "多边形节点图标, 默认值为shapenode_icon",
            "itemtype": "property",
            "name": "ICON_SHAPENODE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3644,
            "description": "多边形子网图标, 默认值为shapesubnetwork_icon",
            "itemtype": "property",
            "name": "ICON_SHAPESUBNETWORK",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3652,
            "description": "子网图标, 默认值为network_icon",
            "itemtype": "property",
            "name": "ICON_SUBNETWORK",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3660,
            "description": "组图片, 默认值为group_image",
            "itemtype": "property",
            "name": "IMAGE_GROUP",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3668,
            "description": "节点图片, 默认值为node_image",
            "itemtype": "property",
            "name": "IMAGE_NODE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3676,
            "description": "子网图片, 默认值为subnetwork_image",
            "itemtype": "property",
            "name": "IMAGE_SUBNETWORK",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3684,
            "description": "连线是否调整到节点下面，默认为false",
            "itemtype": "property",
            "name": "IS_LINK_ADJUSTED_TO_BOTTOM",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3692,
            "description": "是否不调用e.preventDefault方法",
            "itemtype": "method",
            "name": "twaver.Defaults.KEEP_DEFAULT_FUNCTION",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标或键盘事件",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "返回是否不调用e.preventDefault方法",
                "type": "Boolean"
            },
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3701,
            "description": "默认层ID(default)",
            "itemtype": "property",
            "name": "LAYER_DEFAULT_ID",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3709,
            "description": "默认层名称(default)",
            "itemtype": "property",
            "name": "LAYER_DEFAULT_NAME",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3717,
            "description": "图表图例隐藏颜色, 默认值为#BABBBC",
            "itemtype": "property",
            "name": "LEGENDPANE_HIDDEN_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3725,
            "description": "图表图例图标高度, 默认值为10",
            "itemtype": "property",
            "name": "LEGENDPANE_ICON_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3733,
            "description": "图表图例图标圆角半径, 默认值为0",
            "itemtype": "property",
            "name": "LEGENDPANE_ICON_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3741,
            "description": "图表图例图标宽度, 默认值为10",
            "itemtype": "property",
            "name": "LEGENDPANE_ICON_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3749,
            "description": "图表图例方向, 默认值为horizontal",
            "itemtype": "property",
            "name": "LEGENDPANE_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3757,
            "description": "图表图例行高, 默认值为20",
            "itemtype": "property",
            "name": "LEGENDPANE_ROW_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3765,
            "description": "图表图例选中背景色, 默认值为#00007D",
            "itemtype": "property",
            "name": "LEGENDPANE_SELECT_BACKGROUND_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3773,
            "description": "图表图例选中前景色, 默认值为#FFFFFF",
            "itemtype": "property",
            "name": "LEGENDPANE_SELECT_FOREGROUND_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3781,
            "description": "曲线图上值为空时, 是否不画线, 默认值为true",
            "itemtype": "property",
            "name": "LINECHART_INTERRUPTABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3789,
            "description": "曲线图y轴最小值, 默认值为null, 表示没有最小值",
            "itemtype": "property",
            "name": "LINECHART_LOWER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3797,
            "description": "曲线图y轴最大值, 默认值为null, 表示没有最大值",
            "itemtype": "property",
            "name": "LINECHART_UPPER_LIMIT",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3805,
            "description": "曲线图x轴线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "LINECHART_XAXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3813,
            "description": "曲线图x轴线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "LINECHART_XAXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3821,
            "description": "曲线图x轴文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "LINECHART_XAXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3829,
            "description": "曲线图x轴文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "LINECHART_XAXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3837,
            "description": "曲线图x轴刻度线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "LINECHART_XSCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3845,
            "description": "曲线图x轴刻度线条宽度, 默认值为0.3",
            "itemtype": "property",
            "name": "LINECHART_XSCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3853,
            "description": "曲线图x轴刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "LINECHART_XSCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3861,
            "description": "曲线图x轴刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "LINECHART_XSCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3869,
            "description": "曲线图x轴刻度文字方向, 默认值为horizontal",
            "itemtype": "property",
            "name": "LINECHART_XSCALE_TEXT_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3877,
            "description": "曲线图y轴线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "LINECHART_YAXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3885,
            "description": "曲线图y轴线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "LINECHART_YAXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3893,
            "description": "曲线图y轴文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "LINECHART_YAXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3901,
            "description": "曲线图y轴文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "LINECHART_YAXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3909,
            "description": "曲线图y轴刻度线条颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3917,
            "description": "曲线图y轴刻度线条宽度, 默认值为0.3",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3925,
            "description": "曲线图y轴刻度最小值是否可见, 默认值为false",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_MIN_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3933,
            "description": "曲线图y轴刻度间距(按像素), 默认值为20",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_PIXEL_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3941,
            "description": "曲线图y轴刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3949,
            "description": "曲线图y轴刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3957,
            "description": "曲线图y轴刻度文字是否可见, 默认值为true",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3965,
            "description": "曲线图y轴刻度间距(按值), 默认值为0",
            "itemtype": "property",
            "name": "LINECHART_YSCALE_VALUE_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3973,
            "description": "获取连线捆绑时, 作为代理的连线的回调函数, 默认值为null",
            "itemtype": "property",
            "name": "LINK_BUNDLE_AGENT_FUNCTION",
            "type": "Function",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3981,
            "description": "列表缩进量, 默认值为2",
            "itemtype": "property",
            "name": "LIST_INDENT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3989,
            "description": "列表上键盘DELETE键是否可以删除行，默认值为true",
            "itemtype": "property",
            "name": "LIST_KEYBOARD_REMOVE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 3997,
            "description": "列表上键盘CTRL+A键是否可以选中所有行，默认值为true",
            "itemtype": "property",
            "name": "LIST_KEYBOARD_SELECT_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4005,
            "description": "列表上数据被选中时, 列表是否自动滚动到被选中数据可见的区域, 默认值为true",
            "itemtype": "property",
            "name": "LIST_MAKE_VISIBLE_ON_SELECTED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4013,
            "description": "列表行号, 默认值为19",
            "itemtype": "property",
            "name": "LIST_ROW_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4021,
            "description": "列表行线条颜色, 默认值为#DDD",
            "itemtype": "property",
            "name": "LIST_ROW_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4029,
            "description": "列表行线条宽度, 默认值为0",
            "itemtype": "property",
            "name": "LIST_ROW_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4037,
            "description": "列表内容是否为纯文本，默认为true",
            "itemtype": "property",
            "name": "LISTBASE_INNER_TEXT",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4045,
            "description": "拓扑上双击空子网是否进入空子网, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_DOUBLECLICK_TO_EMPTYSUBNETWORK",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4053,
            "description": "拓扑上双击组是否展开或合并组, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_DOUBLECLICK_TO_GROUPEXPAND",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4061,
            "description": "拓扑上双击连线是否合并或展开连线分组, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_DOUBLECLICK_TO_LINKBUNDLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4069,
            "description": "拓扑上双击子网是否进入子网, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_DOUBLECLICK_TO_SUBNETWORK",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4077,
            "description": "拓扑上双击背景是否返回上一级子网, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_DOUBLECLICK_TO_UPSUBNETWORK",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4085,
            "description": "拓扑上创建Link时, 鼠标移动到起始或结束节点上时, 节点周围的边框颜色, 默认值为rgba(184,211,240,0.7)",
            "itemtype": "property",
            "name": "NETWORK_EDIT_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4093,
            "description": "拓扑上创建Link时, 鼠标移动到起始或结束节点上时, 节点周围的边框宽度, 默认值为2",
            "itemtype": "property",
            "name": "NETWORK_EDIT_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4101,
            "description": "拓扑上更改ShapeLink或ShapeNode时, 控制点的填充颜色, 默认值为#FFFF00",
            "itemtype": "property",
            "name": "NETWORK_EDIT_POINT_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4109,
            "description": "拓扑上更改ShapeLink或ShapeNode时, 控制点的边框颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "NETWORK_EDIT_POINT_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4117,
            "description": "拓扑上更改ShapeLink或ShapeNode时, 控制点的边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "NETWORK_EDIT_POINT_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4125,
            "description": "拓扑上更改ShapeLink或ShapeNode时, 控制点的大小, 默认值为3",
            "itemtype": "property",
            "name": "NETWORK_EDIT_POINT_SIZE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4133,
            "description": "拓扑上是否能用键盘Delete键删除选中网元, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_KEYBOARD_REMOVE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4141,
            "description": "拓扑上是否能用键盘CTRL+A键选中全部网元, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_KEYBOARD_SELECT_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4149,
            "description": "拓扑上延迟移动网元时, 是否有动画效果",
            "itemtype": "property",
            "name": "NETWORK_LAZYMOVE_ANIMATE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4157,
            "description": "拓扑上延迟移动网元时, 是否填充被移动网元的标示框, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_LAZYMOVE_FILL",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4165,
            "description": "拓扑上延迟移动网元时, 被移动网元的标示框的填充色, 默认值为rgba(184,211,240,0.4)",
            "itemtype": "property",
            "name": "NETWORK_LAZYMOVE_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4173,
            "description": "拓扑上延迟移动网元时, 被移动网元的标示框的边框颜色, 默认值为#2877A8",
            "itemtype": "property",
            "name": "NETWORK_LAZYMOVE_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4181,
            "description": "拓扑上延迟移动网元时, 被移动网元的标示框的边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "NETWORK_LAZYMOVE_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4189,
            "description": "是否限制拓扑原始位置不能为负坐标，默认为true",
            "itemtype": "property",
            "name": "NETWORK_LIMIT_ELEMENT_INPOSITIVE_LOCATION",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4197,
            "description": "LINK的流动颜色",
            "itemtype": "property",
            "name": "NETWORK_LINK_FLOW_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4205,
            "description": "LINK的流动间隔时间",
            "itemtype": "property",
            "name": "NETWORK_LINK_FLOW_INTERVAL",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4213,
            "description": "LINK的流动步进",
            "itemtype": "property",
            "name": "NETWORK_LINK_FLOW_STEPPING",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4221,
            "description": "拓扑上网元被选中时, 拓扑是否滚动到网元可见区域, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_MAKE_VISIBLE_ON_SELECTED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4229,
            "description": "拓扑图上非代理的连线是否可见, 默认值为false",
            "itemtype": "property",
            "name": "NETWORK_NO_AGENT_LINK_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4237,
            "description": "拓扑图上是否启用框选，默认为true",
            "itemtype": "property",
            "name": "NETWORK_RECT_SELECT_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4245,
            "description": "拓扑上网元不可见时, 是否删除对应的视图组件, 默认值为false",
            "itemtype": "property",
            "name": "NETWORK_REMOVE_ELEMENTUI_ON_INVISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4253,
            "description": "拓扑上延迟更改网元大小时, 是否有动画效果, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_ANIMATE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4261,
            "description": "拓扑上延迟更改网元大小时网元边框颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4269,
            "description": "拓扑上延迟更改网元大小时网元边框的宽度, 默认值为1",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4277,
            "description": "拓扑上更改网元大小时, 控制点的填充色, 默认值为#FFFFFF",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_POINT_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4285,
            "description": "拓扑上更改网元大小时, 控制点的边框颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_POINT_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4293,
            "description": "拓扑上更改网元大小时, 控制点的边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_POINT_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4301,
            "description": "更改网元大小的控制点的大小，默认为3",
            "itemtype": "property",
            "name": "NETWORK_RESIZE_POINT_SIZE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4309,
            "description": "旋转控制点的填充色，默认为#FFFF00",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_POINT_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4317,
            "description": "旋转控制点的偏移量，默认为15",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_POINT_OFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4325,
            "description": "旋转控制点的边框颜色，默认为rgba(0,0,0,1)",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_POINT_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4333,
            "description": "旋转控制点的边框宽度，默认为1",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_POINT_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4341,
            "description": "旋转控制点的大小，默认为5",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_POINT_SIZE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4349,
            "description": "旋转刻度填充色，默认为rgb(227,166,103)",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_SCALE_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4357,
            "description": "旋转刻度文字字体颜色，默认为#FFFFFF",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_SCALE_FONT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4365,
            "description": "旋转刻度高度，默认为20",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_SCALE_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4373,
            "description": "旋转刻度宽度，默认为30",
            "itemtype": "property",
            "name": "NETWORK_ROTATE_SCALE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4381,
            "description": "拓扑上框选网元时, 框选框的填充色, 默认值为rgba(184,211,240,0.4)",
            "itemtype": "property",
            "name": "NETWORK_SELECT_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4389,
            "description": "拓扑选中模式, 默认值为mix",
            "itemtype": "property",
            "name": "NETWORK_SELECT_MODE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4397,
            "description": "拓扑上框选网元时, 框选框的边框颜色, 默认值为@2877A8",
            "itemtype": "property",
            "name": "NETWORK_SELECT_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4405,
            "description": "拓扑上框选网元时, 框选框的边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "NETWORK_SELECT_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4413,
            "description": "容差选中像素数",
            "itemtype": "property",
            "name": "NETWORK_SELECTION_TOLERANCE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4421,
            "description": "拓扑上选中网元时, 是否将网元置顶, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_SENDTOTOP_ON_SELECTED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4429,
            "description": "拓扑上进入子网时是否有动画效果, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_SUBNETWORK_ANIMATE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4437,
            "description": "是否启用拓扑上网元的提示信息, 默认值为true",
            "itemtype": "property",
            "name": "NETWORK_TOOLTIP_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4445,
            "description": "默认网元高度(50)",
            "itemtype": "property",
            "name": "NODE_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4453,
            "description": "默认网元宽度(50)",
            "itemtype": "property",
            "name": "NODE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4461,
            "description": "鹰眼是否有动画效果, 默认值为true",
            "itemtype": "property",
            "name": "OVERVIEW_ANIMATE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4469,
            "description": "鹰眼背景填充色, 默认值为rgba(184,211,240,0.4)",
            "itemtype": "property",
            "name": "OVERVIEW_FILL_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4477,
            "description": "鹰眼最大高度, 默认值为-1",
            "itemtype": "property",
            "name": "OVERVIEW_MAX_PACKING_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4485,
            "description": "鹰眼最大宽度, 默认值为-1",
            "itemtype": "property",
            "name": "OVERVIEW_MAX_PACKING_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4493,
            "description": "鹰眼边框颜色, 默认值为#BBD3F0",
            "itemtype": "property",
            "name": "OVERVIEW_OUTLINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4501,
            "description": "鹰眼边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "OVERVIEW_OUTLINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4509,
            "description": "鹰眼边距, 默认值为1",
            "itemtype": "property",
            "name": "OVERVIEW_PADDING",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4517,
            "description": "在鹰眼上框选时, 选择框边框颜色, 默认值为#00000FF",
            "itemtype": "property",
            "name": "OVERVIEW_SELECT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4525,
            "description": "在鹰眼上框选时, 选择框边框宽度, 默认值为1",
            "itemtype": "property",
            "name": "OVERVIEW_SELECT_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4533,
            "description": "饼图内环所占比例, 默认值为0.5",
            "itemtype": "property",
            "name": "PIECHART_DONUT_RATE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4541,
            "description": "线形饼图高度占宽度的比例, 默认值为0.5",
            "itemtype": "property",
            "name": "PIECHART_LINE_RATE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4549,
            "description": "饼图选中后的偏移量, 默认值为5",
            "itemtype": "property",
            "name": "PIECHART_SELECT_OFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4557,
            "description": "饼图选中时阴影颜色, 默认值为#C2CFF1",
            "itemtype": "property",
            "name": "PIECHART_SHADOW_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4565,
            "description": "饼图选中时阴影偏移量, 默认值为1",
            "itemtype": "property",
            "name": "PIECHART_SHADOW_OFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4573,
            "description": "饼图起始角度, 默认值为0",
            "itemtype": "property",
            "name": "PIECHART_START_ANGLE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4581,
            "description": "饼图类型, 默认值为oval",
            "itemtype": "property",
            "name": "PIECHART_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4589,
            "description": "饼图值标签位置, 默认值为0.5",
            "itemtype": "property",
            "name": "PIECHART_VALUE_POSITION",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4597,
            "description": "右键菜单上勾选框在选中状态时的图标名称，默认为checkbox_selected_icon",
            "itemtype": "property",
            "name": "POPUPMENU_CHECKBOX_SELECTED_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4605,
            "description": "右键菜单勾选框在未选中状态时的图标名称，默认为checkbox_unselected_icon",
            "itemtype": "property",
            "name": "POPUPMENU_CHECKBOX_UNSELECTED_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4613,
            "description": "右键菜单单选框在选中状态时的图标名称，默认为radiobutton_selected_icon",
            "itemtype": "property",
            "name": "POPUPMENU_RADIOBUTTON_SELECTED_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4621,
            "description": "右键菜单单选框在未选中状态时的图标名称，默认为radiobutton_unselected_icon",
            "itemtype": "property",
            "name": "POPUPMENU_RADIOBUTTON_UNSELECTED_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4629,
            "description": "右键菜单子菜单项不可用时的图标名称，默认为submenu_disable_icon",
            "itemtype": "property",
            "name": "POPUPMENU_SUBNENU_DISABLE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4637,
            "description": "右键菜单子菜单项可用时的图标名称，默认为submenu_enable_icon",
            "itemtype": "property",
            "name": "POPUPMENU_SUBNENU_ENABLE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4645,
            "description": "默认属性页属性类别名, 默认值为null",
            "itemtype": "property",
            "name": "PROPERTY_CATEGORY_NAME",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4653,
            "description": "默认属性页属性是否可编辑(false)",
            "itemtype": "property",
            "name": "PROPERTY_EDITABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4661,
            "description": "默认属性页属性文字水平对齐方式(null)",
            "itemtype": "property",
            "name": "PROPERTY_HORIZONTAL_ALIGN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4669,
            "description": "属性页列内容是否为纯文本，默认为true",
            "itemtype": "property",
            "name": "PROPERTY_INNER_TEXT",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4677,
            "description": "默认属性页属性类型(accessor)",
            "itemtype": "property",
            "name": "PROPERTY_PROPERTY_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4685,
            "description": "属性页属性列渲染器, 默认值为null",
            "itemtype": "property",
            "name": "PROPERTY_RENDER_NAME",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4693,
            "description": "属性页属性值列渲染器, 默认值为null",
            "itemtype": "property",
            "name": "PROPERTY_RENDER_VALUE",
            "type": "Object",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4701,
            "description": "属性页属性值类型, 默认值为string",
            "itemtype": "property",
            "name": "PROPERTY_VALUE_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4709,
            "itemtype": "property",
            "name": "PROPERTYSHEET_AUTO_ADJUSTABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4717,
            "description": "属性页边框颜色, 默认值为#EBEBEB",
            "itemtype": "property",
            "name": "PROPERTYSHEET_BORDER_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4725,
            "description": "属性页是否允许分组, 默认值为true",
            "itemtype": "property",
            "name": "PROPERTYSHEET_CATEGORIZABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4733,
            "description": "属性页类别合并时的图标, 默认值为collapse_icon",
            "itemtype": "property",
            "name": "PROPERTYSHEET_COLLAPSE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4741,
            "description": "属性页列分隔线宽度, 默认值为1",
            "itemtype": "property",
            "name": "PROPERTYSHEET_COLUMN_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4749,
            "description": "属性页是否可编辑, 默认值为false",
            "itemtype": "property",
            "name": "PROPERTYSHEET_EDITABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4757,
            "description": "默认属性页是否展开分组(true)",
            "itemtype": "property",
            "name": "PROPERTYSHEET_EXPAND_CATEGORY",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4765,
            "description": "属性页类别展开时的图标, 默认值为expand_icon",
            "itemtype": "property",
            "name": "PROPERTYSHEET_EXPAND_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4773,
            "description": "属性页缩进量, 默认值为16",
            "itemtype": "property",
            "name": "PROPERTYSHEET_INDENT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4781,
            "description": "属性页属性名列文字水平对齐方式, 默认值为null",
            "itemtype": "property",
            "name": "PROPERTYSHEET_PROPERTY_NAME_HORIZONTAL_ALIGN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4789,
            "description": "属性页属性名列宽度, 默认值为100",
            "itemtype": "property",
            "name": "PROPERTYSHEET_PROPERTY_NAME_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4797,
            "description": "属性页更改属性名列和值列宽度时, 鼠标离分隔线的距离, 默认值为3",
            "itemtype": "property",
            "name": "PROPERTYSHEET_RESIZE_TOLERANCE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4805,
            "description": "属性页行高, 默认值为19",
            "itemtype": "property",
            "name": "PROPERTYSHEET_ROW_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4813,
            "description": "属性页行线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "PROPERTYSHEET_ROW_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4821,
            "description": "属性页总宽度, 默认值为200",
            "itemtype": "property",
            "name": "PROPERTYSHEET_SUM_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4829,
            "itemtype": "method",
            "name": "twaver.Defaults.getClassName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4835,
            "description": "雷达图锚点是否可见, 默认值为true",
            "itemtype": "property",
            "name": "RADARCHART_ANCHOR_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4843,
            "description": "雷达图是否填充背景色, 默认值为true",
            "itemtype": "property",
            "name": "RADARCHART_AREA_FILL",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4851,
            "description": "雷达图背景透明度, 默认值为0.2",
            "itemtype": "property",
            "name": "RADARCHART_AREA_FILL_ALPHA",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4859,
            "description": "雷达图选中元素填充透明图, 默认值为0.5",
            "itemtype": "property",
            "name": "RADARCHART_AREA_SELECT_FILL_ALPHA",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4867,
            "description": "雷达图轴线颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4875,
            "description": "雷达图轴线宽度, 默认值为3",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4883,
            "description": "雷达图起始角度, 默认值为0",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_START_ANGLE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4891,
            "description": "雷达图轴线文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4899,
            "description": "雷达图轴线文字字体样式, 默认值为12px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4907,
            "description": "雷达图轴线文字是否可见, 默认值为true",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4915,
            "description": "雷达图轴线是否可见, 默认值为true",
            "itemtype": "property",
            "name": "RADARCHART_AXIS_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4923,
            "description": "雷达图轴线之间的连线颜色, 默认值为#808080",
            "itemtype": "property",
            "name": "RADARCHART_RING_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4931,
            "description": "雷达图轴线之间的连线宽度, 默认值为1",
            "itemtype": "property",
            "name": "RADARCHART_RING_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4939,
            "description": "雷达图轴线之间的连线类型, 默认值为line",
            "itemtype": "property",
            "name": "RADARCHART_RING_TYPE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4947,
            "description": "雷达图轴线之间的连线是否可见, 默认值为true",
            "itemtype": "property",
            "name": "RADARCHART_RING_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4955,
            "description": "雷达图刻度个数, 默认值为5",
            "itemtype": "property",
            "name": "RADARCHART_SCALE_COUNT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4963,
            "description": "雷达图刻度最大值, 默认值为1",
            "itemtype": "property",
            "name": "RADARCHART_SCALE_MAXVALUE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4971,
            "description": "雷达图刻度最小值, 默认值为0",
            "itemtype": "property",
            "name": "RADARCHART_SCALE_MINVALUE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4979,
            "description": "雷达图刻度文字颜色, 默认值为#000000",
            "itemtype": "property",
            "name": "RADARCHART_SCALE_TEXT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4987,
            "description": "雷达图刻度文字字体样式, 默认值为10px arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "RADARCHART_SCALE_TEXT_FONT",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 4995,
            "description": "雷达图刻度文字是可见, 默认值为true",
            "itemtype": "property",
            "name": "RADARCHART_SCALE_TEXT_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5003,
            "description": "滚动条宽度, 默认值为17",
            "itemtype": "property",
            "name": "SCROLL_BAR_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5011,
            "description": "默认选中颜色(#C2CFF1)",
            "itemtype": "property",
            "name": "SELECT_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5019,
            "description": "告警是否显示在告警div中，默认为true",
            "itemtype": "property",
            "name": "SHOW_ALARM_IN_ATTACHMENT_DIV",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5027,
            "description": "默认的排序方法",
            "itemtype": "method",
            "name": "twaver.Defaults.SORT_FUNCTION",
            "params": [
                {
                    "name": "v1",
                    "description": "第一个值",
                    "type": "Object"
                },
                {
                    "name": "v2",
                    "description": "第二个值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回两个值的比较结果",
                "type": "Number"
            },
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5037,
            "description": "分割面板分隔栏背景色, 默认值为#CCCCFF",
            "itemtype": "property",
            "name": "SPLITPANE_DIVIDER_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5045,
            "description": "移动分割面板分隔栏时, 分隔栏的透明度, 默认值为0.5",
            "itemtype": "property",
            "name": "SPLITPANE_DIVIDER_OPACITY",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5053,
            "description": "分割面板分隔栏宽度, 默认值为6",
            "itemtype": "property",
            "name": "SPLITPANE_DIVIDER_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5061,
            "description": "移动分割面板分隔条时, 分隔栏背景色",
            "itemtype": "property",
            "name": "SPLITPANE_MASK_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5069,
            "description": "分割面板默认分割方式, 默认值为horizontal",
            "itemtype": "property",
            "name": "SPLITPANE_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5077,
            "description": "分割面板默认分割比例, 默认值为0.5",
            "itemtype": "property",
            "name": "SPLITPANE_POSITION",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5085,
            "description": "页签是否可关闭, 默认值为true",
            "itemtype": "property",
            "name": "TAB_CLOSABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5093,
            "description": "页签是否被禁用, 默认值为false",
            "itemtype": "property",
            "name": "TAB_DISABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5101,
            "description": "是否可移动页签, 默认值为true",
            "itemtype": "property",
            "name": "TAB_MOVABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5109,
            "description": "是否可以更改页签大小, 默认值为true",
            "itemtype": "property",
            "name": "TAB_RESIZABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5117,
            "description": "页签是否可见, 默认值为true",
            "itemtype": "property",
            "name": "TAB_VISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5125,
            "description": "页签宽度, 默认值为100",
            "itemtype": "property",
            "name": "TAB_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5133,
            "description": "表格列线条颜色的默认值(#DDD)",
            "itemtype": "property",
            "name": "TABLE_COLUMN_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5141,
            "description": "表格列线条宽度的默认值(1)",
            "itemtype": "property",
            "name": "TABLE_COLUMN_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5149,
            "description": "默认表格是否可编辑(false)",
            "itemtype": "property",
            "name": "TABLE_EDITABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5157,
            "description": "默认是否可以用键盘DELETE键删除表格行(true)",
            "itemtype": "property",
            "name": "TABLE_KEYBOARD_REMOVE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5165,
            "description": "默认是否可以用键盘CTRL+A键选中表格所有行(true)",
            "itemtype": "property",
            "name": "TABLE_KEYBOARD_SELECT_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5173,
            "description": "表格模型数据被选中时, 表格是否自动滚动到被选中行, 默认值为true",
            "itemtype": "property",
            "name": "TABLE_MAKE_VISIBLE_ON_SELECTED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5181,
            "description": "表格行高, 默认值为19",
            "itemtype": "property",
            "name": "TABLE_ROW_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5189,
            "description": "表格行线条颜色, 默认值为#DDDD",
            "itemtype": "property",
            "name": "TABLE_ROW_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5197,
            "description": "表格行线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "TABLE_ROW_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5205,
            "description": "表头背景色, 默认值为#EBEBEB",
            "itemtype": "property",
            "name": "TABLEHEADER_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5213,
            "description": "表头列线条颜色, 默认值为#DDD",
            "itemtype": "property",
            "name": "TABLEHEADER_COLUMN_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5221,
            "description": "表头高度, 默认值为24",
            "itemtype": "property",
            "name": "TABLEHEADER_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5229,
            "description": "移动表头时, 新插入位置颜色, 默认值为orange",
            "itemtype": "property",
            "name": "TABLEHEADER_INSERT_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5237,
            "description": "移动表头时, 表头背景色, 默认值为rgba(184,211,240,0.7)",
            "itemtype": "property",
            "name": "TABLEHEADER_MOVE_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5245,
            "description": "更改表头大小时, 鼠标距离表头边界值, 默认值为3",
            "itemtype": "property",
            "name": "TABLEHEADER_RESIZE_TOLERANCE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5253,
            "description": "表头升序排序图标, 默认值为sort_asc",
            "itemtype": "property",
            "name": "TABLEHEADER_SORT_ASC_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5261,
            "description": "表头降序排序图标, 默认值为sort_desc",
            "itemtype": "property",
            "name": "TABLEHEADER_SORT_DESC_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5269,
            "description": "表头排序图标位置, 默认值为98% 50%",
            "itemtype": "property",
            "name": "TABLEHEADER_SORT_ICON_POSITION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5277,
            "description": "页签面板关闭图标, 默认值为close_icon",
            "itemtype": "property",
            "name": "TABPANE_CLOSE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5285,
            "description": "页签面板禁用颜色, 默认值为#BABBBC",
            "itemtype": "property",
            "name": "TABPANE_DISABLED_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5293,
            "description": "页签面板的标签文字水平对齐方式, 默认值为center",
            "itemtype": "property",
            "name": "TABPANE_HORIZONTAL_ALIGN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5301,
            "description": "拖拽页签面板时新插入位置信息的背景色",
            "itemtype": "property",
            "name": "TABPANE_INSERT_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5309,
            "description": "拖拽页签面板时, 页签的背景颜色, 默认值为rgba(184,211,240,0.7)",
            "itemtype": "property",
            "name": "TABPANE_MOVE_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5317,
            "description": "更改页签面板页签大小时, 鼠标离页签边界的距离, 默认值为3",
            "itemtype": "property",
            "name": "TABPANE_RESIZE_TOLERANCE",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5325,
            "description": "页签面板被选中页签的背景色, 默认值为white",
            "itemtype": "property",
            "name": "TABPANE_SELECT_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5333,
            "description": "页签面板页签被关闭时, 是否自动选中下一个页签, 默认值为true",
            "itemtype": "property",
            "name": "TABPANE_SELECT_NEXT_ON_CLOSE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5341,
            "description": "选项卡面板上选中的选项卡消失时，是否选中下一个选项卡，默认为true",
            "itemtype": "property",
            "name": "TABPANE_SELECT_NEXT_ON_INVISIBLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5349,
            "description": "页签面板中页签的背景色, 默认值为#EBEBEB",
            "itemtype": "property",
            "name": "TABPANE_TAB_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5357,
            "description": "页签面板页签之间的间距, 默认值为1",
            "itemtype": "property",
            "name": "TABPANE_TAB_GAP",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5365,
            "description": "页签面板页签高度, 默认值为24",
            "itemtype": "property",
            "name": "TABPANE_TAB_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5373,
            "description": "页签面板页签的方位, 默认值为top",
            "itemtype": "property",
            "name": "TABPANE_TAB_ORIENTATION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5381,
            "description": "页签面板页签圆角半径, 默认值为0",
            "itemtype": "property",
            "name": "TABPANE_TAB_RADIUS",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5389,
            "description": "标题面板标题栏背景色, 默认值为#DDD",
            "itemtype": "property",
            "name": "TITLEPANE_TITLE_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5397,
            "description": "标题面板标题栏高度, 默认值为20",
            "itemtype": "property",
            "name": "TITLEPANE_TITLE_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5405,
            "description": "标题面板标题栏水平对齐方式, 默认值为left",
            "itemtype": "property",
            "name": "TITLEPANE_TITLE_HORIZONTAL_ALIGN",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5413,
            "description": "提示信息背景色, 默认值为lightyellow",
            "itemtype": "property",
            "name": "TOOLTIP_BACKGROUND",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5421,
            "description": "提示信息边框样式, 默认值为1px solid gray",
            "itemtype": "property",
            "name": "TOOLTIP_BORDER",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5429,
            "description": "提示信息边框圆角半径, 默认值为6px",
            "itemtype": "property",
            "name": "TOOLTIP_BORDER_RADIUS",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5437,
            "description": "提示信息阴影样式, 默认值为0px 0px 3px #AAA",
            "itemtype": "property",
            "name": "TOOLTIP_BOX_SHADOW",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5445,
            "description": "提示信息字体颜色, 默认值为black",
            "itemtype": "property",
            "name": "TOOLTIP_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5453,
            "description": "提示信息消失延迟事件，默认为4000ms",
            "itemtype": "property",
            "name": "TOOLTIP_DISMISS_DELAY",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5461,
            "description": "提示信息字体大小, 默认值为12px",
            "itemtype": "property",
            "name": "TOOLTIP_FONT_SIZE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5469,
            "description": "提示信息显示前的延迟时间，默认为750ms",
            "itemtype": "property",
            "name": "TOOLTIP_INITIAL_DELAY",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5477,
            "description": "提示信息内容边距, 默认值为4px 8px",
            "itemtype": "property",
            "name": "TOOLTIP_PADDING",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5485,
            "description": "提示信息重新显示延迟时间，默认为500ms",
            "itemtype": "property",
            "name": "TOOLTIP_RESHOW_DELAY",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5493,
            "description": "提示信息x轴偏移量, 默认值为12",
            "itemtype": "property",
            "name": "TOOLTIP_XOFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5501,
            "description": "提示信息y轴偏移量, 默认值为12",
            "itemtype": "property",
            "name": "TOOLTIP_YOFFSET",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5509,
            "description": "提示信息zIndex值，默认为100000",
            "itemtype": "property",
            "name": "TOOLTIP_ZINDEX",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5517,
            "description": "触摸交互时，手指移动阀值，默认为5",
            "itemtype": "property",
            "name": "TOUCH_MOVE_THRESHOLD",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5525,
            "description": "触摸交互时，选中阀值，默认为20",
            "itemtype": "property",
            "name": "TOUCH_RECT_SELECT_THRESHOLD",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5533,
            "description": "触摸交互时，缩放阀值，默认为30",
            "itemtype": "property",
            "name": "TOUCH_ZOOM_THRESHOLD",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5541,
            "description": "树节点折叠图标, 默认值为collapse_icon",
            "itemtype": "property",
            "name": "TREE_COLLAPSE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5549,
            "description": "树节点展开图标, 默认值为expand_icon",
            "itemtype": "property",
            "name": "TREE_EXPAND_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5557,
            "description": "树节点缩进量, 默认值为16",
            "itemtype": "property",
            "name": "TREE_INDENT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5565,
            "description": "是否允许在树上用DELETE键删除选中节点, 默认值为true",
            "itemtype": "property",
            "name": "TREE_KEYBOARD_REMOVE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5573,
            "description": "是否允许在树上用CTRL+A键选中全部节点, 默认值为true",
            "itemtype": "property",
            "name": "TREE_KEYBOARD_SELECT_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5581,
            "description": "树模型数据被选中时, 树表是否自动滚动到让选中项可见的位置, 默认值为true",
            "itemtype": "property",
            "name": "TREE_MAKE_VISIBLE_ON_SELECTED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5589,
            "description": "树节点行高, 默认值为19",
            "itemtype": "property",
            "name": "TREE_ROW_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5597,
            "description": "树节点行线条颜色, 默认值为#DDD",
            "itemtype": "property",
            "name": "TREE_ROW_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5605,
            "description": "树节点行线条宽度, 默认值为0",
            "itemtype": "property",
            "name": "TREE_ROW_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5613,
            "description": "树表节点折叠图标, 默认值为collapse_icon",
            "itemtype": "property",
            "name": "TREETABLE_COLLAPSE_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5621,
            "description": "树表列线条颜色, 默认值为#DDD",
            "itemtype": "property",
            "name": "TREETABLE_COLUMN_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5629,
            "description": "树表列线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "TREETABLE_COLUMN_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5637,
            "description": "树表是否可编辑, 默认值为false",
            "itemtype": "property",
            "name": "TREETABLE_EDITABLE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5645,
            "description": "树表节点展开图标, 默认值为expand_icon",
            "itemtype": "property",
            "name": "TREETABLE_EXPAND_ICON",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5653,
            "description": "树表节点缩进值, 默认值为16",
            "itemtype": "property",
            "name": "TREETABLE_INDENT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5661,
            "description": "是否允许在树表上用delete键删除选中节点, 默认值为true",
            "itemtype": "property",
            "name": "TREETABLE_KEYBOARD_REMOVE_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5669,
            "description": "是否允许在树表上用CTRL+A键选中全部节点, 默认值为true",
            "itemtype": "property",
            "name": "TREETABLE_KEYBOARD_SELECT_ENABLED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5677,
            "description": "树表模型数据被选中时, 树表是否自动滚动到让选中项可见的位置, 默认值为true",
            "itemtype": "property",
            "name": "TREETABLE_MAKE_VISIBLE_ON_SELECTED",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5685,
            "description": "树表行高, 默认值为19",
            "itemtype": "property",
            "name": "TREETABLE_ROW_HEIGHT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5693,
            "description": "树表行线条颜色, 默认值为#DDD",
            "itemtype": "property",
            "name": "TREETABLE_ROW_LINE_COLOR",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5701,
            "description": "树表行线条宽度, 默认值为1",
            "itemtype": "property",
            "name": "TREETABLE_ROW_LINE_WIDTH",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5709,
            "description": "矢量拓扑图上的网元UI对象生成器",
            "itemtype": "method",
            "name": "twaver.Defaults.VECTORUI_FUNCTION",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑图",
                    "type": "twaver.vector.Network"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回网元视图对象",
                "type": "twaver.vector.ElementUI"
            },
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5719,
            "description": "视图字体样式, 默认值为arial, tahoma, sans-serif, helvetica",
            "itemtype": "property",
            "name": "VIEW_FONT_FAMILY",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5727,
            "description": "视图字体大小, 默认值为12px",
            "itemtype": "property",
            "name": "VIEW_FONT_SIZE",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5735,
            "description": "视图位置样式, 默认值为absolute",
            "itemtype": "property",
            "name": "VIEW_POSITION",
            "type": "String",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5743,
            "description": "缩放时是否有动画效果, 默认值为true",
            "itemtype": "property",
            "name": "ZOOM_ANIMATE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5751,
            "description": "缩放比例系数, 默认值为1.3",
            "itemtype": "property",
            "name": "ZOOM_INCREMENT",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5759,
            "description": "最大缩放比例, 默认值为5",
            "itemtype": "property",
            "name": "ZOOM_MAX",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5767,
            "description": "最小缩放比例, 默认值为0.1",
            "itemtype": "property",
            "name": "ZOOM_MIN",
            "type": "Number",
            "static": 1,
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5776,
            "description": "添加指定的事件监听器",
            "itemtype": "method",
            "name": "twaver.EventDispatcher.add",
            "params": [
                {
                    "name": "l",
                    "description": "指定的事件监听器",
                    "type": "Function"
                },
                {
                    "name": "s",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "是否添加在监听器列表的最前方，如果为空，则添加在最后一个位置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5785,
            "description": "判断是否包含指定的事件",
            "itemtype": "method",
            "name": "twaver.EventDispatcher.contains",
            "params": [
                {
                    "name": "l",
                    "description": "指定的事件监听器",
                    "type": "Function"
                },
                {
                    "name": "s",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "如果包含返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5794,
            "description": "派发指定的事件",
            "itemtype": "method",
            "name": "twaver.EventDispatcher.fire",
            "params": [
                {
                    "name": "e",
                    "description": "指定的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5801,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.EventDispatcher.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5808,
            "description": "移除指定的事件监听器",
            "itemtype": "method",
            "name": "twaver.EventDispatcher.remove",
            "params": [
                {
                    "name": "l",
                    "description": "指定的事件监听器",
                    "type": "Function"
                },
                {
                    "name": "s",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.controls.TabPaneTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5828,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.ImageAsset.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5835,
            "itemtype": "method",
            "name": "twaver.ImageAsset.getFunction",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5841,
            "description": "获取图片的高度",
            "itemtype": "method",
            "name": "twaver.ImageAsset.getHeight",
            "return": {
                "description": "图片的高度",
                "type": "Number"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5848,
            "description": "获取指定渲染色的图片对象",
            "itemtype": "method",
            "name": "twaver.ImageAsset.getImage",
            "params": [
                {
                    "name": "color",
                    "description": "图片渲染的颜色",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.ImageAsset"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5856,
            "description": "获取图片的名称",
            "itemtype": "method",
            "name": "twaver.ImageAsset.getName",
            "return": {
                "description": "图片的名称",
                "type": "String"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5863,
            "description": "获取图片的路径",
            "itemtype": "method",
            "name": "twaver.ImageAsset.getSrc",
            "return": {
                "description": "图片的路径",
                "type": "String"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5870,
            "description": "获取图片的宽度",
            "itemtype": "method",
            "name": "twaver.ImageAsset.getWidth",
            "return": {
                "description": "图片的宽度",
                "type": "Number"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5877,
            "description": "获取是否是SVG图片",
            "itemtype": "method",
            "name": "twaver.ImageAsset.isSvg",
            "return": {
                "description": "返回是否是SVG图片",
                "type": "Boolean"
            },
            "class": "twaver.ImageAsset"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5898,
            "description": "将JSON数据序列化到数据容器中的某个对象上，如果rootParent为空，则序列化到数据容器中。",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.deserialize",
            "params": [
                {
                    "name": "jsonString",
                    "description": "JSON数据",
                    "type": "String"
                },
                {
                    "name": "rootParent",
                    "description": "反序列化时的根对象，如果为空，则序列化到数据容器中。",
                    "type": "twaver.Data",
                    "optional": true
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5906,
            "description": "从指定的JSON字符串中反序列化某个对象的Client属性",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.deserializeClientJson",
            "params": [
                {
                    "name": "instance",
                    "description": "反序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "JSON字符串",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "反序列化的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5915,
            "description": "从指定的JSON字符串中反序列化某个对象的Property属性",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.deserializePropertyJson",
            "params": [
                {
                    "name": "instance",
                    "description": "反序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "JSON字符串",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "反序列化的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5924,
            "description": "从指定的JSON字符串中反序列化某个对象的Style属性",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.deserializeStyleJson",
            "params": [
                {
                    "name": "instance",
                    "description": "反序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "JSON字符串",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "反序列化的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5933,
            "description": "从JSON字符串中反序列化属性值",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.deserializeValue",
            "params": [
                {
                    "name": "json",
                    "description": "JSON字符串",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "属性的类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "属性值",
                "type": "String"
            },
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5942,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.getClassName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5949,
            "description": "初始化数据容器中数据对象的ref值，ref值是TWaver导出时内部使用的属性",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.initRefs",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5956,
            "description": "是否需要序列化指定的对象",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.isSerializable",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为序列化，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5964,
            "description": "序列化相关的数据容器",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serialize",
            "return": {
                "description": "JSON字符串",
                "type": "String"
            },
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5971,
            "description": "序列化数据容器的主体部分，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serializeBody",
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5977,
            "description": "将对象的Client属性序列化成JSON字符串",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serializeClientJson",
            "params": [
                {
                    "name": "instance",
                    "description": "序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "client",
                    "description": "Client属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "新的对象。用于和instance对象比较，如果序列化的Client属性值相等，就不需要序列化这个属性",
                    "type": "Object"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5987,
            "description": "序列化数据对象",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serializeData",
            "params": [
                {
                    "name": "data",
                    "description": "序列化的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 5994,
            "description": "将对象的Property属性序列化成JSON字符串",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serializePropertyJson",
            "params": [
                {
                    "name": "instance",
                    "description": "序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "Property属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "新的对象。用于和instance对象比较，如果序列化的Property属性值相等，就不需要序列化这个属性",
                    "type": "Object"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6004,
            "description": "将数据对象的Style属性序列化成JSON数据",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serializeStyleJson",
            "params": [
                {
                    "name": "instance",
                    "description": "序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "style",
                    "description": "Style属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "新的实例化对象。用于和instance对象比较，如果序列化的Style属性值相等，就不需要序列化这个属性",
                    "type": "Object"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6014,
            "description": "序列化对象的某个属性",
            "itemtype": "method",
            "name": "twaver.JsonSerializer.serializeValue",
            "params": [
                {
                    "name": "property",
                    "description": "序列化的属性名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "序列化的属性值",
                    "type": "String"
                },
                {
                    "name": "newInstanceValue",
                    "description": "新的实例化对象的属性值",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "序列化属性的类型。可选值为：'cdata','data','point','list.point','list.string','list.number','rectangle'",
                    "type": "String"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.JsonSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6044,
            "description": "对拓扑按指定布局类型布局。\n布局类型有如下几种：\nround 圆形布局\nsymmetry 对称布局\nhierarchic 层次布局\ntopbottom 从上到下布局\nbottomtop 从下到上布局\nrightleft 从右到左布局\nleftright 从左到右布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.doLayout",
            "params": [
                {
                    "name": "type",
                    "description": "布局类型",
                    "type": "String"
                },
                {
                    "name": "finishFunction",
                    "description": "布局完后，执行的回调函数，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "如果布局成功，则返回true，否者返回false",
                "type": "Boolean"
            },
            "example": [
                " var autoLayouter = new twaver.layout.AutoLayouter(network);\nautoLayouter.doLayout('round', function(){\n    network.zoomOverview();\n});"
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6065,
            "description": "调用doLayout或getLayoutResult方法时，内部调用此方法，用指定布局类型对拓扑布局，或者根据指定布局类型获取布局后网元新的中心点\n布局类型有如下几种：\nround 圆形布局\nsymmetry 对称布局\nhierarchic 层次布局\ntopbottom 从上到下布局\nbottomtop 从下到上布局\nrightleft 从右到左布局\nleftright 从左到右布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.doLayoutImpl",
            "params": [
                {
                    "name": "type",
                    "description": "布局类型",
                    "type": "String"
                },
                {
                    "name": "finishFunction",
                    "description": "布局完后，执行的回调函数，可选，默认值为null",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "result",
                    "description": "空对象，用于保存布局结果（key为网元id，值为网元的新中心位置），可选，默认值为null",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "如果布局成功，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6083,
            "description": "返回字符串类名",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6090,
            "description": "获取指定节点的大小，默认如果accountAttachments为true则返回网元视图的viewRect大小，否则返回网元的rect大小",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getDimension",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "返回指定节点的大小，值为包含width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6098,
            "description": "获取网元容器",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getElementBox",
            "return": {
                "description": "返回网元容器",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6105,
            "description": "获取参与自动布局的网元，默认不可见，不可移动的网元不参与布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getElements",
            "return": {
                "description": "返回参与自动布局的网元",
                "type": "twaver.List"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6112,
            "description": "获取x轴偏移量，布局后，所有网元x坐标将偏移指定像素值，默认值为50",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getExplicitXOffset",
            "return": {
                "description": "返回x轴偏移量",
                "type": "Number"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6119,
            "description": "获取y轴偏移量，布局后，所有网元y坐标将偏移指定像素值，默认值为50",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getExplicitYOffset",
            "return": {
                "description": "返回y轴偏移量",
                "type": "Number"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6126,
            "description": "获取指定组的布局类型, 默认为自动布局的布局类型, 可以重写此方法对指定的组用特殊的布局类型布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getGroupLayoutType",
            "params": [
                {
                    "name": "group",
                    "description": "组",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "返回指定组的布局类型",
                "type": "String"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6134,
            "description": "根据指定布局类型，获取布局后网元新的中心位置\n布局类型有如下几种：\nround 圆形布局\nsymmetry 对称布局\nhierarchic 层次布局\ntopbottom 从上到下布局\nbottomtop 从下到上布局\nrightleft 从右到左布局\nleftright 从左到右布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getLayoutResult",
            "params": [
                {
                    "name": "type",
                    "description": "布局类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回key为网元id，值为新中心位置的对象",
                "type": "Object"
            },
            "example": [
                " var autoLayouter = new twaver.layout.AutoLayouter(network);\nvar result = autoLayouter.getLayoutResult('round');\nfor(var id in result){\n    console.log(id, result[id].x, result[id].y);\n}"
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6155,
            "description": "获取网元之间的排斥系数，默认值为1，排斥系数越大，布局后网元之间的间距越大，反之越小",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getRepulsion",
            "return": {
                "description": "返回网元之间的排斥系数",
                "type": "Number"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6162,
            "description": "获取布局类型",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.getType",
            "return": {
                "description": "返回布局类型",
                "type": "String"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6169,
            "description": "获取自动布局是否有动画效果，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.isAnimate",
            "return": {
                "description": "返回自动布局是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6176,
            "description": "获取自动布局是否展开组，默认值为false",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.isExpandGroup",
            "return": {
                "description": "返回自动布局是否展开组",
                "type": "Boolean"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6183,
            "description": "判断指定网元是否可移动, 也即是否参与自动布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.isMovable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可移动, 也即参与自动布局, 则返回true, 否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6191,
            "description": "判断指定网元是否可见, 不可见的网元不参与自动布局",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.isVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果指定网元可见, 则返回true, 否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6199,
            "description": "设置自动布局是否有动画效果，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.setAnimate",
            "params": [
                {
                    "name": "value",
                    "description": "是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6206,
            "description": "设置自动布局是否展开组，默认值为false",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.setExpandGroup",
            "params": [
                {
                    "name": "value",
                    "description": "返回自动布局是否展开组",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6213,
            "description": "设置x轴偏移量，布局后，所有网元x坐标将偏移指定像素值，默认值为50",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.setExplicitXOffset",
            "params": [
                {
                    "name": "value",
                    "description": "x轴偏移量",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6220,
            "description": "设置y轴偏移量，布局后，所有网元y坐标将偏移指定像素值，默认值为50",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.setExplicitYOffset",
            "params": [
                {
                    "name": "value",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6227,
            "description": "设置网元之间的排斥系数，默认值为1，排斥系数越大，布局后网元之间的间距越大，反之越小",
            "itemtype": "method",
            "name": "twaver.layout.AutoLayouter.setRepulsion",
            "params": [
                {
                    "name": "value",
                    "description": "网元之间的排斥系数",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.AutoLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6246,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6253,
            "description": "获取两次自动布局之间的时间间隔，单位为毫秒，默认值为50ms",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getInterval",
            "return": {
                "description": "返回两次自动布局之间的时间间隔，单位为毫秒",
                "type": "Number"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6260,
            "description": "获取布局界限，布局时网元不能超出此界限，默认值为null，表示布局时网元没有区域限制",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getLimitBounds",
            "return": {
                "description": "布局界限，包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6267,
            "description": "获取连线排斥力系数，值越大，网元和连线之间的距离越大，默认值为0.6",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getLinkRepulsionFactor",
            "return": {
                "description": "连线排斥力系数",
                "type": "Number"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6274,
            "description": "获取和弹簧布局绑定的拓扑",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getNetwork",
            "return": {
                "description": "和弹簧布局绑定的拓扑",
                "type": "twaver.network.Network"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6281,
            "description": "获取节点排斥力系数，值越大，网元之间的距离越大，默认值为0.6",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getNodeRepulsionFactor",
            "return": {
                "description": "节点排斥力系数",
                "type": "Number"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6288,
            "description": "获取步进，即每次布局时网元重新计算位置的次数，值越大，布局越快趋于平衡，默认值为10",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.getStepCount",
            "return": {
                "description": "步进",
                "type": "Number"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6295,
            "description": "判断指定节点是否可以移动，如果不可以移动，则在弹簧布局时，此节点将固定不动，否则网元位置会自动改变",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.isMovable",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "如果节点可以移动，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6303,
            "description": "判断弹簧布局是否正在运行",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.isRunning",
            "return": {
                "description": "如果布局正在运行，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6310,
            "description": "判断指定网元是否参与布局",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.isVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元参与布局，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6318,
            "description": "调用此方法进行一次布局，弹簧布局以一定时间间隔调用此方法对网元进行自动布局",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.relax",
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6324,
            "description": "设置两次自动布局之间的时间间隔，单位为毫秒，默认值为50ms",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.setInterval",
            "params": [
                {
                    "name": "interval",
                    "description": "两次自动布局之间的时间间隔，单位为毫秒",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6331,
            "description": "设置布局界限，布局时网元不能超出此界限，默认值为null，表示布局时网元没有区域限制",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.setLimitBounds",
            "params": [
                {
                    "name": "limitBounds",
                    "description": "布局界限，包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6338,
            "description": "设置连线排斥力系数，值越大，网元和连线之间的距离越大，默认值为0.6",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.setLinkRepulsionFactor",
            "params": [
                {
                    "name": "linkRepulsionFactor",
                    "description": "连线排斥力系数",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6345,
            "description": "设置节点排斥力系数，值越大，网元之间的距离越大，默认值为0.6",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.setNodeRepulsionFactor",
            "params": [
                {
                    "name": "nodeRepulsionFactor",
                    "description": "节点排斥力系数",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6352,
            "description": "设置步进，即每次布局时网元重新计算位置的次数，值越大，布局越快趋于平衡，默认值为10",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.setStepCount",
            "params": [
                {
                    "name": "stepCount",
                    "description": "步进",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6359,
            "description": "开始布局",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.start",
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6365,
            "description": "停止布局",
            "itemtype": "method",
            "name": "twaver.layout.SpringLayouter.stop",
            "class": "twaver.layout.SpringLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6380,
            "description": "在指定的序号上添加一个子项",
            "itemtype": "method",
            "name": "twaver.List.add",
            "params": [
                {
                    "name": "item",
                    "description": "添加的数据对象",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "添加的数据对象的序号，如果序号为空，则添加在队列的最后一个位置",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回list的长度",
                "type": "Number"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6389,
            "description": "在列表的末尾添加多个元素，并返回它的长度",
            "itemtype": "method",
            "name": "twaver.List.addAll",
            "params": [
                {
                    "name": "array",
                    "description": "添加的子项",
                    "type": "Object"
                }
            ],
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6396,
            "description": "清空列表中的内容",
            "itemtype": "method",
            "name": "twaver.List.clear",
            "return": {
                "description": "返回含有被删除的元素的数组",
                "type": "Array"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6403,
            "description": "判断列表中是否包含指定的项",
            "itemtype": "method",
            "name": "twaver.List.contains",
            "params": [
                {
                    "name": "item",
                    "description": "指定的子项",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true为包含，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6411,
            "description": "循环遍历列表中所有的数据",
            "itemtype": "method",
            "name": "twaver.List.forEach",
            "params": [
                {
                    "name": "f",
                    "description": "遍历时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时，指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6419,
            "description": "反向循环遍历列表中所有的数据",
            "itemtype": "method",
            "name": "twaver.List.forEachReverse",
            "params": [
                {
                    "name": "f",
                    "description": "遍历时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时，指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6427,
            "description": "获取指定序号上的数据项",
            "itemtype": "method",
            "name": "twaver.List.get",
            "params": [
                {
                    "name": "index",
                    "description": "指定的序号",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "指定序号上的数据项",
                "type": "Object"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6435,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.List.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6442,
            "itemtype": "method",
            "name": "twaver.List.indexOf",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6449,
            "description": "判断列表是否为空",
            "itemtype": "method",
            "name": "twaver.List.isEmpty",
            "return": {
                "description": "如果为空返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6456,
            "description": "移除列表上指定的项",
            "itemtype": "method",
            "name": "twaver.List.remove",
            "params": [
                {
                    "name": "item",
                    "description": "移除的列表项",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "数据项的序号",
                "type": "Number"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6464,
            "description": "移除列表上指定的序号上的数据项",
            "itemtype": "method",
            "name": "twaver.List.removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "指定的序号值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6472,
            "description": "给指定的序号上设置数据项",
            "itemtype": "method",
            "name": "twaver.List.set",
            "params": [
                {
                    "name": "index",
                    "description": "指定的序号值",
                    "type": "Number"
                },
                {
                    "name": "item",
                    "description": "指定的数据项",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6481,
            "description": "列表的长度",
            "itemtype": "method",
            "name": "twaver.List.size",
            "return": {
                "description": "列表的长度",
                "type": "Number"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6488,
            "description": "按照指定的排序方法排序",
            "itemtype": "method",
            "name": "twaver.List.sort",
            "params": [
                {
                    "name": "sortFunction",
                    "description": "可选，排序的函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.List"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6496,
            "description": "根据指定的函数将列表转成数组",
            "itemtype": "method",
            "name": "twaver.List.toArray",
            "params": [
                {
                    "name": "matchFunction",
                    "description": "转化时的条件函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "条件函数的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6505,
            "itemtype": "method",
            "name": "twaver.List.toList",
            "params": [
                {
                    "name": "matchFunction",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6524,
            "description": "销毁附件",
            "itemtype": "method",
            "name": "twaver.network.Attachment.dispose",
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6530,
            "description": "获取附件透明度，默认值为1",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getAlpha",
            "return": {
                "description": "返回附件透明度，默认值为1",
                "type": "Number"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6537,
            "description": "获取字符串类名",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6544,
            "description": "获取和附件关联的网元",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getElement",
            "return": {
                "description": "返回和附件关联的网元",
                "type": "twaver.Element"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6551,
            "description": "获取和附件关联的网元视图",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getElementUI",
            "return": {
                "description": "返回和附件关联的网元视图",
                "type": "twaver.network.ElementUI"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6558,
            "description": "获取附件的字体",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getFont",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回附件的字体",
                "type": "String"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6566,
            "description": "获取和附件关联的拓扑",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getNetwork",
            "return": {
                "description": "返回和附件关联的拓扑",
                "type": "twaver.network.Network"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6573,
            "description": "获取指定样式的值，封装了Element#getStyle方法",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式的值",
                "type": "Object"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6581,
            "description": "获取附件的视图div元素",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getView",
            "return": {
                "description": "返回附件的视图div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6588,
            "description": "获取附件视图的位置及大小，值为包含x、y、width和height属性的Object对象",
            "itemtype": "method",
            "name": "twaver.network.Attachment.getViewRect",
            "return": {
                "description": "返回附件视图的位置及大小，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6595,
            "description": "命中测试，判断点击指定坐标点是否能选中附件",
            "itemtype": "method",
            "name": "twaver.network.Attachment.hit",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "如果点击指定坐标能选中附件，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6604,
            "description": "判断附件视图区域是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.network.Attachment.intersects",
            "params": [
                {
                    "name": "rect",
                    "description": "指定区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果附件视图区域包含指定区域，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6612,
            "description": "获取附件视图是否显示在附件层中",
            "itemtype": "method",
            "name": "twaver.network.Attachment.isShowInAttachmentDiv",
            "return": {
                "description": "返回附件视图是否显示在附件层中",
                "type": "Boolean"
            },
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6619,
            "description": "更新附件视图，一般子类会重载此方法，以更新附件视图",
            "itemtype": "method",
            "name": "twaver.network.Attachment.updateMeasure",
            "class": "twaver.network.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6636,
            "description": "添加附件，如果showInAttachmentDiv为true，则附件被添加到拓扑的附件层（attachmentDiv），否则附件被添加到网元视图上",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.addAttachment",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.network.Attachment"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6643,
            "description": "添加内容区域，所有内容区域合并后构成unionBodyBounds",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.addBodyBounds",
            "params": [
                {
                    "name": "rect",
                    "description": "区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6650,
            "description": "添加HTML元素到网元内容视图(bodyView)",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.addComponent",
            "params": [
                {
                    "name": "component",
                    "description": "HTML元素",
                    "type": "HTMLElement"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6657,
            "description": "检查是否显示告警附件，如果Network#getAlarmLabel(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.checkAlarmAttachment",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6663,
            "description": "检查所有附件是否显示，网元刷新时（validate）被调用，包括告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.checkAttachments",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6669,
            "description": "检查是否显示编辑附件，如果此网元可选中（Network#isSelected(element)返回true），而且可编辑（Network#isEditable(element)返回true），而且此网元视图可编辑（isEditable()返回true），则显示，否则不显示",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.checkEditAttachment",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6675,
            "description": "检查是否显示图标组附件，如果Network#getIconsNames(element)返回null或者length为0，则不显示",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.checkIconsAttachment",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6681,
            "description": "检查是否显示标签附件，如果Network#getLabel(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.checkLabelAttachment",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6687,
            "description": "清除未添加到视图中的对象，比如告警消失后，告警附件需要被清除",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.cleanUp",
            "params": [
                {
                    "name": "names",
                    "description": "需要被删除属性名称数组",
                    "type": "Array"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6694,
            "description": "销毁网元视图，网元从拓扑关联的网元容器中删除时被调用，用于从拓扑视图中删除网元视图及其附件视图",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.dispose",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6700,
            "description": "获取告警附件",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getAlarmAttachment",
            "return": {
                "description": "返回告警附件",
                "type": "twaver.network.AlarmAttachment"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6707,
            "description": "获取所有附件集合，包含告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getAttachments",
            "return": {
                "description": "返回所有附件集合",
                "type": "twaver.List"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6714,
            "description": "获得内容区域，默认为createBodyRect返回的结果",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6721,
            "description": "获取网元内容视图",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getBodyView",
            "return": {
                "description": "返回网元内容视图",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6728,
            "description": "获取该类字符串类名",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6735,
            "description": "获取指定样式的渲染颜色，如果innerColor不为空则返回innerColor，否则返回指定样式的值",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getDyeColor",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回渲染颜色",
                "type": "String"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6743,
            "description": "获取编辑附件",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getEditAttachment",
            "return": {
                "description": "返回编辑附件",
                "type": "twaver.network.EditAttachment"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6750,
            "description": "获取和网元视图关联的网元",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getElement",
            "return": {
                "description": "返回和网元视图关联的网元",
                "type": "twaver.Element"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6757,
            "description": "获取给定样式属性的值作为字体，如果指定样式的值是null，则返回twaver.Defaults.FONT",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getFont",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回字体",
                "type": "String"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6765,
            "description": "获取热点，用于定位附件等的位置",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getHotSpot",
            "return": {
                "description": "返回热点，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6772,
            "description": "获取图标组附件",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getIconsAttachment",
            "return": {
                "description": "返回图标组附件",
                "type": "twaver.network.IconsAttachment"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6779,
            "description": "获取网元填充色",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getInnerColor",
            "return": {
                "description": "返回网元填充色",
                "type": "String"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6786,
            "description": "获取标签附件",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getLabelAttachment",
            "return": {
                "description": "返回标签附件",
                "type": "twaver.network.LabelAttachment"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6793,
            "description": "获取和网元视图关联的拓扑",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getNetwork",
            "return": {
                "description": "返回和网元视图关联的拓扑",
                "type": "twaver.network.Network"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6800,
            "description": "获取网元边框颜色",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getOuterColor",
            "return": {
                "description": "返回网元边框颜色",
                "type": "String"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6807,
            "description": "获取网元选中后阴影颜色",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getShadowColor",
            "return": {
                "description": "返回网元选中后阴影颜色",
                "type": "String"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6814,
            "description": "获取指定样式属性的值，封装了Element.getStyle",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式属性的值",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6822,
            "description": "获取合并的内容区域",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getUnionBodyBounds",
            "return": {
                "description": "返回合并的内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6829,
            "description": "获取网元视图，网元视图包含内容视图（bodyview）和附件（告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment）",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getView",
            "return": {
                "description": "返回网元视图",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6836,
            "description": "获取视图内容区域，包括unionBodyBounds和所有附件的区域",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.getViewRect",
            "return": {
                "description": "返回视图内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6843,
            "description": "和网元视图关联的网元属性变化时的处理函数，默认实现为调用invalidate方法让网元视图刷新",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.handlePropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6850,
            "description": "和网元视图关联的网元被选中或取消选中时的处理函数，默认实现为调用invalidate方法让网元视图刷新",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6857,
            "description": "命中测试，判断网元视图是否包含指定坐标",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.hit",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "网元视图是否包含指定坐标，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6866,
            "description": "对网元视图中的画布元素进行命中测试，判断网元视图中的画布元素是否包含指定坐标",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.hitCanvas",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                },
                {
                    "name": "names",
                    "description": "画布元素名称数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "网元视图中的画布元素是否包含指定坐标，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6876,
            "description": "对网元视图中的html元素进行命中测试，判断网元视图中的html元素是否包含指定坐标",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.hitComponent",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                },
                {
                    "name": "names",
                    "description": "html元素名称数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "如果网元视图中的html元素包含指定坐标，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6886,
            "description": "获取指定坐标下的视图对象，为附件或者网元视图本身",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定坐标下的视图对象，为附件或者网元视图本身",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6895,
            "description": "判断网元视图是否和指定区域相交",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.intersects",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果网元视图包含指定矩形区域，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6903,
            "description": "对网元视图中的html元素进行命中测试，判断网元视图中的画布元素是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.intersectsCanvas",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，包含x、y、width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "names",
                    "description": "画布元素名称数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "如果网元视图中的画布元素包含指定区域，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6912,
            "description": "对网元视图中的html元素进行命中测试，判断网元视图中的html元素是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.intersectsComponent",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，包含x、y、width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "names",
                    "description": "html元素名称数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "如果网元视图中的html元素包含指定区域，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6921,
            "description": "获取指定矩形区域的视图对象，为附件或者网元视图本身",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.intersectsTest",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回指定矩形区域的对象，为附件或者网元视图本身",
                "type": "Object"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6929,
            "itemtype": "method",
            "name": "twaver.network.ElementUI.invalidate",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6935,
            "description": "获取网元视图是否可编辑，默认值为true",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.isEditable",
            "return": {
                "description": "如果网元视图可编辑，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6942,
            "description": "判断是否需要设置阴影，默认实现是如果设置了阴影颜色，而且网元被被选中，而且select.style样式为shadow，则返回true，否则返回false",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.isShadowable",
            "return": {
                "description": "如果需要设置阴影，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6949,
            "description": "判断网元视图是否可见",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.isVisible",
            "return": {
                "description": "如果网元视图可见，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6956,
            "description": "删除指定附件",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.removeAttachment",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.network.Attachment"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6963,
            "description": "设置热点，用于定位附件等的位置",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.setHotSpot",
            "params": [
                {
                    "name": "value",
                    "description": "热点，值为包含x和y属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6970,
            "description": "给指定画布元素设置阴影效果",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.setShadow",
            "params": [
                {
                    "name": "part",
                    "description": "网元视图（ElementUI）或者附件（Attachment）",
                    "type": "Object"
                },
                {
                    "name": "canvas",
                    "description": "画布元素",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "rect",
                    "description": "画图大小及位置，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "画布渲染内容",
                "type": "CanvasRenderingContext2D"
            },
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6980,
            "description": "设置网元视图是否可见",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.setVisible",
            "params": [
                {
                    "name": "value",
                    "description": "是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6987,
            "description": "更新网元视图内容，被validate方法调用，一般子类重载此方法，往网元视图添加HTML元素",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.updateMeasure",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 6993,
            "description": "此方法被Network调用，用以重画网元视图内容，此内部检查所有附件是否可见（checkAttachments），并调用updateMeasure方法重画网元内容，最后调用附件的updateMeasure方法，让附件重画",
            "itemtype": "method",
            "name": "twaver.network.ElementUI.validate",
            "class": "twaver.network.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7009,
            "description": "批量添加事件监听器，参数个数不限，类型为String，值为所有合法的事件类型：比如mousedown，mouseup；此方法会查找函数名为\"handle_\"加\"事件类型\"（handle_mousedown，handle_mousedown）的函数，作为指定事件类型的回调函数。此方法一般在setUp方法里被调用",
            "itemtype": "method",
            "name": "twaver.network.interaction.BaseInteraction.addListener",
            "class": "twaver.network.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7015,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.network.interaction.BaseInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.network.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7022,
            "description": "批量删除事件监听器，参数个数不限，类型为String，值为所有合法的事件类型：比如mousedown，mouseup；此方法会删除指定事件类型的函数名为\"hanle_\"加\"事件类型\"（handle_mousedown，handle_mousedown）的监听器。此方法一般在tearDown方法里被调用",
            "itemtype": "method",
            "name": "twaver.network.interaction.BaseInteraction.removeListener",
            "class": "twaver.network.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7028,
            "description": "初始化交互处理器，一般调用addListener方法添加鼠标、键盘以及触摸事件监听器；Network#setInteractions会调用此方法",
            "itemtype": "method",
            "name": "twaver.network.interaction.BaseInteraction.setUp",
            "class": "twaver.network.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7034,
            "description": "销毁交互处理器，一般调用removeListener方法删除鼠标、键盘以及触摸事件监听器；使用Network#setInteractions切换交互处理器时会调用此方法撤销旧的交互处理器",
            "itemtype": "method",
            "name": "twaver.network.interaction.BaseInteraction.tearDown",
            "class": "twaver.network.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7050,
            "description": "清除拖动鼠标和松开鼠标监听",
            "itemtype": "method",
            "name": "twaver.network.OverviewInteraction.clear",
            "class": "twaver.network.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7056,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.network.OverviewInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.network.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7063,
            "description": "按下鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.network.OverviewInteraction.handleMousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7070,
            "description": "拖动鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.network.OverviewInteraction.handleMousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7077,
            "description": "松开鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.network.OverviewInteraction.handleMouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7094,
            "description": "获取类名",
            "itemtype": "method",
            "name": "twaver.network.OverviewMSTouchInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.network.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7101,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.network.OverviewMSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7108,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.network.OverviewMSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7115,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.network.OverviewMSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7132,
            "description": "清除拖动鼠标和松开鼠标监听",
            "itemtype": "method",
            "name": "twaver.network.OverviewTouchInteraction.clear",
            "class": "twaver.network.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7138,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.network.OverviewTouchInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.network.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7145,
            "description": "触摸结束时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.network.OverviewTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7152,
            "description": "触摸移动时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.network.OverviewTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7159,
            "description": "触摸开始时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.network.OverviewTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7177,
            "description": "清除未使用的缓存项",
            "itemtype": "method",
            "name": "twaver.Pool.clear",
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7183,
            "description": "当前HTML元素索引，初始值为-1，调用get方法后索引加一，调用release方法后，索引减一",
            "itemtype": "property",
            "name": "currentIndex",
            "type": "Number",
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7190,
            "itemtype": "method",
            "name": "twaver.Pool.get",
            "return": {
                "description": "返回下一个可用的HTML元素",
                "type": "HTMLElement"
            },
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7196,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.Pool.getClassName",
            "return": {
                "description": "返回此类的字符串类名",
                "type": "String"
            },
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7203,
            "description": "冗余HTML元素缓存数，默认值为2",
            "itemtype": "property",
            "name": "redundancy",
            "type": "Number",
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7210,
            "description": "释放指定HTML元素",
            "itemtype": "method",
            "name": "twaver.Pool.release",
            "params": [
                {
                    "name": "html",
                    "description": "HTML元素",
                    "type": "HTMLElement"
                }
            ],
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7217,
            "description": "重置缓存池",
            "itemtype": "method",
            "name": "twaver.Pool.reset",
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7223,
            "description": "获取当前缓存池大小",
            "itemtype": "method",
            "name": "twaver.Pool.size",
            "return": {
                "description": "返回当前缓存池大小",
                "type": "Number"
            },
            "class": "twaver.Pool"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7239,
            "description": "添加属性变化监听器，用于监听属性变化",
            "itemtype": "method",
            "name": "twaver.PropertyChangeDispatcher.addPropertyChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "属性变化监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "可选，属性变化监听器的作用域，默认为null，即全局",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "可选，是否将此监听放在最前面，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " var dispatcher = new twaver.PropertyChangeDispatcher();\ndispatcher.addPropertyChangeListener(function (e) {\n    console.log(e.property, e.newValue, e.oldValue);\n});"
            ],
            "class": "twaver.PropertyChangeDispatcher"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7252,
            "description": "派发属性变化事件，属性变化时调用此方法",
            "itemtype": "method",
            "name": "twaver.PropertyChangeDispatcher.firePropertyChange",
            "params": [
                {
                    "name": "property",
                    "description": "发生变化的属性",
                    "type": "String"
                },
                {
                    "name": "oldValue",
                    "description": "和此属性相关的旧值",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "和此属性相关的新值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果新值和旧值相等则返回false，否则返回true",
                "type": "Boolean"
            },
            "class": "twaver.PropertyChangeDispatcher"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7262,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.PropertyChangeDispatcher.getClassName",
            "return": {
                "description": "返回此类的字符串类名",
                "type": "String"
            },
            "class": "twaver.PropertyChangeDispatcher"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7269,
            "description": "属性变化时（firePropertyChange）触发的动作，不需要调用此方法，但可以重载此方法执行自定义逻辑",
            "itemtype": "method",
            "name": "twaver.PropertyChangeDispatcher.onPropertyChanged",
            "params": [
                {
                    "name": "e",
                    "description": "属性变化事件，包含property、oldValue和newValue的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.PropertyChangeDispatcher"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7276,
            "description": "删除指定作用域的属性变化监听器，作用域必须和添加监听器时的作用域一致，相同的作用域的相同监听器只能成功添加一次",
            "itemtype": "method",
            "name": "twaver.PropertyChangeDispatcher.removePropertyChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "属性变化监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "属性变化监听器的作用域，可选，默认为null，代表全局",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.PropertyChangeDispatcher"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7297,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7304,
            "description": "获取绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.getDataBox",
            "return": {
                "description": "数据容器对象",
                "type": "twaver.DataBox"
            },
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7311,
            "description": "获取传递的属性名称",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.getPropertyName",
            "return": {
                "description": "属性名称",
                "type": "String"
            },
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7318,
            "description": "获取传递的属性类型",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.getPropertyType",
            "return": {
                "description": "传递的属性类型",
                "type": "Object"
            },
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7325,
            "description": "当数据容器更改时调用此方法，默认将会传递更改的数据。可以重写这个方法更改默认的规则",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.handleDataBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据容器更改的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7332,
            "description": "当数据容器中数据的属性更改时调用此方法，默认将会传递更改的数据。可以重写这个方法更改默认的规则",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.handleDataPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据容器中数据属性更改的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7339,
            "description": "返回属性传递规则是否生效",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.isEnable",
            "return": {
                "description": "如果为true，传播生效，如果为false，传播将会停止",
                "type": "Boolean"
            },
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7346,
            "description": "是否是需要响应的类型，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.isInterestedProperty",
            "params": [
                {
                    "name": "e",
                    "description": "属性更改的事件",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true为符合条件，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7354,
            "description": "传播数据中指定的属性",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.propagate",
            "params": [
                {
                    "name": "data",
                    "description": "传播属性值的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7361,
            "description": "当需要传递属性值到指定父亲的属性时，调用这个方法",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.propagateToParent",
            "params": [
                {
                    "name": "child",
                    "description": "孩子对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "parent",
                    "description": "父亲对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7369,
            "description": "将网元对象的属性值传递到上一级的数据上。\"上一级\"在TWaver中默认为父亲节点。用户可以重写这个方法去更改默认的传播规则",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.propagateToTop",
            "params": [
                {
                    "name": "data",
                    "description": "传递属性的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7376,
            "description": "设置属性传递规则是否生效",
            "itemtype": "method",
            "name": "twaver.PropertyPropagator.setEnable",
            "params": [
                {
                    "name": "enable",
                    "description": "如果为true，传播生效，如果为false，传播将会停止",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.PropertyPropagator"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7400,
            "description": "释放所有绑定的资源。当调用这个方法时，绑定在快速查找上的数据容器将被释放",
            "itemtype": "method",
            "name": "twaver.QuickFinder.dispose",
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7406,
            "description": "通过指定的值查询出所有匹配的数据",
            "itemtype": "method",
            "name": "twaver.QuickFinder.find",
            "params": [
                {
                    "name": "value",
                    "description": "指定查询的值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "匹配的数据集合",
                "type": "twaver.List"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7414,
            "description": "通过给定的值查询出匹配数据集合的第一个数据",
            "itemtype": "method",
            "name": "twaver.QuickFinder.findFirst",
            "params": [
                {
                    "name": "value",
                    "description": "给定查询的值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "数据集合的第一个数据",
                "type": "twaver.Data"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7422,
            "description": "获取这个类的类名",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7429,
            "description": "获取绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getDataBox",
            "return": {
                "description": "数据容器对象",
                "type": "twaver.DataBox"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7436,
            "description": "获取过滤的方法",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getFilterFunction",
            "return": {
                "description": "过滤的方法",
                "type": "Function"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7443,
            "description": "获取绑定的属性名称",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getPropertyName",
            "return": {
                "description": "绑定的属性名称",
                "type": "String"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7450,
            "description": "获取绑定的属性类型。属性类型的可选值为：\n'accessor':get/set方法的属性\n'style'：样式属性\n'client：自定义的属性",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getPropertyType",
            "return": {
                "description": "属性类型",
                "type": "String"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7460,
            "description": "获取对象的属性值。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getValue",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "数据对象的属性值",
                "type": "String"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7468,
            "description": "获取返回值的方法。这个方法用于指出哪些值应该包含在返回的值中。",
            "itemtype": "method",
            "name": "twaver.QuickFinder.getValueFunction",
            "return": {
                "description": "返回值的方法",
                "type": "Function"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7475,
            "description": "当数据容器发生变化时，调用此方法。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.QuickFinder.handleDataBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7482,
            "description": "当数据容器中数据的属性发生变化时调用此方法",
            "itemtype": "method",
            "name": "twaver.QuickFinder.handleDataPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据属性发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7489,
            "description": "指定的数据是否符合当前的快速查找类的条件",
            "itemtype": "method",
            "name": "twaver.QuickFinder.isInterested",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为符合，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.QuickFinder"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7510,
            "description": "添加网元选中更改事件的监听器，当网元的选中状态发生变化时可以通过此监听器监听",
            "itemtype": "method",
            "name": "twaver.SelectionModel.addSelectionChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "选中更改的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "是否添加在监听器列表的最前方，如果为空，则添加在最后一个位置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7519,
            "description": "追加指定的选中数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.appendSelection",
            "params": [
                {
                    "name": "datas",
                    "description": "追加的选中数据的集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7526,
            "description": "清空所有选中的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.clearSelection",
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7532,
            "description": "判断是否包含某个数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.contains",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为包含，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7540,
            "description": "释放选择容器中所有的资源。包括选择容器上的监听器和选择容器中的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.dispose",
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7546,
            "description": "派发出选中数据更改的事件",
            "itemtype": "method",
            "name": "twaver.SelectionModel.fireSelectionChange",
            "params": [
                {
                    "name": "kind",
                    "description": "数据更改的类型",
                    "type": "String"
                },
                {
                    "name": "datas",
                    "description": "选中数据集合的新值",
                    "type": "twaver.List"
                },
                {
                    "name": "oldSelection",
                    "description": "选中数据集合的老值",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7555,
            "description": "获取绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.SelectionModel.getDataBox",
            "return": {
                "description": "绑定的数据容器",
                "type": "twaver.DataBox"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7562,
            "description": "获取选择过滤器，它是用于过滤哪些数据可以选择，哪些数据不可以选择。如果想要使某些数据一直处于不可选中的状态，可以使用此过滤器。",
            "itemtype": "method",
            "name": "twaver.SelectionModel.getFilterFunction",
            "return": {
                "description": "选择过滤器",
                "type": "Function"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7569,
            "description": "获取第一个选中的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.getFirstData",
            "return": {
                "description": "第一个选中的数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7576,
            "description": "获取最后一个选中的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.getLastData",
            "return": {
                "description": "最后一个选中的数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7583,
            "description": "获取数据容器中所有选中的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.getSelection",
            "return": {
                "description": "选中数据的集合",
                "type": "twaver.List"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7590,
            "description": "获取选择模型的类型，默认是多选。\n选择模型的类型可选值：\nnoneSelection:不可选中\nsingleSelection:单选\nmultipleSelection:多选",
            "itemtype": "method",
            "name": "twaver.SelectionModel.getSelectionMode",
            "return": {
                "description": "选择模型的类型",
                "type": "String"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7602,
            "description": "处理数据容器更改的事件的方法。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.SelectionModel.handleDataBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据容器更改的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7609,
            "description": "判断某个数据是否是选中状态",
            "itemtype": "method",
            "name": "twaver.SelectionModel.isSelectable",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为选中，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7617,
            "description": "删除指定选中的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.removeSelection",
            "params": [
                {
                    "name": "datas",
                    "description": "删除选中数据的集合",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7624,
            "description": "删除网元选中更改事件的监听器，当网元的选中状态发生变化时可以通过此监听器监听",
            "itemtype": "method",
            "name": "twaver.SelectionModel.removeSelectionChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元选中更改事件的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7632,
            "description": "选中数据容器中所有的数据",
            "itemtype": "method",
            "name": "twaver.SelectionModel.selectAll",
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7638,
            "description": "设置选择过滤器，它是用于过滤哪些数据可以选择，哪些数据不可以选择。如果想要使某些数据一直处于不可选中的状态，可以使用此过滤器。",
            "itemtype": "method",
            "name": "twaver.SelectionModel.setFilterFunction",
            "params": [
                {
                    "name": "filterFunction",
                    "description": "选择过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7645,
            "description": "将某些数据设置为选中状态",
            "itemtype": "method",
            "name": "twaver.SelectionModel.setSelection",
            "params": [
                {
                    "name": "datas",
                    "description": "选中的数据集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7652,
            "description": "设置选择模型的类型。\n选择模型的类型可选值：\nnoneSelection:不可选中\nsingleSelection:单选\nmultipleSelection:多选",
            "itemtype": "method",
            "name": "twaver.SelectionModel.setSelectionMode",
            "params": [
                {
                    "name": "selectionMode",
                    "description": "选择模型的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7664,
            "description": "选中数据的大小",
            "itemtype": "method",
            "name": "twaver.SelectionModel.size",
            "return": {
                "description": "选中数据的大小",
                "type": "Number"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7671,
            "description": "将选择容器中的数据转换成List",
            "itemtype": "method",
            "name": "twaver.SelectionModel.toSelection",
            "params": [
                {
                    "name": "matchFunction",
                    "description": "转换集合时的过滤器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "过滤器的作用域。为空时值为window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "数据集合",
                "type": "twaver.List"
            },
            "class": "twaver.SelectionModel"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7689,
            "description": "获取指定Client属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getClientType",
            "params": [
                {
                    "name": "client",
                    "description": "Client属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Client属性的数据类型",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7698,
            "description": "获取指定Property属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getPropertyType",
            "params": [
                {
                    "name": "property",
                    "description": "Property属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Property属性的数据类型",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7707,
            "description": "获取指定Style属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getStyleType",
            "params": [
                {
                    "name": "style",
                    "description": "Style属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Style属性的数据类型",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7716,
            "description": "数据容器中所有数据的Client属性是否需要序列化，true为序列化，否则为false",
            "itemtype": "property",
            "name": "isClientSerializable",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7724,
            "description": "数据容器是否需要进行序列化。true为序列化，否则为false",
            "itemtype": "property",
            "name": "isDataBoxSerializable",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7732,
            "description": "图层容器是否需要序列化，true为需要序列化，否则为false",
            "itemtype": "property",
            "name": "isLayerBoxSerializable",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7740,
            "description": "数据容器中所有数据的Style属性是否需要序列化，true为序列化，否则为false",
            "itemtype": "property",
            "name": "isStyleSerializable",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7748,
            "description": "获取这个类的名称",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7755,
            "description": "获取指定Client属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getClientType",
            "params": [
                {
                    "name": "client",
                    "description": "Client属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Client属性的数据类型",
                "type": "String"
            },
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7763,
            "description": "获取指定Property属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getPropertyType",
            "params": [
                {
                    "name": "property",
                    "description": "Property属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Property属性的数据类型",
                "type": "String"
            },
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7771,
            "description": "获取指定Style属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.getStyleType",
            "params": [
                {
                    "name": "style",
                    "description": "Style属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Style属性的数据类型",
                "type": "String"
            },
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7779,
            "description": "设置指定Client属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.setClientType",
            "params": [
                {
                    "name": "client",
                    "description": "Client属性名称",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数据类型",
                    "type": "String"
                }
            ],
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7787,
            "description": "设置指定Property属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.setPropertyType",
            "params": [
                {
                    "name": "property",
                    "description": "Property属性名称",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数据类型",
                    "type": "String"
                }
            ],
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7795,
            "description": "设置指定Style属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.setStyleType",
            "params": [
                {
                    "name": "style",
                    "description": "Style属性名称",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数据类型",
                    "type": "String"
                }
            ],
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7803,
            "description": "设置指定Client属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.setClientType",
            "params": [
                {
                    "name": "client",
                    "description": "Client属性名称",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数据类型",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7812,
            "description": "设置指定Property属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.setPropertyType",
            "params": [
                {
                    "name": "property",
                    "description": "Property属性名称",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数据类型",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7821,
            "description": "设置指定Style属性的数据类型",
            "itemtype": "method",
            "name": "twaver.SerializationSettings.setStyleType",
            "params": [
                {
                    "name": "style",
                    "description": "Style属性名称",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "数据类型",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7831,
            "description": "这个类中定义了TWaver中所有对象的样式",
            "itemtype": "property",
            "name": "constructor",
            "type": "Object",
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7838,
            "description": "获取指定Style属性的值",
            "itemtype": "method",
            "name": "twaver.Styles.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "Style属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定Style属性的值",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7847,
            "description": "获取所有Style属性名称的集合",
            "itemtype": "method",
            "name": "twaver.Styles.getStyleProperties",
            "return": {
                "description": "返回所有Style属性名称的集合",
                "type": "twaver.List"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7855,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.Styles.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7862,
            "description": "设置指定Style属性的值",
            "itemtype": "method",
            "name": "twaver.Styles.setStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "Style属性名称",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "Style属性值",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7872,
            "description": "这是一个工具类，提供了TWaver中常用的方法",
            "itemtype": "property",
            "name": "constructor",
            "type": "Object",
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7879,
            "description": "给HTML元素添加事件监听器",
            "itemtype": "method",
            "name": "twaver.Util.addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "事件类型",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "view",
                    "description": "HTML元素",
                    "type": "HTMLElement"
                },
                {
                    "name": "scope",
                    "description": "可选，回调函数的作用域，默认为null，即全局",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7890,
            "description": "计算线条上指定偏移量的点的坐标和角度",
            "itemtype": "method",
            "name": "twaver.Util.calculatePointAngleAlongLine",
            "params": [
                {
                    "name": "points",
                    "description": "点的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "segments",
                    "description": "点与点之间连线类型的集合, 可选值为lineto,",
                    "type": "twaver.List"
                },
                {
                    "name": "isSource",
                    "description": "是否在连线的起始端, 为true则为连线的起始端, 否则为连线的结束端",
                    "type": "Boolean"
                },
                {
                    "name": "xOffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回包含point(包含x和y属性的Object对象)和angle属性的Object对象",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7903,
            "description": "判断传入的X，Y坐标是否在rect的范围之内。",
            "itemtype": "method",
            "name": "twaver.Util.containsPoint",
            "params": [
                {
                    "name": "rect",
                    "description": "一个包含左上角的坐标点以及宽高的矩形对象。比如{x:10,y:10,width:100,height:100}",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "x坐标。x可以为Number，也可以为Object。当x为Number时，y值必填。当x为object时，需要传入的一个{x:10,y:10}带x，y变量的对象",
                    "type": "Object"
                },
                {
                    "name": "y",
                    "description": "y坐标。可选，当x为object时，y不需要赋值；当x为Number时，y必须要赋值",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "如果rect包含x，y坐标，返回true，否则返回false",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7914,
            "description": "创建一个画布对象",
            "itemtype": "method",
            "name": "twaver.Util.createCanvas",
            "return": {
                "description": "画布对象",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7922,
            "description": "创建一个DIV对象",
            "itemtype": "method",
            "name": "twaver.Util.createDiv",
            "return": {
                "description": "DIV对象",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7930,
            "description": "用指定样式画连线的箭头, 连线样式可以为:\narrow.standard    标准样式\narrow.delta          三角形\narrow.diamond    菱形\narrow.short         短小形\narrow.slant          斜角",
            "itemtype": "method",
            "name": "twaver.Util.drawArrow",
            "params": [
                {
                    "name": "g",
                    "description": "画布",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "arrowWidth",
                    "description": "箭头宽度",
                    "type": "Number"
                },
                {
                    "name": "arrowHeight",
                    "description": "箭头高度",
                    "type": "Number"
                },
                {
                    "name": "linePaths",
                    "description": "构成连线的点的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "isSrouce",
                    "description": "箭头是否在连线的起始端, 为true则为连线的起始端, 否则为连线的结束点",
                    "type": "Boolean"
                },
                {
                    "name": "arrowStyle",
                    "description": "箭头样式",
                    "type": "String"
                },
                {
                    "name": "drawBody",
                    "description": "箭头是否填充, 为true则填充, 否则不填充",
                    "type": "Boolean"
                },
                {
                    "name": "arrowColor",
                    "description": "箭头填充颜色",
                    "type": "String"
                },
                {
                    "name": "arrowXOffset",
                    "description": "箭头X坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "arrowYOffset",
                    "description": "箭头Y坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "lineWidth",
                    "description": "箭头边框宽度",
                    "type": "Number"
                },
                {
                    "name": "arrowOutlineColor",
                    "description": "箭头边框颜色",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7954,
            "description": "在给定的矩形范围中绘制指定的图形。指定图形形状的可选值为：\n'rectangle'：矩形，\n'oval'：椭圆形,\n'roundrect'：圆角矩形,\n'star'：星形,\n'triangle'：三角形, \n'circle'：圆形,\n'hexagon'：六边形,\n'pentagon'：五角形,\n'diamond'：菱形",
            "itemtype": "method",
            "name": "twaver.Util.drawVector",
            "params": [
                {
                    "name": "g",
                    "description": "CanvasRenderingContext2D对象，用于在canvas上绘图",
                    "type": "Object"
                },
                {
                    "name": "shape",
                    "description": "指定的图形形状。",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x坐标。x可以为Number，也可以为Object。当x为Number时，y值必填。当x为object时，需要传入的一个带x，y，width，height变量的对象，例如{x:10,y:10,width:100,height:100}",
                    "type": "Object"
                },
                {
                    "name": "y",
                    "description": "y坐标。可选，当x为object时，y不需要赋值；当x为Number时，y必须要赋值",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "矩形的宽度。可选，当x为object时w不需要赋值；当x为Number时，w必须要赋值",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "矩形的高度。可选，当x为object时，h不需要赋值；当x为Number时，h必须要赋值",
                    "type": "Number",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7976,
            "description": "指定的子类继承于父类",
            "itemtype": "method",
            "name": "twaver.Util.ext",
            "params": [
                {
                    "name": "subClass",
                    "description": "子类",
                    "type": "Object"
                },
                {
                    "name": "superClass",
                    "description": "父类",
                    "type": "Object"
                },
                {
                    "name": "o",
                    "description": "子类中重写或扩展的属性和方法",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 7986,
            "description": "给指定的矩形填充颜色，填充的颜色可以为渐变色，并可以指定渐变的类型。渐变类型的可选值为：\n'linear.southwest'：线性.南西\n'linear.southeast'：线性.南东\n'linear.northwest'：线性.北西\n'linear.northeast'：线性.北东\n'linear.north'：线性.北\n'linear.south'：线性.南\n'linear.west'：线性.西\n'linear.east'：线性.东\n'radial.center'：放射.中\n'radial.southwest'：放射.南西\n'radial.southeast'：放射.南东\n'radial.northwest'：放射.北西\n'radial.northeast'：放射.北东\n'radial.north'：放射.北\n'radial.south'：放射.南\n'radial.west'：放射.西\n'radial.east'：放射.东\n'spread.horizontal':扩展.水平\n'spread.vertical':扩展.垂直\n'spread.diagonal':扩展.对角线\n'spread.antidiagonal':扩展.反对角线\n'spread.north':扩展.北\n'spread.south':扩展.南\n'spread.west':扩展.西\n'spread.east':扩展.东",
            "itemtype": "method",
            "name": "twaver.Util.fill",
            "params": [
                {
                    "name": "g",
                    "description": "CanvasRenderingContext2D对象，用于在canvas上绘图",
                    "type": "Object"
                },
                {
                    "name": "fillColor",
                    "description": "填充的颜色值",
                    "type": "String"
                },
                {
                    "name": "gradient",
                    "description": "渐变类型",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "gradientColor",
                    "description": "渐变颜色值",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "x",
                    "description": "x坐标。x可以为Number，也可以为Object。当x为Number时，y值必填。当x为object时，需要传入的一个带x，y，width，height变量的对象，例如{x:10,y:10,width:100,height:100}",
                    "type": "Object"
                },
                {
                    "name": "y",
                    "description": "y坐标。可选，当x为object时，y不需要赋值；当x为Number时，y必须要赋值",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "矩形的宽度。可选，当x为object时w不需要赋值；当x为Number时，w必须要赋值",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "矩形的高度。可选，当x为object时，h不需要赋值；当x为Number时，h必须要赋值",
                    "type": "Number",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8026,
            "description": "获取所有类名",
            "itemtype": "method",
            "name": "twaver.Util.getAllClassNames",
            "return": {
                "description": "返回所有类名",
                "type": "Array"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8034,
            "description": "通过类名来获取类对象",
            "itemtype": "method",
            "name": "twaver.Util.getClass",
            "params": [
                {
                    "name": "className",
                    "description": "类名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "类的对象",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8043,
            "description": "获取指定HTML元素的指定样式的值",
            "itemtype": "method",
            "name": "twaver.Util.getCSSStyle",
            "params": [
                {
                    "name": "domObject",
                    "description": "HTML对象",
                    "type": "HTMLElement"
                },
                {
                    "name": "styleName",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式值",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8053,
            "description": "获取网元所占的区域",
            "itemtype": "method",
            "name": "twaver.Util.getElementsBounds",
            "params": [
                {
                    "name": "elements",
                    "description": "网元集合",
                    "type": "twaver.List"
                },
                {
                    "name": "network",
                    "description": "拓扑图",
                    "type": "twaver.network.Network"
                }
            ],
            "return": {
                "description": "返回指定网元所占的区域",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8063,
            "description": "获取渲染后的颜色",
            "itemtype": "method",
            "name": "twaver.Util.getFilterColor",
            "params": [
                {
                    "name": "sourceColor",
                    "description": "原始颜色",
                    "type": "String"
                },
                {
                    "name": "filterColor",
                    "description": "渲染色",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回染色后的颜色，包含r,g,b,a的对象",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8073,
            "description": "通过图片的名称来获取图片对象",
            "itemtype": "method",
            "name": "twaver.Util.getImageAsset",
            "params": [
                {
                    "name": "name",
                    "description": "图片的名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "图片对象",
                "type": "twaver.ImageAsset"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8082,
            "description": "获取指定点所在的边",
            "itemtype": "method",
            "name": "twaver.Util.getPointIndex",
            "params": [
                {
                    "name": "points",
                    "description": "包含点的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "tolerance",
                    "description": "误差值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定点所在的边",
                "type": "Number"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8093,
            "description": "获取两点之间的角度",
            "itemtype": "method",
            "name": "twaver.Util.getRadiansBetweenLines",
            "params": [
                {
                    "name": "from",
                    "description": "起始点",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "结束点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回两点之间的角度，单位为弧度",
                "type": "Number"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8103,
            "description": "返回包含指定点的矩形",
            "itemtype": "method",
            "name": "twaver.Util.getRect",
            "params": [
                {
                    "name": "points",
                    "description": "\"点\"的数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "返回包含指定点的矩形",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8112,
            "description": "获取所有注册名图片名称",
            "itemtype": "method",
            "name": "twaver.Util.getRegisteredImageNames",
            "return": {
                "description": "返回所有注册的图片名称",
                "type": "Array"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8120,
            "description": "获取网元所在的子网",
            "itemtype": "method",
            "name": "twaver.Util.getSubNetwork",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回网元所在的子网",
                "type": "twaver.SubNetwork"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8129,
            "description": "返回ToolTip所在的DIV",
            "itemtype": "method",
            "name": "twaver.Util.getToolTipDiv",
            "return": {
                "description": "返回ToolTip所在的DIV",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8137,
            "description": "返回网元的某个属性值",
            "itemtype": "method",
            "name": "twaver.Util.getValue",
            "params": [
                {
                    "name": "instance",
                    "description": "网元实例",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "属性名",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "属性类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回属性值",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8148,
            "description": "获取TWaver的版本号",
            "itemtype": "method",
            "name": "twaver.Util.getVersion",
            "return": {
                "description": "TWaver的版本号",
                "type": "String"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8156,
            "description": "将指定的矩形扩大一定的宽高值。这种扩大是矩形的中心点保持不变，像四周扩大指定值的宽度、高度。\n比如指定的矩形为{x:20,y:20,width:100;height:100},如果扩大的width为10，height为10，那么扩大后的矩形变为{x:10,y:10,width:120,height:120}",
            "itemtype": "method",
            "name": "twaver.Util.grow",
            "params": [
                {
                    "name": "rect",
                    "description": "指定扩大的矩形",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "扩大的宽度值",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "扩大的高度值",
                    "type": "Number"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8167,
            "description": "隐藏Tooltip",
            "itemtype": "method",
            "name": "twaver.Util.hideToolTip",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8174,
            "description": "判断指定的矩形区域是否相交",
            "itemtype": "method",
            "name": "twaver.Util.intersects",
            "params": [
                {
                    "name": "srcRect",
                    "description": "矩形区域, 包含x, y, width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "dstRect",
                    "description": "矩形区域, 包含x, y, width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果指定的区域相交, 则返回true, 否则返回false",
                "type": "Boolean"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8184,
            "description": "是否为Android，true为是Android，否则为false",
            "itemtype": "property",
            "name": "isAndroid",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8192,
            "description": "是否是Chrome浏览器，true为是Chrome浏览器，否则为false",
            "itemtype": "property",
            "name": "isChrome",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8200,
            "description": "是否正在进行反序列化操作，默认为false",
            "itemtype": "method",
            "name": "twaver.Util.isDeserializing",
            "return": {
                "description": "如果正在进行反序列化，返回true；否则返回false",
                "type": "Boolean"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8208,
            "description": "是否是Firefox浏览器，true为是Firefox浏览器，否则为false",
            "itemtype": "property",
            "name": "isFirefox",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8216,
            "description": "是否是IE浏览器，true为是IE浏览器，否则为false",
            "itemtype": "property",
            "name": "isIE",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8224,
            "description": "是否为IPad，true为是IPad,否则为false",
            "itemtype": "property",
            "name": "isIPad",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8232,
            "description": "是否为IPhone，true为是IPhone,否则为false",
            "itemtype": "property",
            "name": "isIPhone",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8240,
            "description": "是否为IPod，true为是IPod,否则为false",
            "itemtype": "property",
            "name": "isIPod",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8248,
            "description": "是否是Opera浏览器，true为是Opera浏览器，否则为false",
            "itemtype": "property",
            "name": "isOpera",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8256,
            "description": "是否是Safari浏览器，true为是Safari浏览器，否则为false",
            "itemtype": "property",
            "name": "isSafari",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8264,
            "description": "是否是可触摸的，true为是可触摸的，否则为false",
            "itemtype": "property",
            "name": "isTouchable",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8272,
            "description": "判断是否是某个类的子类",
            "itemtype": "method",
            "name": "twaver.Util.isTypeOf",
            "params": [
                {
                    "name": "type",
                    "description": "父类",
                    "type": "Object"
                },
                {
                    "name": "base",
                    "description": "基类",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果是子类则返回true，否则为false",
                "type": "Boolean"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8282,
            "description": "是否是WebOS，true为是WebOS，否则为false",
            "itemtype": "property",
            "name": "isWebOS",
            "type": "Boolean",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8290,
            "description": "偏移指定的一批网元",
            "itemtype": "method",
            "name": "twaver.Util.moveElements",
            "params": [
                {
                    "name": "elements",
                    "description": "需要偏移的网元集合",
                    "type": "twaver.List"
                },
                {
                    "name": "xoffset",
                    "description": "偏移的X坐标值",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "偏移的Y坐标值",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "是否需要动画",
                    "type": "Boolean"
                },
                {
                    "name": "finishFunction",
                    "description": "偏移完成时回调的函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8302,
            "description": "通过类名来实例化一个对象",
            "itemtype": "method",
            "name": "twaver.Util.newInstance",
            "params": [
                {
                    "name": "className",
                    "description": "类名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "实例化的对象",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8311,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.Util.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8318,
            "description": "注册自定义矢量绘制函数",
            "itemtype": "method",
            "name": "twaver.Util.registerDraw",
            "params": [
                {
                    "name": "name",
                    "description": "自定义矢量绘制函数名称",
                    "type": "String"
                },
                {
                    "name": "draw",
                    "description": "绘制函数：function (vector, g, data, view)",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8327,
            "description": "注册图片。当给网元设置图片时，需要先进行注册后才能使用",
            "itemtype": "method",
            "name": "twaver.Util.registerImage",
            "params": [
                {
                    "name": "name",
                    "description": "注册图片的名称",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "注册的图片对象",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "图片的宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "图片的高度",
                    "type": "Number"
                },
                {
                    "name": "svg",
                    "description": "是否为SVG图片",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8339,
            "description": "注册自定义矢量图形",
            "itemtype": "method",
            "name": "twaver.Util.registerShape",
            "params": [
                {
                    "name": "name",
                    "description": "矢量图形名称",
                    "type": "String"
                },
                {
                    "name": "shapeFunc",
                    "description": "绘制函数：function (g, shapeData, data, view)",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8348,
            "description": "注册样式'vector.shape'的可选值",
            "itemtype": "method",
            "name": "twaver.Util.registerVectorShape",
            "params": [
                {
                    "name": "name",
                    "description": "矢量图形名称",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "绘制函数：function (g, x, y, w, h)",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8357,
            "description": "移除HTML样式",
            "itemtype": "method",
            "name": "twaver.Util.removeCSSStyle",
            "params": [
                {
                    "name": "domObject",
                    "description": "HTML对象",
                    "type": "HTMLElement"
                },
                {
                    "name": "styleName",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8366,
            "description": "删除HTML元素的事件监听器",
            "itemtype": "method",
            "name": "twaver.Util.removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "事件类型",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "HTML元素",
                    "type": "HTMLElement"
                },
                {
                    "name": "scope",
                    "description": "可选，回调函数的作用域，默认为null，即全局",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8376,
            "description": "重置Tooltip",
            "itemtype": "method",
            "name": "twaver.Util.resetToolTip",
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8383,
            "description": "将画布以制定的区域的中心为原点，旋转指定的角度",
            "itemtype": "method",
            "name": "twaver.Util.rotateCanvas",
            "params": [
                {
                    "name": "g",
                    "description": "画布渲染上下文对象",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "矩形区域",
                    "type": "Object"
                },
                {
                    "name": "angle",
                    "description": "旋转角度，单位为度",
                    "type": "Number"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8393,
            "description": "设置指定Canvas的位置和宽高",
            "itemtype": "method",
            "name": "twaver.Util.setCanvas",
            "params": [
                {
                    "name": "c",
                    "description": "指定的Canvas对象",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "x",
                    "description": "画布的左边距像素值",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "画布的上边距像素值",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "画布的宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "画布的高度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回一个CanvasRenderingContext2D对象用于在canvas上绘图",
                "type": "CanvasRenderingContext2D"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8406,
            "description": "设置指定HTML对象的样式",
            "itemtype": "method",
            "name": "twaver.Util.setCSSStyle",
            "params": [
                {
                    "name": "domObject",
                    "description": "HTML对象",
                    "type": "HTMLElement"
                },
                {
                    "name": "styleName",
                    "description": "样式名称",
                    "type": "String"
                },
                {
                    "name": "styleValue",
                    "description": "样式值",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8416,
            "description": "将焦点设置到指定的对象上",
            "itemtype": "method",
            "name": "twaver.Util.setFocus",
            "params": [
                {
                    "name": "e",
                    "description": "设置焦点的对象",
                    "type": "HTMLElement"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8424,
            "description": "设置数据对象指定属性的值",
            "itemtype": "method",
            "name": "twaver.Util.setValue",
            "params": [
                {
                    "name": "instance",
                    "description": "数据对象实例",
                    "type": "twaver.Data"
                },
                {
                    "name": "property",
                    "description": "属性名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "属性值",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8434,
            "description": "显示Tooltip",
            "itemtype": "method",
            "name": "twaver.Util.showToolTip",
            "params": [
                {
                    "name": "eorp",
                    "description": "坐标或事件对象",
                    "type": "Object"
                },
                {
                    "name": "innerHTML",
                    "description": "tooltip内容",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8443,
            "description": "转换度为弧度",
            "itemtype": "method",
            "name": "twaver.Util.toDegrees",
            "params": [
                {
                    "name": "radian",
                    "description": "单位为弧度的角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回单位为度的角度",
                "type": "Number"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8452,
            "description": "将角度转换为弧度",
            "itemtype": "method",
            "name": "twaver.Util.toRadians",
            "params": [
                {
                    "name": "degree",
                    "description": "单位为度的角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回单位为弧度的角度",
                "type": "Number"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8461,
            "description": "以指定的偏移量，旋转角度，转换给定的坐标",
            "itemtype": "method",
            "name": "twaver.Util.transformPoint",
            "params": [
                {
                    "name": "point",
                    "description": "要转换的坐标，为包含x和y属性的对象",
                    "type": "Object"
                },
                {
                    "name": "angle",
                    "description": "旋转角度，单位为弧度",
                    "type": "Number"
                },
                {
                    "name": "xOffset",
                    "description": "水平偏移量",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "垂直偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "转换后的坐标",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8473,
            "description": "获取包含指定的两个矩形区域的矩形",
            "itemtype": "method",
            "name": "twaver.Util.unionRect",
            "params": [
                {
                    "name": "srcRect",
                    "description": "源矩形",
                    "type": "Object"
                },
                {
                    "name": "dstRect",
                    "description": "目标矩形",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回包含指定的两个矩形区域的矩形",
                "type": "Object"
            },
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8483,
            "description": "卸载注册的图片",
            "itemtype": "method",
            "name": "twaver.Util.unregisterImage",
            "params": [
                {
                    "name": "name",
                    "description": "图片的名称",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8491,
            "description": "验证license信息",
            "itemtype": "method",
            "name": "twaver.Util.validateLicense",
            "params": [
                {
                    "name": "license",
                    "description": "license的信息",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "twaver.SerializationSettings"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8510,
            "description": "获取附件透明度，默认值为1",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getAlpha",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8517,
            "description": "获取字符串类名",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8524,
            "description": "获取和附件关联的网元",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getElement",
            "return": {
                "description": "返回和附件关联的网元",
                "type": "twaver.Element"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8531,
            "description": "获取和附件关联的网元视图",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getElementUI",
            "return": {
                "description": "返回和附件关联的网元视图",
                "type": "twaver.canvas.ElementUI"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8538,
            "description": "获取附件的字体",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getFont",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回附件的字体",
                "type": "String"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8546,
            "description": "获取和附件关联的拓扑",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getNetwork",
            "return": {
                "description": "返回和附件关联的拓扑",
                "type": "twaver.canvas.Network"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8553,
            "description": "获取指定样式的值，封装了Element#getStyle方法",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式的值",
                "type": "Object"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8561,
            "description": "获取附件视图的位置及大小，值为包含x、y、width和height属性的Object对象",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getViewRect",
            "return": {
                "description": "返回附件视图的位置及大小，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8568,
            "description": "返回告警对象在缩放情况下的所占空间的大小的矩形",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.getZoomViewRect",
            "return": {
                "description": "矩形",
                "type": "Object"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8575,
            "description": "命中测试，判断点击指定坐标点是否能选中附件",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.hit",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "如果点击指定坐标能选中附件，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8584,
            "description": "命中测试，判断附件是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.hitCanvasRect",
            "params": [
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回附件是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8592,
            "description": "获取附件是否显示在最上层",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.isShowOnTop",
            "return": {
                "description": "返回附件是否显示在最上层",
                "type": "Boolean"
            },
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8599,
            "description": "绘制附件, 子类重载此方法绘制子类自己",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.paint",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8606,
            "description": "设置附件是否显示在最上层",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.setShowOnTop",
            "params": [
                {
                    "name": "t",
                    "description": "附件是否显示在最上层",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8613,
            "description": "更新属性, 并重新计算附件大小和位置",
            "itemtype": "method",
            "name": "twaver.vector.Attachment.validate",
            "class": "twaver.vector.Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8629,
            "description": "获取拓扑组件特定附件的尺寸缩放值",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.getAttachmentSizeZoom",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.vector.Attachment"
                }
            ],
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8637,
            "description": "获取类名",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.getClassName",
            "return": {
                "description": "字符",
                "type": "String"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8644,
            "description": "获取拓扑组件当前的Graphics缩放值",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.getGraphicsZoom",
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8651,
            "description": "获取拓扑组件当前的位置缩放值",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.getLocationZoom",
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8658,
            "description": "获取拓扑组件特定UI的尺寸缩放值",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.getSizeZoom",
            "params": [
                {
                    "name": "ui",
                    "description": "网元UI",
                    "type": "twaver.vector.ElementUI"
                }
            ],
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8666,
            "description": "获取拓扑组件的当前缩放值",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.getZoom",
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8673,
            "description": "判断网元的告警附件在特定zoom值下是否可见",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.isAlarmBalloonVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "布尔值",
                "type": "Boolean"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8681,
            "description": "判断网元的所有附件在特定zoom值下是否可见",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.isAttachmentVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "布尔值",
                "type": "Boolean"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8689,
            "description": "判断网元在特定zoom值下是否可见",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.isElementVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "布尔值",
                "type": "Boolean"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8697,
            "description": "判断网元的标签附件在特定zoom值下是否可见",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.isLabelVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "布尔值",
                "type": "Boolean"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8705,
            "description": "判断连线在特定zoom值下是否可见",
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.isLinkVisible",
            "params": [
                {
                    "name": "link",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "布尔值",
                "type": "Boolean"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8713,
            "itemtype": "method",
            "name": "twaver.vector.BaseZoomManager.limitZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.BaseZoomManager"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8731,
            "description": "添加附件，如果showInAttachmentDiv为true，则附件被添加到拓扑的附件层（attachmentDiv），否则附件被添加到网元视图上",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.addAttachment",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.network.Attachment"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8738,
            "description": "添加内容区域，所有内容区域合并后构成unionBodyBounds",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.addBodyBounds",
            "params": [
                {
                    "name": "rect",
                    "description": "区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8745,
            "description": "给指定区域添加阴影区域",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.appendShadowBound",
            "params": [
                {
                    "name": "part",
                    "description": "要添加阴影的对象",
                    "type": "Object"
                },
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "添加阴影后的区域",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8754,
            "description": "检查是否显示告警附件，如果Network#getAlarmLabel(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.checkAlarmAttachment",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8760,
            "description": "检查所有附件是否显示，网元刷新时（validate）被调用，包括告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.checkAttachments",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8766,
            "description": "检查是否显示编辑附件，如果此网元可选中（Network#isSelected(element)返回true），而且可编辑（Network#isEditable(element)返回true），而且此网元视图可编辑（isEditable()返回true），则显示，否则不显示",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.checkEditAttachment",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8772,
            "description": "检查是否显示图标组附件，如果Network#getIconsNames(element)返回null或者length为0，则不显示",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.checkIconsAttachment",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8778,
            "description": "检查是否显示标签二附件，如果Network#getLabel2(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.checkLabel2Attachment",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8784,
            "description": "检查是否显示标签附件，如果Network#getLabel(element)返回null或空字符串，则不显示",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.checkLabelAttachment",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8790,
            "description": "清除阴影",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.clearShadow",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8797,
            "description": "获取告警附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getAlarmAttachment",
            "return": {
                "description": "返回告警附件",
                "type": "twaver.network.AlarmAttachment"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8804,
            "description": "获取所有附件集合，包含告警AlarmAttachment、标签附件LabelAttachement、编辑附件EditAttachment和图标组附件IconsAttachment",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getAttachments",
            "return": {
                "description": "返回所有附件集合",
                "type": "twaver.List"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8811,
            "description": "获得内容区域，默认为createBodyRect返回的结果",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8818,
            "description": "获取该类字符串类名",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8825,
            "description": "获取指定样式的渲染颜色，如果innerColor不为空则返回innerColor，否则返回指定样式的值",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getDyeColor",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回渲染颜色",
                "type": "String"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8833,
            "description": "获取编辑附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getEditAttachment",
            "return": {
                "description": "返回编辑附件",
                "type": "twaver.network.EditAttachment"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8840,
            "description": "获取和网元视图关联的网元",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getElement",
            "return": {
                "description": "返回和网元视图关联的网元",
                "type": "twaver.Element"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8847,
            "description": "获取给定样式属性的值作为字体，如果指定样式的值是null，则返回twaver.Defaults.FONT",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getFont",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回字体",
                "type": "String"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8855,
            "description": "获取热点，用于定位附件等的位置",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getHotSpot",
            "return": {
                "description": "返回热点，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8862,
            "description": "获取图标组附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getIconsAttachment",
            "return": {
                "description": "返回图标组附件",
                "type": "twaver.network.IconsAttachment"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8869,
            "description": "获取网元填充色",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getInnerColor",
            "return": {
                "description": "返回网元填充色",
                "type": "String"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8876,
            "description": "获取标签附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getLabelAttachment",
            "return": {
                "description": "返回标签附件",
                "type": "twaver.network.LabelAttachment"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8883,
            "description": "获取和网元视图关联的拓扑",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getNetwork",
            "return": {
                "description": "返回和网元视图关联的拓扑",
                "type": "twaver.network.Network"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8890,
            "description": "获取网元边框颜色",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getOuterColor",
            "return": {
                "description": "返回网元边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8897,
            "description": "获取网元选中后阴影颜色",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getShadowColor",
            "return": {
                "description": "返回网元选中后阴影颜色",
                "type": "String"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8904,
            "description": "获取指定样式属性的值，封装了Element.getStyle",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "样式属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回指定样式属性的值",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8912,
            "description": "获取合并的内容区域",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getUnionBodyBounds",
            "return": {
                "description": "返回合并的内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8919,
            "description": "获取视图内容区域，包括unionBodyBounds和所有附件的区域",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.getViewRect",
            "return": {
                "description": "返回视图内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8926,
            "description": "和网元视图关联的网元属性变化时的处理函数，默认实现为调用invalidate方法让网元视图刷新",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.handlePropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8933,
            "description": "和网元视图关联的网元被选中或取消选中时的处理函数，默认实现为调用invalidate方法让网元视图刷新",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8940,
            "description": "命中测试，判断网元视图是否包含指定坐标",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.hit",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "网元视图是否包含指定坐标，则返回true，否者返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8949,
            "description": "网元是否包含指定坐标点",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.hitCanvasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回网元是否包含指定坐标点",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8958,
            "description": "网元是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.hitCanvasRect",
            "params": [
                {
                    "name": "r",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回网元是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8966,
            "description": "网元附件是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.hitCanvasRectAtAttachments",
            "params": [
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回网元附件是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8974,
            "description": "网元主体是否包含指定区域",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.hitCanvasRectAtBody",
            "params": [
                {
                    "name": "rect",
                    "description": "区域",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回网元主体是否包含指定区域",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8982,
            "description": "获取指定坐标下的视图对象，为附件或者网元视图本身",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定坐标下的视图对象，为附件或者网元视图本身",
                "type": "Object"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8991,
            "description": "判断网元视图是否和指定区域相交",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.intersects",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果网元视图包含指定矩形区域，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 8999,
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.invalidate",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9005,
            "description": "获取网元视图是否可编辑，默认值为true",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.isEditable",
            "return": {
                "description": "如果网元视图可编辑，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9012,
            "description": "判断是否需要设置阴影，默认实现是如果设置了阴影颜色，而且网元被被选中，而且select.style样式为shadow，则返回true，否则返回false",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.isShadowable",
            "return": {
                "description": "如果需要设置阴影，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9019,
            "description": "绘制网元视图",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.paint",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9026,
            "description": "绘制网元附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.paintAttachment",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "att",
                    "description": "附件",
                    "type": "twaver.canvas.Attachment"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9034,
            "description": "绘制网元所有附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.paintAttachments",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9041,
            "description": "绘制网元主体",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.paintBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9048,
            "description": "删除指定附件",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.removeAttachment",
            "params": [
                {
                    "name": "attachment",
                    "description": "附件",
                    "type": "twaver.network.Attachment"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9055,
            "description": "设置热点，用于定位附件等的位置",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.setHotSpot",
            "params": [
                {
                    "name": "value",
                    "description": "热点，值为包含x和y属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9062,
            "description": "给指定画布元素设置阴影效果",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.setShadow",
            "params": [
                {
                    "name": "part",
                    "description": "网元视图（ElementUI）或者附件（Attachment）",
                    "type": "Object"
                },
                {
                    "name": "canvas",
                    "description": "画布元素",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "rect",
                    "description": "画图大小及位置，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "画布渲染内容",
                "type": "CanvasRenderingContext2D"
            },
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9072,
            "description": "更新样式",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.updateStyle",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9078,
            "description": "此方法被Network调用，用以重画网元视图内容，此内部检查所有附件是否可见（checkAttachments），并调用updateMeasure方法重画网元内容，最后调用附件的updateMeasure方法，让附件重画",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.validate",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9084,
            "description": "更新视图",
            "itemtype": "method",
            "name": "twaver.vector.ElementUI.validateImpl",
            "class": "twaver.vector.ElementUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9100,
            "description": "批量添加事件监听器，参数个数不限，类型为String，值为所有合法的事件类型：比如mousedown，mouseup；此方法会查找函数名为\"handle_\"加\"事件类型\"（handle_mousedown，handle_mousedown）的函数，作为指定事件类型的回调函数。此方法一般在setUp方法里被调用",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.addListener",
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9106,
            "description": "获取缩放和便宜后的矩形对象",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.convertFromUIToMarkerRect",
            "params": [
                {
                    "name": "vr",
                    "description": "矩形对象",
                    "type": "Object"
                },
                {
                    "name": "xoff",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoff",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回缩放和便宜后的矩形对象",
                "type": "Object"
            },
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9116,
            "description": "获取缩放和平移后的坐标点",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.convertPointFromView",
            "params": [
                {
                    "name": "p",
                    "description": "坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缩放和平移后的坐标点",
                "type": "Object"
            },
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9124,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9131,
            "description": "获取鼠标点所在的位置",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.getMarkerPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标点所在的位置",
                "type": "Object"
            },
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9139,
            "description": "返回两个坐标点直接的偏移，考虑了逻辑缩放的影响",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.getOffset",
            "params": [
                {
                    "name": "newPoint",
                    "description": "坐标点",
                    "type": "Object"
                },
                {
                    "name": "lastPoint",
                    "description": "坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "坐标点",
                "type": "Object"
            },
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9148,
            "description": "绘制交互模式",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.paint",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9155,
            "description": "批量删除事件监听器，参数个数不限，类型为String，值为所有合法的事件类型：比如mousedown，mouseup；此方法会删除指定事件类型的函数名为\"hanle_\"加\"事件类型\"（handle_mousedown，handle_mousedown）的监听器。此方法一般在tearDown方法里被调用",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.removeListener",
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9161,
            "description": "重绘交互模式",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.repaint",
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9167,
            "description": "初始化交互处理器，一般调用addListener方法添加鼠标、键盘以及触摸事件监听器；Network#setInteractions会调用此方法",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.setUp",
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9173,
            "description": "销毁交互处理器，一般调用removeListener方法删除鼠标、键盘以及触摸事件监听器；使用Network#setInteractions切换交互处理器时会调用此方法撤销旧的交互处理器",
            "itemtype": "method",
            "name": "twaver.vector.interaction.BaseInteraction.tearDown",
            "class": "twaver.vector.interaction.BaseInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9189,
            "description": "清除拖动鼠标和松开鼠标监听",
            "itemtype": "method",
            "name": "twaver.vector.OverviewInteraction.clear",
            "class": "twaver.vector.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9195,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.vector.OverviewInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.vector.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9202,
            "description": "按下鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.vector.OverviewInteraction.handleMousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9209,
            "description": "拖动鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.vector.OverviewInteraction.handleMousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9216,
            "description": "松开鼠标时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.vector.OverviewInteraction.handleMouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.OverviewInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9233,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.vector.OverviewMSTouchInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.vector.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9240,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.vector.OverviewMSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9247,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.vector.OverviewMSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9254,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.vector.OverviewMSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.OverviewMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9271,
            "description": "清除拖动鼠标和松开鼠标监听",
            "itemtype": "method",
            "name": "twaver.vector.OverviewTouchInteraction.clear",
            "class": "twaver.vector.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9277,
            "description": "获取此类的字符串类名",
            "itemtype": "method",
            "name": "twaver.vector.OverviewTouchInteraction.getClassName",
            "return": {
                "description": "返回类名",
                "type": "String"
            },
            "class": "twaver.vector.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9284,
            "description": "触摸结束时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.vector.OverviewTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9291,
            "description": "触摸移动时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.vector.OverviewTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9298,
            "description": "触摸开始时执行的处理函数",
            "itemtype": "method",
            "name": "twaver.vector.OverviewTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.OverviewTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9319,
            "description": "将XML字符串反序列化到数据容器中的指定对象上，如果rootParent为空，则序列化到数据容器中",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.deserialize",
            "params": [
                {
                    "name": "xmlString",
                    "description": "XML字符串",
                    "type": "String"
                },
                {
                    "name": "rootParent",
                    "description": "反序列化时的根对象，如果为空，则序列化到数据容器中",
                    "type": "twaver.Data",
                    "optional": true
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9327,
            "description": "从指定的XML字符串中反序列化某个对象的Client属性",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.deserializeClientXml",
            "params": [
                {
                    "name": "instance",
                    "description": "反序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "xml",
                    "description": "XML字符串",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "反序列化的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9336,
            "description": "从指定的XML字符串中反序列化某个对象的Property属性",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.deserializePropertyXml",
            "params": [
                {
                    "name": "instance",
                    "description": "反序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "xml",
                    "description": "XML字符串",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "反序列化的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9345,
            "description": "从指定的XML字符串中反序列化某个对象的Style属性",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.deserializeStyleXml",
            "params": [
                {
                    "name": "instance",
                    "description": "反序列化的对象",
                    "type": "Object"
                },
                {
                    "name": "xml",
                    "description": "XML字符串",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "反序列化的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9354,
            "description": "从XML字符串中反序列化属性值",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.deserializeValue",
            "params": [
                {
                    "name": "xml",
                    "description": "XML字符串",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "属性的类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "属性值",
                "type": "String"
            },
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9363,
            "description": "获取类的名称",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.getClassName",
            "return": {
                "description": "类名",
                "type": "String"
            },
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9370,
            "description": "初始化数据容器中数据对象的ref值，ref值是TWaver序列化时内部使用的属性",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.initRefs",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9377,
            "description": "是否需要序列化指定的对象",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.isSerializable",
            "params": [
                {
                    "name": "data",
                    "description": "序列化的对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为序列化，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9385,
            "description": "序列化相关的数据容器",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serialize",
            "return": {
                "description": "XML字符串",
                "type": "String"
            },
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9392,
            "description": "序列化数据容器的主体部分，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serializeBody",
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9398,
            "description": "将对象的Client属性序列化成XML字符串",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serializeClientXml",
            "params": [
                {
                    "name": "instance",
                    "description": "序列化的数据对象",
                    "type": "Object"
                },
                {
                    "name": "client",
                    "description": "Client属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "新的实例化对象。用于和instance对象比较，如果序列化的Client属性值相等，就不需要序列化这个属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9407,
            "description": "序列化数据对象",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serializeData",
            "params": [
                {
                    "name": "data",
                    "description": "序列化的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9414,
            "description": "将对象的Property属性序列化成XML字符串",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serializePropertyXml",
            "params": [
                {
                    "name": "instance",
                    "description": "序列化的数据对象",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "Property属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "新的实例化对象。用于和instance对象比较，如果序列化的Property属性值相等，就不需要序列化这个属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9423,
            "description": "将对象的Style属性序列化成XML字符串",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serializeStyleXml",
            "params": [
                {
                    "name": "instance",
                    "description": "序列化的数据对象",
                    "type": "Object"
                },
                {
                    "name": "style",
                    "description": "Style属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "新的实例化对象。用于和instance对象比较，如果序列化的Style属性值相等，就不需要序列化这个属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9432,
            "description": "序列化对象的某个属性",
            "itemtype": "method",
            "name": "twaver.XmlSerializer.serializeValue",
            "params": [
                {
                    "name": "c",
                    "description": "属性的类型。它的可选值为“c”,\"p\"或者“s”,代表着数据的Client属性，Property属性和Style属性",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "序列化的属性名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "序列化的属性值",
                    "type": "String"
                },
                {
                    "name": "newInstanceValue",
                    "description": "新的实例化对象的属性值",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "序列化属性的类型。可选值为：'cdata','data','point','list.point','list.string','list.number','rectangle'",
                    "type": "String"
                }
            ],
            "class": "twaver.XmlSerializer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9470,
            "description": "减少一个网元(TWaver内部使用)",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.decrease",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9477,
            "description": "销毁告警统计，比如网元更改事件的监听器，网元属性更改事件的监听器",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.dispose",
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9483,
            "description": "派发网元告警统计状态的更改事件。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.fireAlarmStateChange",
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9489,
            "description": "获取指定告警级别的确认告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.getAcknowledgedAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "指定的告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "确认告警的数量",
                "type": "Number"
            },
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9497,
            "description": "获取绑定的网元容器",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.getElementBox",
            "return": {
                "description": "网元容器对象",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9504,
            "description": "获取告警统计的过滤器，这个过滤器用于过滤哪些网元或哪些告警可以不计入统计范围。默认为空，也就是统计网元容器中所有网元的告警都计入统计范围",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.getFilterFunction",
            "return": {
                "description": "告警统计的过滤器",
                "type": "Function"
            },
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9511,
            "description": "获取指定告警级别的新发告警的数量",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.getNewAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "指定的告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "新发告警的数量",
                "type": "Number"
            },
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9519,
            "description": "获取指定告警级别的告警统计的总数信息，包括新发告警的数量，确认告警的数量和两者总数量",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.getSumInfo",
            "params": [
                {
                    "name": "severity",
                    "description": "指定的告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "告警统计的总数信息",
                "type": "Object"
            },
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9527,
            "description": "获取指定告警级别的告警总数量",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.getTotalAlarmCount",
            "params": [
                {
                    "name": "severity",
                    "description": "指定的告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "return": {
                "description": "告警级别的告警总数量",
                "type": "Number"
            },
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9535,
            "description": "当网元容器发生变化时。TWaver内部会调用此方法",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.handleElementBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "网元容器发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9542,
            "description": "当网元容器中网元的属性发生变化时调用此方法",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.handleElementPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "网元属性变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9549,
            "description": "增加一个网元，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.increase",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9556,
            "description": "设置所有的告警统计的数量为零",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.reset",
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9562,
            "description": "设置绑定的网元容器",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.setElementBox",
            "params": [
                {
                    "name": "box",
                    "description": "网元容器对象",
                    "type": "twaver.ElementBox"
                }
            ],
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9569,
            "description": "设置告警统计的过滤器，这个过滤器用于过滤哪些网元或哪些告警可以不参考统计，默认为空，也就是统计网元容器中所有网元的告警",
            "itemtype": "method",
            "name": "twaver.AlarmStateStatistics.setFilterFunction",
            "params": [
                {
                    "name": "f",
                    "description": "告警统计的过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.AlarmStateStatistics"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9606,
            "description": "动画每帧执行的动作，子类重载此方法以实现自定义逻辑",
            "itemtype": "method",
            "name": "twaver.animate.AnimateProperty.currentAction",
            "params": [
                {
                    "name": "obj",
                    "description": "需要更改属性的对象",
                    "type": "Object"
                },
                {
                    "name": "oldValue",
                    "description": "旧值",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "新值",
                    "type": "Object"
                },
                {
                    "name": "rate",
                    "description": "动画完成进度",
                    "type": "Number"
                }
            ],
            "class": "twaver.animate.AnimateProperty"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9616,
            "description": "获取指定对象的指定属性",
            "itemtype": "method",
            "name": "twaver.animate.AnimateProperty.getPropertyValue",
            "params": [
                {
                    "name": "obj",
                    "description": "需要更改属性的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.animate.AnimateProperty"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9728,
            "description": "计算附件位置和大小",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.calculateMeasure",
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9734,
            "description": "获取附件画线时线条两端的样式, 默认值为twaver.Defaults.ATTACHMENT_CAP(butt), 可选值为butt(无端点)，round(圆头端点)或 square(方头端点)",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getCap",
            "return": {
                "description": "返回画线时, 线条两端的样式",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9741,
            "description": "获取附件内容高度，默认值为twaver.Defaults.ATTACHMENT_CONTENT_HEIGHT(20)",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getContentHeight",
            "return": {
                "description": "返回附件内容高度",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9748,
            "description": "获取附件内容区域",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getContentRect",
            "return": {
                "description": "返回附件内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9755,
            "description": "获取附件内容宽度，默认值为twaver.Defaults.ATTACHMENT_CONTENT_HEIGHT（30）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getContentWidth",
            "return": {
                "description": "返回附件内容宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9762,
            "description": "获取附件圆角半径，默认值为twaver.Defaults.ATTACHMENT_CORNER_RADIUS（5）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getCornerRadius",
            "return": {
                "description": "返回附件圆角半径",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9769,
            "description": "获取附件箭头的显示方位，一般用于告警冒泡，默认值为twaver.Defaults.ATTACHMENT_DIRECTION（right），可选值为：\naboveleft 附件箭头在上左角\naboveright 附件箭头在上右角\nbelowleft 附件箭头在下左角\nbelowright 附件箭头在下右角\nleftabove 附件箭头在左上角\nleftbelow 附件箭头在左下角\nrightabove 附件箭头在右上角\nrightbelow 附件箭头在右下角\nabove 附件箭头在上边\nbelow 附件箭头在下边\nleft 附件箭头在左边\nright 附件箭头在右边",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getDirection",
            "return": {
                "description": "返回附件箭头的显示方位",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9788,
            "description": "获取附件填充颜色，默认值为twaver.Defaults.ATTACHMENT_FILL_COLOR（#000000）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getFillColor",
            "return": {
                "description": "返回附件填充颜色",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9795,
            "description": "获取附件渐进色填充样式，默认值为twaver.Defaults.ATTACHMENT_GRADIENT（null），null表示不使用填充渐进色，可选值为：\nlinear.east, linear.north, linear.northeast, linear.northwest, linear.south, linear.southeast, linear.southwest, linear.west, none, radial.center, radial.east, radial.north, radial.northeast, radial.northwest, radial.south, radial.southeast, radial.southwest, radial.west, spread.antidiagonal, spread.diagonal, spread.east, spread.horizontal, spread.north, spread.south, spread.vertical, spread.west",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getGradient",
            "return": {
                "description": "返回附件渐进色填充样式",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9803,
            "description": "获取附件填充渐进色，默认值为twaver.Defaults.ATTACHMENT_GRADIENT_COLOR（#FFFFFF）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getGradientColor",
            "return": {
                "description": "返回附件填充渐进色",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9810,
            "description": "获取附件在画线时的线条连接点样式，默认值为twaver.Defaults.ATTACHMENT_JOIN（miter），可选值为bevel（斜角连接）round（圆角连接）和miter（尖角连接）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getJoin",
            "return": {
                "description": "返回附件在画线时的线条连接点样式",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9817,
            "description": "获取附件边框颜色，默认值为twaver.Defaults.ATTACHMENT_OUTLINE_COLOR（#000000）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getOutlineColor",
            "return": {
                "description": "返回附件边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9824,
            "description": "获取附件边框宽度，默认值为twaver.Defaults.ATTACHMENT_OUTLINE_WIDTH（-1），-1代表无边框",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getOutlineWidth",
            "return": {
                "description": "返回附件边框宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9831,
            "description": "获取附件内容和边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPadding",
            "return": {
                "description": "返回附件内容和边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9838,
            "description": "获取附件内容和下边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_BOTTOM（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPaddingBottom",
            "return": {
                "description": "返回附件内容和下边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9845,
            "description": "获取附件内容和左边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_LEFT（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPaddingLeft",
            "return": {
                "description": "返回附件内容和左边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9852,
            "description": "获取附件内容和右边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_RIGHT（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPaddingRight",
            "return": {
                "description": "附件内容和右边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9859,
            "description": "获取附件内容和上边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_TOP（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPaddingTop",
            "return": {
                "description": "返回附件内容和上边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9866,
            "description": "获取附件箭头长度，默认值为twaver.Defaults.ATTACHMENT_POINTER_LENGTH（10）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPointerLength",
            "return": {
                "description": "返回附件箭头长度",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9873,
            "description": "获取附件箭头宽度，默认值为ATTACHMENT_POINTER_WIDTH（8）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPointerWidth",
            "return": {
                "description": "返回附件箭头宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9880,
            "description": "获取附件位置，默认值为twaver.Defaults.ATTACHMENT_POSITION（topright.topright）\n可选值为\nhotspot\nfrom\nto\ntopleft.topleft\ntopleft.topright\ntop.top\ntopright.topleft\ntopright.topright\ntopleft\ntop\ntopright\ntopleft.bottomleft\ntopleft.bottomright\ntop.bottom\ntopright.bottomleft\ntopright.bottomright\nleft.left\nleft\nleft.right\ncenter\nright.left\nright\nright.right\nbottomleft.topleft\nbottomleft.topright\nbottom.top\nbottomright.topleft\nbottomright.topright\nbottomleft\nbottom\nbottomright\nbottomleft.bottomleft\nbottomleft.bottomright\nbottom.bottom\nbottomright.bottomleft\nbottomright.bottomright",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getPosition",
            "return": {
                "description": "返回附件位置",
                "type": "String"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9924,
            "description": "获取附件圆角区域",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getRoundRect",
            "return": {
                "description": "返回附件圆角区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9931,
            "description": "获取附件x轴偏移量，默认值为twaver.Defaults.ATTACHMENT_XOFFSET（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getXOffset",
            "return": {
                "description": "返回附件的x轴偏移量",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9938,
            "description": "获取附件y轴偏移量，默认值为twaver.Defaults.ATTACHMENT_YOFFSET（0）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.getYOffset",
            "return": {
                "description": "返回附件y轴偏移量",
                "type": "Number"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9945,
            "description": "获取附件是否有填充背景，默认值为twaver.Defaults.ATTACHMENT_FILL（false）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.isFill",
            "return": {
                "description": "返回附件是否有填充背景",
                "type": "Boolean"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9952,
            "description": "获取附件选中时是否有阴影效果，默认值为twaver.Defaults.ATTACHMENT_SHADOWABLE（false）",
            "itemtype": "method",
            "name": "twaver.canvas.BasicAttachment.isShadowable",
            "return": {
                "description": "返回附件选中时是否有阴影效果",
                "type": "Boolean"
            },
            "class": "twaver.canvas.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9973,
            "description": "画ShapeLink和ShapeNode的控制点",
            "itemtype": "method",
            "name": "twaver.canvas.EditAttachment.paintEditPoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.EditAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9980,
            "description": "画8个更改网元大小的控制点",
            "itemtype": "method",
            "name": "twaver.canvas.EditAttachment.paintResizingPoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.EditAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 9987,
            "description": "绘制旋转点",
            "itemtype": "method",
            "name": "twaver.canvas.EditAttachment.paintRotatePoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.EditAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10008,
            "description": "获取附件选中时是否有阴影效果，默认值为twaver.Defaults.ATTACHMENT_SHADOWABLE(false)",
            "itemtype": "method",
            "name": "twaver.canvas.IconsAttachment.isShadowable",
            "return": {
                "description": "返回附件选中时是否有阴影效果",
                "type": "Boolean"
            },
            "class": "twaver.canvas.IconsAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10048,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateElementInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.CreateElementInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10085,
            "description": "创建连线结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.clear",
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10091,
            "description": "创建连线",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.createLink",
            "return": {
                "description": "连线",
                "type": "twaver.Link"
            },
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10098,
            "description": "获取当前鼠标下的节点，并作为将要创建的连线的起始节点",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.getFromNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10106,
            "description": "获取鼠标下的节点",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.getNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10114,
            "description": "获取当前鼠标下的节点，并作为将要创建的连线的结束节点",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.getToNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10122,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10129,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10136,
            "description": "从起始点画线到鼠标当前点",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateLinkInteraction.paintLine",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10174,
            "description": "创建多边形结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateShapeNodeInteraction.clear",
            "class": "twaver.canvas.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10180,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateShapeNodeInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10187,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.CreateShapeNodeInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10207,
            "description": "处理键盘按下事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.DefaultInteraction.handle_keydown",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.canvas.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10214,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.DefaultInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10221,
            "description": "处理鼠标点击",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.DefaultInteraction.handleClicked",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.canvas.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10229,
            "description": "处理鼠标双击",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.DefaultInteraction.handleDoubleClicked",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.canvas.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10251,
            "description": "编辑结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.clear",
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10257,
            "description": "获取点离直线的距离",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.getDistanceFromPointToLine",
            "params": [
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "point1",
                    "description": "线段顶点1",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "线段顶点2",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回点离直线的距离",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10267,
            "description": "获取指定点所在的边索引",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.getPointIndex",
            "params": [
                {
                    "name": "points",
                    "description": "坐标点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "closed",
                    "description": "是否闭合",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "返回指定点所在的边索引",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10277,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10284,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10291,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10298,
            "description": "获取指定点是否在线段上",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.isPointOnLine",
            "params": [
                {
                    "name": "point",
                    "description": "坐标点",
                    "type": "Object"
                },
                {
                    "name": "point1",
                    "description": "线段顶点1",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "线段顶点2",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "线段宽度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定点是否在线段上",
                "type": "Boolean"
            },
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10309,
            "description": "显示旋转刻度",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.EditInteraction.showRotateScale",
            "class": "twaver.canvas.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10337,
            "description": "获取放大镜背景颜色",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getBackgroundColor",
            "return": {
                "description": "返回放大镜背景颜色，默认为白色",
                "type": "String"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10344,
            "description": "获取边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getBorderColor",
            "return": {
                "description": "返回边框颜色，默认为黑色",
                "type": "String"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10351,
            "description": "获取边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getBorderWidth",
            "return": {
                "description": "返回边框宽度，默认为1",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10358,
            "description": "获取放大镜形状",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getShape",
            "return": {
                "description": "返回放大镜形状，默认为圆形",
                "type": "String"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10365,
            "description": "获取x轴半径",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getXRadius",
            "return": {
                "description": "返回x轴半径，默认为100",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10372,
            "description": "获取y轴半径",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getYRadius",
            "return": {
                "description": "返回y轴半径",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10379,
            "description": "获取缩放级别",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.getZoom",
            "return": {
                "description": "返回缩放级别，默认为2",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10386,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10393,
            "description": "设置放大镜背景颜色",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setBackgroundColor",
            "params": [
                {
                    "name": "value",
                    "description": "放大镜背景颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10400,
            "description": "设置边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setBorderColor",
            "params": [
                {
                    "name": "value",
                    "description": "边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10407,
            "description": "设置边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setBorderWidth",
            "params": [
                {
                    "name": "value",
                    "description": "边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10414,
            "description": "设置放大镜形状",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setShape",
            "params": [
                {
                    "name": "value",
                    "description": "放大镜形状",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10421,
            "description": "设置x轴半径",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setXRadius",
            "params": [
                {
                    "name": "value",
                    "description": "x轴半径",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10428,
            "description": "设置y轴半径",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setYRadius",
            "params": [
                {
                    "name": "value",
                    "description": "y轴半径",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10435,
            "description": "设置缩放级别",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MagnifyInteraction.setZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10456,
            "description": "移动结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.end",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10463,
            "description": "处理键盘按下事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.handle_keydown",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10470,
            "description": "处理键盘弹起事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.handle_keyup",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10477,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10484,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10491,
            "description": "处理鼠标移出事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.handle_mouseout",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10498,
            "description": "处理鼠标弹起，结束网元移动",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10505,
            "description": "获取是否正在设置父亲",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.isParenting",
            "return": {
                "description": "返回是否正在设置父亲",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10512,
            "description": "键盘P键按下时，鼠标移动到网元上时的处理函数",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MoveInteraction.parentProcess",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "released",
                    "description": "键盘P键是否按下",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10533,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MSTouchInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10540,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MSTouchInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10547,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MSTouchInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10554,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10561,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10568,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.MSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10588,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.PanInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.PanInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10595,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.PanInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.PanInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10602,
            "description": "处理鼠标弹起",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.PanInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.PanInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10622,
            "description": "获取滚动条颜色",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.getScrollBarColor",
            "return": {
                "description": "返回滚动条颜色，默认为#cccccc",
                "type": "String"
            },
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10629,
            "description": "获取滚动条宽度",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.getScrollBarWidth",
            "return": {
                "description": "返回滚动条宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10636,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10643,
            "description": "处理鼠标移出事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handle_mouseout",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10650,
            "description": "处理鼠标移入事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handle_mouseover",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10657,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10664,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handleMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10671,
            "description": "处理鼠标滚轮事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handleMouseWheel",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10678,
            "description": "处理拓扑图大小变化事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.handleViewRectChange",
            "params": [
                {
                    "name": "e",
                    "description": "拓扑图事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10685,
            "description": "绘制圆角矩形",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.paintRoundRect",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "fillStyle",
                    "description": "填充色",
                    "type": "String"
                },
                {
                    "name": "alpha",
                    "description": "透明度",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "高度",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "圆角半径",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10699,
            "description": "沿x轴方向平移",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.scrollXOffset",
            "params": [
                {
                    "name": "left",
                    "description": "是否向左平移",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10706,
            "description": "沿y轴方向平移",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.scrollYOffset",
            "params": [
                {
                    "name": "up",
                    "description": "是否向上平移",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10713,
            "description": "重新绘制滚动条",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.ScrollInteraction.validateScrollBar",
            "class": "twaver.canvas.interaction.ScrollInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10737,
            "description": "框选结束时，选中网元",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.SelectInteraction.end",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10744,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.SelectInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10751,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.SelectInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10758,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.SelectInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10765,
            "description": "处理鼠标弹起",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.SelectInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.canvas.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10785,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.TouchInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10792,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.TouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10799,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.TouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10806,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.canvas.interaction.TouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.canvas.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10827,
            "description": "检查连线捆绑标签附件",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.checkLinkHandlerAttachment",
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10833,
            "description": "创建连线内容区域，默认为热点周围一个像素的矩形",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.createBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10840,
            "description": "生成构成连线的点的集合",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.createLinkPoints",
            "return": {
                "description": "返回构成连线的点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10847,
            "description": "画线，drawBody方法调用此方法画线",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.drawLinePoints",
            "params": [
                {
                    "name": "g",
                    "description": "画布渲染内容",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "points",
                    "description": "由点构成的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "width",
                    "description": "线条宽度",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10857,
            "description": "获取连线的角度",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getAngle",
            "return": {
                "description": "返回连线的角度",
                "type": "Number"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10864,
            "description": "获取控制点，控制点用于劈分正交直角连线",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getControlPoint",
            "return": {
                "description": "返回控制点坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10871,
            "description": "获取连线起始坐标",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getFromPoint",
            "return": {
                "description": "返回连线起始坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10878,
            "description": "获取偏移后的起始坐标",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getFromPosition",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回偏移后的起始坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10887,
            "description": "获取Link的长度",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getLineLength",
            "return": {
                "description": "返回Link的长度",
                "type": "Number"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10894,
            "description": "获取连线捆绑标签附件",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getLinkHandlerAttachment",
            "return": {
                "description": "返回连线捆绑标签附件",
                "type": "twaver.network.Attachment"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10901,
            "description": "获取构成连线的点的集合",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getLinkPoints",
            "return": {
                "description": "返回构成连线的点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10908,
            "description": "获取连线结束坐标",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getToPoint",
            "return": {
                "description": "返回连线结束坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10915,
            "description": "获取偏移后的结束坐标",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.getToPosition",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回偏移后的结束坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10924,
            "description": "设置控制点，控制点用于劈分正交直角连线",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.setControlPoint",
            "params": [
                {
                    "name": "point",
                    "description": "控制点坐标，值为包含x和y属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10931,
            "description": "刷新连线视图所占的区域",
            "itemtype": "method",
            "name": "twaver.canvas.LinkUI.validateBodyBounds",
            "class": "twaver.canvas.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10951,
            "description": "创建节点内容区域，默认为网元节点的x坐标、y坐标、宽度和高度组成",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.createBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10958,
            "description": "用图片填充节点内容区域",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.drawDefaultBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10965,
            "description": "画边框",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.drawOuterBorder",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10972,
            "description": "画路径",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.drawPath",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "prefix",
                    "description": "前缀",
                    "type": "String"
                },
                {
                    "name": "padding",
                    "description": "内边距",
                    "type": "Number"
                },
                {
                    "name": "pattern",
                    "description": "线条虚线样式",
                    "type": "Array"
                },
                {
                    "name": "points",
                    "description": "点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "segments",
                    "description": "点与点之间连接类型集合",
                    "type": "twaver.List"
                },
                {
                    "name": "close",
                    "description": "是否闭合",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10985,
            "description": "节点被选中时，画选中边框",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.drawSelectBorder",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10992,
            "description": "当body.type为vector或default.vector时，用矢量图形填充节点内容",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.drawVectorBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 10999,
            "description": "获取网元视图主体边界",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.getDefaultBodyRect",
            "return": {
                "description": "返回网元视图主体边界",
                "type": "Object"
            },
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11006,
            "description": "获取外边框边界",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.getOuterBorderRect",
            "return": {
                "description": "返回外边框边界",
                "type": "Object"
            },
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11013,
            "description": "获取路径边界",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.getPathRect",
            "params": [
                {
                    "name": "prefix",
                    "description": "前缀",
                    "type": "String"
                },
                {
                    "name": "padding",
                    "description": "内边距",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回路径边界",
                "type": "Object"
            },
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11022,
            "description": "获取选中边框边界",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.getSelectBorderRect",
            "return": {
                "description": "返回选中边框边界",
                "type": "Object"
            },
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11029,
            "description": "获取矢量边界",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.getVectorBody",
            "return": {
                "description": "返回矢量边界",
                "type": "Object"
            },
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11036,
            "description": "重新计算网元主体边界",
            "itemtype": "method",
            "name": "twaver.canvas.NodeUI.validateBodyBounds",
            "class": "twaver.canvas.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11054,
            "description": "添加HTML元素缓存池",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.addPool",
            "params": [
                {
                    "name": "pool",
                    "description": "HTML元素缓存池",
                    "type": "twaver.Pool"
                }
            ],
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11061,
            "description": "设置组件新的位置以及大小，twaver布局管理器（twaver.controls.SplitPane等）在大小变化时会调用此方法",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.adjustBounds",
            "params": [
                {
                    "name": "rect",
                    "description": "新的位置以及大小，值为包含x、y、width和height属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11068,
            "description": "获取组件的HTML元素",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.getView",
            "return": {
                "description": "返回组件的HTML元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11075,
            "description": "无效组件，在等待指定毫秒数后，刷新组件（调用validate方法）,当组件属性更改后，须调用此方法，让组件重画",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.invalidate",
            "params": [
                {
                    "name": "delay",
                    "description": "延迟刷新等待的毫秒数，可选，默认为twaver.Defaults.CALL_LATER_DELAY",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11082,
            "description": "删除HTML元素缓存池",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.removePool",
            "params": [
                {
                    "name": "pool",
                    "description": "HTML元素缓存池",
                    "type": "twaver.Pool"
                }
            ],
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11089,
            "description": "重画组件，调用invalidate后，此方法会被调用",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.validate",
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11095,
            "description": "调用validate方法后，此方法会被调用，子类须重载此方法以重画组件",
            "itemtype": "method",
            "name": "twaver.controls.ControlBase.validateImpl",
            "class": "twaver.controls.ControlBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11114,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseMSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.ListBaseMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11121,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseMSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.ListBaseMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11128,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.ListBaseMSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.ListBaseMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11148,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetMSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11155,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetMSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11162,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheetMSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.controls.PropertySheetMSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11186,
            "description": "在父亲数据下添加孩子数据，index为添加的孩子数据的顺序号，树中同层下的孩子顺序可以通过这个参数来控制。默认为空，添加在最后一个位置",
            "itemtype": "method",
            "name": "twaver.Data.addChild",
            "params": [
                {
                    "name": "child",
                    "description": "添加的孩子数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "index",
                    "description": "添加的孩子数据的顺序，树中的同层下的孩子顺序是通过这个参数来控制的。默认为空，也就是添加在最后一个位置",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "添加成功返回true，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11195,
            "description": "清除这个数据下所有的孩子。注意，这个方法只是切断它们之间的父子关系，并不会从DataBox中将孩子数据删除",
            "itemtype": "method",
            "name": "twaver.Data.clearChildren",
            "return": {
                "description": "true为操作成功，false为操作失败",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11202,
            "description": "反序列化JSON数据到数据对象的自定义属性",
            "itemtype": "method",
            "name": "twaver.Data.deserializeClientJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据",
                    "type": "String"
                },
                {
                    "name": "clientProp",
                    "description": "自定义的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11211,
            "description": "反序列化XML数据到数据对象的自定义属性值",
            "itemtype": "method",
            "name": "twaver.Data.deserializeClientXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML的序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "clientXML",
                    "description": "XML数据片段",
                    "type": "String"
                },
                {
                    "name": "clientProp",
                    "description": "自定义属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11220,
            "description": "将JSON数据反序列化为数据对象",
            "itemtype": "method",
            "name": "twaver.Data.deserializeJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11228,
            "description": "反序列化JSON数据到数据对象的自身属性",
            "itemtype": "method",
            "name": "twaver.Data.deserializePropertyJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据片段",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "数据自身属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11237,
            "description": "反序列化XML数据到数据对象的自身属性",
            "itemtype": "method",
            "name": "twaver.Data.deserializePropertyXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "propertyXML",
                    "description": "XML数据片段",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "数据自身属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11246,
            "description": "将XML数据反序列化为数据对象",
            "itemtype": "method",
            "name": "twaver.Data.deserializeXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "xml",
                    "description": "XML数据",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11254,
            "description": "获取某个序号值上的孩子对象",
            "itemtype": "method",
            "name": "twaver.Data.getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "数据的顺序值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "孩子数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11262,
            "description": "获取这个数据对象下的所有孩子对象",
            "itemtype": "method",
            "name": "twaver.Data.getChildren",
            "return": {
                "description": "孩子对象的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11269,
            "description": "获取数据对象下孩子的数量",
            "itemtype": "method",
            "name": "twaver.Data.getChildrenSize",
            "return": {
                "description": "孩子数据的数量",
                "type": "Number"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11276,
            "description": "获取自定义的属性，Client属性一般用于存放用户自定在数据对象上的属性",
            "itemtype": "method",
            "name": "twaver.Data.getClient",
            "params": [
                {
                    "name": "clientProp",
                    "description": "自定义的属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回属性值",
                "type": "Object"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11284,
            "description": "获取所有自定义的属性名。Client属性一般用于存放用户自定在数据对象上的属性",
            "itemtype": "method",
            "name": "twaver.Data.getClientProperties",
            "return": {
                "description": "自定义属性的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11291,
            "description": "得到这个数据的图标，图标是用于在树上显示的。",
            "itemtype": "method",
            "name": "twaver.Data.getIcon",
            "return": {
                "description": "返回图标的名称",
                "type": "String"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11298,
            "description": "得到数据的ID，ID是用于唯一标识数据对象的，在同一个数据容器中的数据ID不能重复",
            "itemtype": "method",
            "name": "twaver.Data.getId",
            "return": {
                "description": "数据的ID编号",
                "type": "Object"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11305,
            "description": "获取数据对象的名称",
            "itemtype": "method",
            "name": "twaver.Data.getName",
            "return": {
                "description": "数据对象的名称值",
                "type": "String"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11312,
            "description": "获取数据对象的名称2",
            "itemtype": "method",
            "name": "twaver.Data.getName2",
            "return": {
                "description": "返回数据对象的名称2",
                "type": "String"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11319,
            "description": "获取数据对象的父亲，每个数据对象只能有一个父亲节点",
            "itemtype": "method",
            "name": "twaver.Data.getParent",
            "return": {
                "description": "父亲对象",
                "type": "twaver.Data"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11326,
            "description": "获取数据对象的悬浮标签，悬浮标签是用于在视图上显示的，比如network，tree，table。悬浮标签在视图上显示片刻便会消失。",
            "itemtype": "method",
            "name": "twaver.Data.getToolTip",
            "return": {
                "description": "数据对象的悬浮标签内容",
                "type": "String"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11333,
            "description": "判断这个数据对象下是否有孩子对象",
            "itemtype": "method",
            "name": "twaver.Data.hasChildren",
            "return": {
                "description": "true为有孩子对象，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11340,
            "description": "IClient标志",
            "itemtype": "property",
            "name": "IClient",
            "type": "Boolean",
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11347,
            "description": "IData属性标志，默认为true，表明这个对象是IData的类型。",
            "itemtype": "property",
            "name": "IData",
            "type": "Boolean",
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11354,
            "description": "判断是否是指定数据对象的子孙节点",
            "itemtype": "method",
            "name": "twaver.Data.isDescendantOf",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为子孙节点，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11362,
            "description": "判断是否是指定数据对象的父亲",
            "itemtype": "method",
            "name": "twaver.Data.isParentOf",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为指定数据对象的父亲，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11370,
            "description": "判断是否和指定数据对象有关联关系，如果这个数据是指定数据对象的子孙或者指定数据对象是这个数据的子孙都称为有关联关系",
            "itemtype": "method",
            "name": "twaver.Data.isRelatedTo",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为有关联关系，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11378,
            "description": "实例化数据对象",
            "itemtype": "method",
            "name": "twaver.Data.newInstance",
            "return": {
                "description": "数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11385,
            "description": "添加完孩子成功后会回调这个方法",
            "itemtype": "method",
            "name": "twaver.Data.onChildAdded",
            "params": [
                {
                    "name": "child",
                    "description": "添加的孩子对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "index",
                    "description": "孩子添加的顺序",
                    "type": "Number"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11393,
            "description": "删除指定孩子对象时会回调这个方法",
            "itemtype": "method",
            "name": "twaver.Data.onChildRemoved",
            "params": [
                {
                    "name": "child",
                    "description": "删除的孩子对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "index",
                    "description": "删除的孩子对象的顺序序号",
                    "type": "Number"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11401,
            "description": "清除所有指定孩子对象时会回调这个方法",
            "itemtype": "method",
            "name": "twaver.Data.onChildrenCleared",
            "params": [
                {
                    "name": "children",
                    "description": "清除的孩子对象集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11408,
            "description": "当数据对象的Client属性发生更改时会回调此方法",
            "itemtype": "method",
            "name": "twaver.Data.onClientChanged",
            "params": [
                {
                    "name": "clientProp",
                    "description": "属性名",
                    "type": "String"
                },
                {
                    "name": "oldValue",
                    "description": "原值",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "新值",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11417,
            "description": "当数据对象的父亲发生更改时回调此方法",
            "itemtype": "method",
            "name": "twaver.Data.onParentChanged",
            "params": [
                {
                    "name": "oldParent",
                    "description": "数据对象原来的父亲节点",
                    "type": "twaver.Data"
                },
                {
                    "name": "parent",
                    "description": "数据对象新的父亲节点",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11425,
            "description": "删除指定的孩子对象",
            "itemtype": "method",
            "name": "twaver.Data.removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "指定的孩子对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回true表示删除成功，false为删除失败",
                "type": "Boolean"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11433,
            "description": "序列化数据元素的自定义属性到JSON片段",
            "itemtype": "method",
            "name": "twaver.Data.serializeClientJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "clientPrope",
                    "description": "数据对象的自定义属性名",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11443,
            "description": "序列化数据元素的自定义属性到XML片段",
            "itemtype": "method",
            "name": "twaver.Data.serializeClientXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "clientPrope",
                    "description": "自定义的属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11452,
            "description": "将数据元素序列化成JSON片段",
            "itemtype": "method",
            "name": "twaver.Data.serializeJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11461,
            "description": "序列化数据元素属性到JSON片段",
            "itemtype": "method",
            "name": "twaver.Data.serializePropertyJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "property",
                    "description": "序列化的属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11471,
            "description": "序列化数据元素属性到XML片段",
            "itemtype": "method",
            "name": "twaver.Data.serializePropertyXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "property",
                    "description": "数据元素的属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11480,
            "description": "将数据元素序列化成XML片段",
            "itemtype": "method",
            "name": "twaver.Data.serializeXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11488,
            "description": "设置自定义的属性的值",
            "itemtype": "method",
            "name": "twaver.Data.setClient",
            "params": [
                {
                    "name": "clientProp",
                    "description": "自定义属性的名称",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "自定义属性的值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "数据对象本身",
                "type": "twaver.Data"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11497,
            "description": "设置数据元素的Icon。Icon和Image是类似的，但需要注意，Icon一般是在树上显示的，而Image是在network上显示的。",
            "itemtype": "method",
            "name": "twaver.Data.setIcon",
            "params": [
                {
                    "name": "v",
                    "description": "数据元素的Icon名称",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11504,
            "description": "设置数据元素的名称",
            "itemtype": "method",
            "name": "twaver.Data.setName",
            "params": [
                {
                    "name": "v",
                    "description": "数据元素的名称",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11511,
            "description": "设置数据对象的名称2",
            "itemtype": "method",
            "name": "twaver.Data.setName2",
            "params": [
                {
                    "name": "v",
                    "description": "数据对象的名称2",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11518,
            "description": "设置数据元素的父亲，每个数据元素只能设置一个父亲",
            "itemtype": "method",
            "name": "twaver.Data.setParent",
            "params": [
                {
                    "name": "parent",
                    "description": "父亲数据元素",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11525,
            "description": "设置悬浮标签的显示内容。当鼠标移至数据元素时，视图上就会显示这个悬浮标签一段时间。",
            "itemtype": "method",
            "name": "twaver.Data.setToolTip",
            "params": [
                {
                    "name": "v",
                    "description": "悬浮标签显示的内容",
                    "type": "String"
                }
            ],
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11532,
            "description": "根据指定的函数，将数据元素的孩子转换成List集合",
            "itemtype": "method",
            "name": "twaver.Data.toChildren",
            "params": [
                {
                    "name": "matchFunction",
                    "description": "指定的函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "函数的作用域，为空时指的是window",
                    "type": "String"
                }
            ],
            "return": {
                "description": "孩子数据的集合",
                "type": "String"
            },
            "class": "twaver.Data"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11556,
            "description": "往数据容器中添加一个数据",
            "itemtype": "method",
            "name": "twaver.DataBox.add",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "index",
                    "description": "添加的数据次序。为空时，就将这个数据添加在最后的位置",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11564,
            "description": "添加数据容器的数据增减变化的监听器。当数据容器中的数据发生改变时（增加，删除，清空），就可以通过此方法监听",
            "itemtype": "method",
            "name": "twaver.DataBox.addDataBoxChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元更改事件的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "是否添加在最前方，如果为空，则添加在最后一个位置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11573,
            "description": "添加数据容器中数据的属性更改事件的监听器。当数据容器中的数据属性发生变化时，比如网元位置，网元名称等，都可以通过此方法来监听",
            "itemtype": "method",
            "name": "twaver.DataBox.addDataPropertyChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元属性更改事件的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "是否添加在最前方，如果为空，则添加在最后一个位置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11582,
            "description": "添加数据的层次变化的监听器，当数据层次发生时，比如上移，下移，移至顶部，底部，会派发出层次变化的事件，就可以通过这个方法来监听到",
            "itemtype": "method",
            "name": "twaver.DataBox.addHierarchyChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "数据的层次变化的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "是否添加在最前方，如果为空，则添加在最后一个位置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11591,
            "description": "清空数据容器中所有的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.clear",
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11597,
            "description": "判断是否包含某个数据",
            "itemtype": "method",
            "name": "twaver.DataBox.contains",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为包含，false不包含",
                "type": "Boolean"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11605,
            "description": "通过数据ID判断是否包含某个数据",
            "itemtype": "method",
            "name": "twaver.DataBox.containsById",
            "params": [
                {
                    "name": "id",
                    "description": "数据的ID编号",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true为包含，false不包含",
                "type": "Boolean"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11613,
            "description": "反序列化JSON数据到数据容器的Client属性",
            "itemtype": "method",
            "name": "twaver.DataBox.deserializeClientJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据片段",
                    "type": "String"
                },
                {
                    "name": "clientProp",
                    "description": "Client属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11622,
            "description": "反序列化XML数据到数据容器的Client属性",
            "itemtype": "method",
            "name": "twaver.DataBox.deserializeClientXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "clientXML",
                    "description": "XML数据片段",
                    "type": "String"
                },
                {
                    "name": "clientProp",
                    "description": "Client属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11631,
            "description": "反序列化JSON数据到数据容器，包含数据容器的Client属性，Property属性。",
            "itemtype": "method",
            "name": "twaver.DataBox.deserializeJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11639,
            "description": "反序列化JSON数据到数据容器的自身（property）属性",
            "itemtype": "method",
            "name": "twaver.DataBox.deserializePropertyJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "数据容器的属性名称",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11648,
            "description": "反序列化XML数据到数据容器的自身（property）属性",
            "itemtype": "method",
            "name": "twaver.DataBox.deserializePropertyXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "propertyXML",
                    "description": "XML数据",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "数据容器的属性名称",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11657,
            "description": "反序列化XML数据到数据容器，包含数据容器的Client数据，Property属性",
            "itemtype": "method",
            "name": "twaver.DataBox.deserializeXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "xml",
                    "description": "XML数据",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11665,
            "description": "遍历数据容器中的所有数据",
            "itemtype": "method",
            "name": "twaver.DataBox.forEach",
            "params": [
                {
                    "name": "f",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11673,
            "description": "广度优先遍历数据容器中指定数据的所有子孙数据。如果指定数据为空时，就会遍历数据容器中的所有数据",
            "itemtype": "method",
            "name": "twaver.DataBox.forEachByBreadthFirst",
            "params": [
                {
                    "name": "callbackFunction",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "遍历的数据对象，为空时会遍历数据容器中的所有数据",
                    "type": "twaver.Data",
                    "optional": true
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11682,
            "description": "深度优先遍历数据容器中指定数据的所有子孙数据。如果指定数据为空时，就会遍历数据容器中的所有数据",
            "itemtype": "method",
            "name": "twaver.DataBox.forEachByDepthFirst",
            "params": [
                {
                    "name": "callbackFunction",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "遍历的数据对象，为空时会遍历数据容器中的所有数据",
                    "type": "twaver.Data",
                    "optional": true
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11691,
            "description": "反序遍历数据容器中所有数据",
            "itemtype": "method",
            "name": "twaver.DataBox.forEachReverse",
            "params": [
                {
                    "name": "f",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11699,
            "description": "根据Client属性名，获取对应的属性值。\nClient属性是用于存放用户自定义的属性",
            "itemtype": "method",
            "name": "twaver.DataBox.getClient",
            "params": [
                {
                    "name": "clientProp",
                    "description": "Client属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Client属性值",
                "type": "Object"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11708,
            "description": "获取数据容器中所有的Client属性名。\nClient属性是用于存放用户自定义的属性",
            "itemtype": "method",
            "name": "twaver.DataBox.getClientProperties",
            "return": {
                "description": "所有的Client属性名的集合",
                "type": "twaver.List"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11716,
            "description": "获取数据容器中某个序号上的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.getDataAt",
            "params": [
                {
                    "name": "index",
                    "description": "数据的序号",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11724,
            "description": "根据数据的ID编号获取对应的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.getDataById",
            "params": [
                {
                    "name": "id",
                    "description": "数据的ID编号",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11732,
            "description": "获取数据容器中的所有数据",
            "itemtype": "method",
            "name": "twaver.DataBox.getDatas",
            "return": {
                "description": "所有数据的集合",
                "type": "twaver.List"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11739,
            "description": "获取数据容器的图标，图标一般是用于在树上显示的",
            "itemtype": "method",
            "name": "twaver.DataBox.getIcon",
            "return": {
                "description": "图标名称",
                "type": "String"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11746,
            "description": "获取数据容器的上限数。默认为-1，是没有上限的，一旦设置了上限数，当添加的数据数量大于这个上限数时，TWaver就会删除最旧的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.getLimit",
            "return": {
                "description": "数据容器的上限数",
                "type": "Number"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11753,
            "description": "获取数据容器的名称",
            "itemtype": "method",
            "name": "twaver.DataBox.getName",
            "return": {
                "description": "数据容器的名称",
                "type": "String"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11760,
            "description": "获取数据容器中所有根下的数据。根下的数据指的是没有父亲的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.getRoots",
            "return": {
                "description": "所有根下数据的集合",
                "type": "twaver.List"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11767,
            "description": "获取数据容器中的选择容器。选择容器用于存放所有选中的数据对象，更详细的解释请参看SelectionModel类",
            "itemtype": "method",
            "name": "twaver.DataBox.getSelectionModel",
            "return": {
                "description": "选中数据的容器",
                "type": "twaver.SelectionModel"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11774,
            "description": "获取指定数据在兄弟数据中的序号",
            "itemtype": "method",
            "name": "twaver.DataBox.getSiblingIndex",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "数据对象的序号",
                "type": "Number"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11782,
            "description": "获取指定数据的所有兄弟数据",
            "itemtype": "method",
            "name": "twaver.DataBox.getSiblings",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "所有兄弟数据的集合",
                "type": "twaver.List"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11790,
            "description": "获取数据容器提示信息的内容，提示信息是在视图上显示的，当鼠标停留在数据容器上一段时间后，提示信息就消失",
            "itemtype": "method",
            "name": "twaver.DataBox.getToolTip",
            "return": {
                "description": "提示信息中显示的内容",
                "type": "String"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11797,
            "description": "处理数据容器中数据的属性更改的函数。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.DataBox.handleDataPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "属性更改的事件对象，包含所有更改的信息",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11804,
            "description": "是否是IClient的标识",
            "itemtype": "property",
            "name": "IClient",
            "type": "Boolean",
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11811,
            "description": "判断数据容器是否为空。当数据容器中没有数据时返回true，否则返回false",
            "itemtype": "method",
            "name": "twaver.DataBox.isEmpty",
            "return": {
                "description": "当数据容器中没有数据时返回true，否则返回false",
                "type": "String"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11818,
            "description": "将某个数据下移一个序号。一般数据容器和树或表格绑定时使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序",
            "itemtype": "method",
            "name": "twaver.DataBox.moveDown",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11826,
            "description": "将选中的网元下移一个位置。一般在树和表格中使用\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变。",
            "itemtype": "method",
            "name": "twaver.DataBox.moveSelectionDown",
            "params": [
                {
                    "name": "sm",
                    "description": "选择容器。如果为空，则使用的是DataBox中的SelectionModel",
                    "type": "twaver.SelectionModel",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11834,
            "description": "将选中的网元下移至最底部。一般在树和表格中使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变。",
            "itemtype": "method",
            "name": "twaver.DataBox.moveSelectionToBottom",
            "params": [
                {
                    "name": "sm",
                    "description": "选择容器。如果为空，则使用的是DataBox中的SelectionModel",
                    "type": "twaver.SelectionModel",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11842,
            "description": "将选中的网元上移至最顶部。一般在树和表格中使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变",
            "itemtype": "method",
            "name": "twaver.DataBox.moveSelectionToTop",
            "params": [
                {
                    "name": "sm",
                    "description": "选择容器。如果为空，则使用的是DataBox中的SelectionModel",
                    "type": "twaver.SelectionModel",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11850,
            "description": "将选中的网元上移一个位置。一般在树和表格中使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变",
            "itemtype": "method",
            "name": "twaver.DataBox.moveSelectionUp",
            "params": [
                {
                    "name": "sm",
                    "description": "选中网元的容器。如果为空，则使用的是DataBox中的SelectionModel",
                    "type": "twaver.SelectionModel",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11858,
            "description": "将指定数据移到指定的序号上。一般在绑定的数据容器的树或表格中使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变",
            "itemtype": "method",
            "name": "twaver.DataBox.moveTo",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "newIndex",
                    "description": "数据的序号",
                    "type": "Number"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11867,
            "description": "将某个数据移至最下方。一般数据容器和树或表格绑定时使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变",
            "itemtype": "method",
            "name": "twaver.DataBox.moveToBottom",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11875,
            "description": "将某个数据移至最上方。一般数据容器和树或表格绑定时使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变。",
            "itemtype": "method",
            "name": "twaver.DataBox.moveToTop",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11883,
            "description": "将某个数据上移一个序号。一般数据容器和树或表格绑定时使用。\n注意：数据是在同层次上移动，也就是在兄弟姐妹中的顺序会改变",
            "itemtype": "method",
            "name": "twaver.DataBox.moveUp",
            "params": [
                {
                    "name": "data",
                    "description": "数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11891,
            "description": "通过类名来实例化数据容器的对象。传入的参数是不固定的，可以是1-7个参数",
            "itemtype": "method",
            "name": "twaver.DataBox.newInstance",
            "return": {
                "description": "数据容器对象",
                "type": "twaver.DataBox"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11898,
            "description": "当数据容器的Client属性发生变化时，回调此方法。默认的方法没有任何实现体，子类可以重写这个方法去处理自己的业务",
            "itemtype": "method",
            "name": "twaver.DataBox.onClientChanged",
            "params": [
                {
                    "name": "clientProp",
                    "description": "更改的Client属性名称",
                    "type": "String"
                },
                {
                    "name": "oldValue",
                    "description": "Client属性的原值",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "Client属性的新值",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11907,
            "description": "当数据容器中数据的属性发生变化时，回调此方法。默认的方法没有任何实现体，子类可以重写这个方法去处理自己的业务",
            "itemtype": "method",
            "name": "twaver.DataBox.onDataPropertyChanged",
            "params": [
                {
                    "name": "data",
                    "description": "更改属性的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "e",
                    "description": "属性更改的事件对象，包含所有更改的信息",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11915,
            "description": "从数据容器中删除某个数据",
            "itemtype": "method",
            "name": "twaver.DataBox.remove",
            "params": [
                {
                    "name": "data",
                    "description": "删除的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11922,
            "description": "通过数据的ID编号从数据容器中删除该数据",
            "itemtype": "method",
            "name": "twaver.DataBox.removeById",
            "params": [
                {
                    "name": "id",
                    "description": "数据对象的编号",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11929,
            "description": "移除数据容器的数据增减变化的监听器",
            "itemtype": "method",
            "name": "twaver.DataBox.removeDataBoxChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元更改事件监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11937,
            "description": "移除数据容器中数据的属性更改事件的监听器",
            "itemtype": "method",
            "name": "twaver.DataBox.removeDataPropertyChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元属性更改事件的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11945,
            "description": "从数据容器中删除第一个数据",
            "itemtype": "method",
            "name": "twaver.DataBox.removeFirst",
            "params": [
                {
                    "name": "count",
                    "description": "数据容器的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11952,
            "description": "移除数据的层次变化的监听器",
            "itemtype": "method",
            "name": "twaver.DataBox.removeHierarchyChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "数据的层次变化的监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11960,
            "description": "删除所有选中的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.removeSelection",
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11966,
            "description": "序列化数据容器的Client属性到JSON数据",
            "itemtype": "method",
            "name": "twaver.DataBox.serializeClientJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "clientPrope",
                    "description": "Client属性名",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11976,
            "description": "序列化数据容器的Client属性到XML数据",
            "itemtype": "method",
            "name": "twaver.DataBox.serializeClientXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "clientPrope",
                    "description": "Client属性名",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.DataBox"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11985,
            "description": "序列化数据容器到JSON数据，包含数据容器的Client数据，Property属性",
            "itemtype": "method",
            "name": "twaver.DataBox.serializeJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 11994,
            "description": "序列化数据容器的自身（property）属性到JSON数据",
            "itemtype": "method",
            "name": "twaver.DataBox.serializePropertyJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "property",
                    "description": "数据容器的属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "数据容器实例对象",
                    "type": "twaver.DataBox"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12004,
            "description": "序列化数据容器的自身（property）属性到XML数据",
            "itemtype": "method",
            "name": "twaver.DataBox.serializePropertyXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "property",
                    "description": "数据容器的属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "数据容器的实例对象",
                    "type": "twaver.DataBox"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12013,
            "description": "序列化数据容器到XML数据，包含数据容器的Client数据，Property属性",
            "itemtype": "method",
            "name": "twaver.DataBox.serializeXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "newInstance",
                    "description": "数据容器的实例对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12021,
            "description": "设置指定的client属性对应的属性值。\nclient属性是用于存放用户自定义的属性",
            "itemtype": "method",
            "name": "twaver.DataBox.setClient",
            "params": [
                {
                    "name": "clientProp",
                    "description": "Client属性名称",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "Client属性的值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "数据容器对象本身",
                "type": "twaver.DataBox"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12031,
            "description": "设置数据容器的图标，图标一般是用在树上显示的",
            "itemtype": "method",
            "name": "twaver.DataBox.setIcon",
            "params": [
                {
                    "name": "v",
                    "description": "图标名称",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12038,
            "description": "设置数据容器的上限数。默认为-1，是没有显示的，一旦设置了上限数，当添加的数据数量大于这个上限数时，TWaver就会删除最旧的数据",
            "itemtype": "method",
            "name": "twaver.DataBox.setLimit",
            "params": [
                {
                    "name": "limit",
                    "description": "数据容器的上限数",
                    "type": "Number"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12045,
            "description": "设置数据容器的名称",
            "itemtype": "method",
            "name": "twaver.DataBox.setName",
            "params": [
                {
                    "name": "v",
                    "description": "数据容器的名称",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12052,
            "description": "设置数据容器的提示信息的内容，提示信息是在视图上显示的，当鼠标停留在数据容器上一段时间后，提示信息就消失",
            "itemtype": "method",
            "name": "twaver.DataBox.setToolTip",
            "params": [
                {
                    "name": "v",
                    "description": "提示信息中显示的内容",
                    "type": "String"
                }
            ],
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12059,
            "description": "数据容器的大小，也就是容器中数据的数量",
            "itemtype": "method",
            "name": "twaver.DataBox.size",
            "return": {
                "description": "数据容器的大小",
                "type": "Number"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12066,
            "description": "将数据容器中的数据转成集合",
            "itemtype": "method",
            "name": "twaver.DataBox.toDatas",
            "params": [
                {
                    "name": "matchFunction",
                    "description": "转换成List集合时回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是window",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "数据集合",
                "type": "twaver.List"
            },
            "class": "twaver.DataBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12088,
            "description": "将给定节点居中显示",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.centerNode",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node",
                    "optional": true
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12095,
            "description": "创建指定节点的控制点",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.createControlPoint",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "返回包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12103,
            "description": "获取停止阀值，当转动速度低于最小值时，布局停止转动，默认值为0.01",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getCeaseLimit",
            "return": {
                "description": "返回停止阀值",
                "type": "Number"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12110,
            "description": "获取停止速度，布局以此速率停止转动，默认值为0.9",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getCeaseRate",
            "return": {
                "description": "返回停止速度",
                "type": "Number"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12117,
            "description": "获取参与布局的节点数",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getCount",
            "return": {
                "description": "返回参与布局的节点数",
                "type": "Number"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12124,
            "description": "获取布局时间间隔，单位为毫秒，默认值为50毫秒",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getInterval",
            "return": {
                "description": "返回布局时间间隔，单位为毫秒",
                "type": "Number"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12131,
            "description": "获取布局区域",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getLayoutRect",
            "return": {
                "description": "返回布局区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12138,
            "description": "获取鼠标移动处理方法，默认值为null",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getMouseMoveFunction",
            "return": {
                "description": "返回鼠标移动处理方法",
                "type": "Function"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12145,
            "description": "获取鼠标移出处理方法，默认值为null",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getMouseOverFunction",
            "return": {
                "description": "返回鼠标移出处理方法",
                "type": "Function"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12152,
            "description": "获取转动速率，默认值为2",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getMoveSpeed",
            "return": {
                "description": "返回转动速率",
                "type": "Number"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12159,
            "description": "获取关联的拓扑对象",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getNetwork",
            "return": {
                "description": "返回关联的拓扑对象",
                "type": "twaver.network.Network"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12166,
            "description": "获取边界间隙大小比例，默认值为0.2",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getPercentPadding",
            "return": {
                "description": "返回边界间隙大小比例",
                "type": "Number"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12173,
            "description": "获取更新节点函数，默认值为null",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.getUpdateNodeFunction",
            "return": {
                "description": "返回更新节点函数",
                "type": "Function"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12180,
            "description": "处理拓扑网元容器变化事件",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleDataBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "拓扑网元容器变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12187,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12194,
            "description": "处理鼠标进入事件",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleMouseOver",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12201,
            "description": "处理拓扑属性变化事件",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleNetworkPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "属性变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12208,
            "description": "处理拓扑大小变化事件",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleResize",
            "params": [
                {
                    "name": "e",
                    "description": "拓扑视图刷新事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12215,
            "description": "处理鼠标移出事件",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleRollOut",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12222,
            "description": "选中变化处理函数，默认调用centerNode方法将最后选中的网元居中显示",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选中变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12229,
            "description": "获取布局是否处于激活状态",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isActive",
            "return": {
                "description": "是否为激活状态",
                "type": "Boolean"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12236,
            "description": "判断节点是否在中心位置",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isAtCenter",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                },
                {
                    "name": "perspective",
                    "description": "立体透视度",
                    "type": "Number"
                },
                {
                    "name": "cx",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "y坐标",
                    "type": "Number"
                },
                {
                    "name": "cz",
                    "description": "z坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "如果节点居中，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12248,
            "description": "获取是否以椭圆方式布局，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isElliptical",
            "return": {
                "description": "返回是否以椭圆方式布局",
                "type": "Boolean"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12255,
            "description": "判断节点是否可以参与布局，不可见和不可移动的节点不参与布局",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isLayoutable",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "如果节点可以参与布局，则返回true，否则返回false",
                "type": "String"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12263,
            "description": "获取网元容器变化后，是否重新加载网元，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isReloadOnDataBoxChanged",
            "return": {
                "description": "返回网元容器变化后，是否重新加载网元",
                "type": "Boolean"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12270,
            "description": "判断布局是否正在进行中",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isRunning",
            "return": {
                "description": "如果正在布局，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12277,
            "description": "获取拓扑大小变化后，是否重新布局，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.isUpdateLayoutRectOnResized",
            "return": {
                "description": "返回拓扑大小变化后，是否重新布局",
                "type": "Boolean"
            },
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12284,
            "description": "拓扑网元容器中网元变化后，重新加载网元",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.reload",
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12290,
            "description": "设置布局是否处于激活状态，鼠标移动会让布局处于激活状态",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setActive",
            "params": [
                {
                    "name": "v",
                    "description": "是否为激活状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12297,
            "description": "设置停止阀值，当转动速度低于阀值时，布局停止转动，默认值为0.01",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setCeaseLimit",
            "params": [
                {
                    "name": "v",
                    "description": "停止阀值",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12304,
            "description": "设置停止速度，布局以此速率停止转动，默认值为0.9",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setCeaseRate",
            "params": [
                {
                    "name": "v",
                    "description": "设置停止速度",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12311,
            "description": "设置是否以椭圆方式布局，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setElliptical",
            "params": [
                {
                    "name": "v",
                    "description": "是否以椭圆方式布局",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12318,
            "description": "设置布局时间间隔，单位为毫秒，默认值为50毫秒",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setInterval",
            "params": [
                {
                    "name": "interval",
                    "description": "布局时间间隔，单位为毫秒",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12325,
            "description": "设置鼠标移动处理方法，默认值为null",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setMouseMoveFunction",
            "params": [
                {
                    "name": "v",
                    "description": "鼠标移动处理方法",
                    "type": "Function"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12332,
            "description": "设置鼠标移出处理方法，默认值为null",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setMouseOverFunction",
            "params": [
                {
                    "name": "v",
                    "description": "鼠标移出处理方法",
                    "type": "Function"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12339,
            "description": "设置转动速率，默认值为2",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setMoveSpeed",
            "params": [
                {
                    "name": "v",
                    "description": "转动速率",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12346,
            "description": "设置边界间隙大小比例，默认值为0.2",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setPercentPadding",
            "params": [
                {
                    "name": "v",
                    "description": "边界间隙大小比例",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12353,
            "description": "设置网元容器变化后，是否重新加载网元，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setReloadOnDataBoxChanged",
            "params": [
                {
                    "name": "v",
                    "description": "网元容器变化后，是否重新加载网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12360,
            "description": "设置拓扑大小变化后，是否重新布局，默认值为true",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setUpdateLayoutRectOnResized",
            "params": [
                {
                    "name": "v",
                    "description": "拓扑大小变化后，是否重新布局",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12367,
            "description": "设置更新节点函数，默认值为null",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.setUpdateNodeFunction",
            "params": [
                {
                    "name": "v",
                    "description": "更新节点函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12374,
            "description": "开始布局",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.start",
            "params": [
                {
                    "name": "needToReset",
                    "description": "是否重置布局",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12381,
            "description": "停止布局",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.stop",
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12387,
            "description": "更新布局区域",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.updateLayoutRect",
            "params": [
                {
                    "name": "needToReload",
                    "description": "是否重新加载",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12394,
            "description": "更新网元节点",
            "itemtype": "method",
            "name": "twaver.layout.CloudLayouter.updateNode",
            "params": [
                {
                    "name": "node",
                    "description": "网元节点",
                    "type": "twaver.Node"
                },
                {
                    "name": "zIndex",
                    "description": "z轴索引",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "网元数量",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "透明度",
                    "type": "Number"
                }
            ],
            "class": "twaver.layout.CloudLayouter"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12418,
            "description": "调用updateMeasure时，会调用此方法，用于重新计算contentRect和roundRect",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.calculateMeasure",
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12424,
            "description": "获取附件画线时, 线条两端的样式, 默认值为twaver.Defaults.ATTACHMENT_CAP(butt), 可选值为butt(无端点)，round(圆头端点)或 square(方头端点)",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getCap",
            "return": {
                "description": "返回画线时, 线条两端的样式",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12431,
            "description": "获取附件内容",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getContent",
            "return": {
                "description": "返回附件内容",
                "type": "HTMLElement"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12438,
            "description": "获取附件内容高度，默认值为twaver.Defaults.ATTACHMENT_CONTENT_HEIGHT（20）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getContentHeight",
            "return": {
                "description": "返回附件内容高度",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12445,
            "description": "获取附件内容区域",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getContentRect",
            "return": {
                "description": "返回附件内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12452,
            "description": "获取附件内容宽度，默认值为twaver.Defaults.ATTACHMENT_CONTENT_HEIGHT（30）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getContentWidth",
            "return": {
                "description": "返回附件内容宽度",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12459,
            "description": "获取附件圆角半径，默认值为twaver.Defaults.ATTACHMENT_CORNER_RADIUS（5）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getCornerRadius",
            "return": {
                "description": "返回附件圆角半径",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12466,
            "description": "获取附件箭头的显示方位，一般用于告警冒泡，默认值为twaver.Defaults.ATTACHMENT_DIRECTION（right），可选值为：\naboveleft 附件箭头在上左角\naboveright 附件箭头在上右角\nbelowleft 附件箭头在下左角\nbelowright 附件箭头在下右角\nleftabove 附件箭头在左上角\nleftbelow 附件箭头在左下角\nrightabove 附件箭头右右上角\nrightbelow 附件箭头在右下角\nabove 附件箭头在上边\nbelow 附件箭头在下边\nleft 附件箭头在左边\nright 附件箭头在右边",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getDirection",
            "return": {
                "description": "返回附件箭头的显示方位",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12485,
            "description": "获取附件填充颜色，默认值为twaver.Defaults.ATTACHMENT_FILL_COLOR（#000000）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getFillColor",
            "return": {
                "description": "返回附件填充颜色",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12492,
            "description": "获取附件渐进色填充样式，默认值为twaver.Defaults.ATTACHMENT_GRADIENT（null），null表示不使用填充渐进色，可选值为：\nlinear.east, linear.north, linear.northeast, linear.northwest, linear.south, linear.southeast, linear.southwest, linear.west, none, radial.center, radial.east, radial.north, radial.northeast, radial.northwest, radial.south, radial.southeast, radial.southwest, radial.west, spread.antidiagonal, spread.diagonal, spread.east, spread.horizontal, spread.north, spread.south, spread.vertical, spread.west",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getGradient",
            "return": {
                "description": "返回附件渐进色填充样式",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12500,
            "description": "获取附件填充渐进色，默认值为twaver.Defaults.ATTACHMENT_GRADIENT_COLOR（#FFFFFF）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getGradientColor",
            "return": {
                "description": "返回附件填充渐进色",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12507,
            "description": "获取附件画线时，线条连接点样式，默认值为twaver.Defaults.ATTACHMENT_JOIN（miter），可选值为bevel（斜角连接）round（圆角连接）和miter（尖角连接）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getJoin",
            "return": {
                "description": "返回附件画线时，线条连接点样式",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12514,
            "description": "获取附件边框颜色，默认值为twaver.Defaults.ATTACHMENT_OUTLINE_COLOR（#000000）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getOutlineColor",
            "return": {
                "description": "返回附件边框颜色",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12521,
            "description": "获取附件边框宽度，默认值为twaver.Defaults.ATTACHMENT_OUTLINE_WIDTH（-1），-1代表无边框",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getOutlineWidth",
            "return": {
                "description": "返回附件边框宽度",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12528,
            "description": "获取附件内容和边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPadding",
            "return": {
                "description": "返回附件内容和边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12535,
            "description": "获取附件内容和下边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_BOTTOM（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPaddingBottom",
            "return": {
                "description": "返回附件内容和下边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12542,
            "description": "获取附件内容和左边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_LEFT（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPaddingLeft",
            "return": {
                "description": "返回附件内容和左边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12549,
            "description": "获取附件内容和右边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_RIGHT（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPaddingRight",
            "return": {
                "description": "附件内容和右边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12556,
            "description": "获取附件内容和上边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_TOP（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPaddingTop",
            "return": {
                "description": "返回附件内容和上边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12563,
            "description": "获取附件箭头长度，默认值为twaver.Defaults.ATTACHMENT_POINTER_LENGTH（10）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPointerLength",
            "return": {
                "description": "返回附件箭头长度",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12570,
            "description": "获取附件箭头宽度，默认值为ATTACHMENT_POINTER_WIDTH（8）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPointerWidth",
            "return": {
                "description": "返回附件箭头宽度",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12577,
            "description": "获取附件位置，默认值为twaver.Defaults.ATTACHMENT_POSITION（topright.topright）\n可选值为\nhotspot\nfrom\nto\ntopleft.topleft\ntopleft.topright\ntop.top\ntopright.topleft\ntopright.topright\ntopleft\ntop\ntopright\ntopleft.bottomleft\ntopleft.bottomright\ntop.bottom\ntopright.bottomleft\ntopright.bottomright\nleft.left\nleft\nleft.right\ncenter\nright.left\nright\nright.right\nbottomleft.topleft\nbottomleft.topright\nbottom.top\nbottomright.topleft\nbottomright.topright\nbottomleft\nbottom\nbottomright\nbottomleft.bottomleft\nbottomleft.bottomright\nbottom.bottom\nbottomright.bottomleft\nbottomright.bottomright",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getPosition",
            "return": {
                "description": "返回附件位置",
                "type": "String"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12621,
            "description": "获取附件圆角区域",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getRoundRect",
            "return": {
                "description": "返回附件圆角区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12628,
            "description": "获取附件x轴偏移量，默认值为twaver.Defaults.ATTACHMENT_XOFFSET（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getXOffset",
            "return": {
                "description": "返回附件x轴偏移量",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12635,
            "description": "获取附件y轴偏移量，默认值为twaver.Defaults.ATTACHMENT_YOFFSET（0）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.getYOffset",
            "return": {
                "description": "返回附件y轴偏移量",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12642,
            "description": "获取附件是否填充背景，默认值为twaver.Defaults.ATTACHMENT_FILL（false）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.isFill",
            "return": {
                "description": "返回附件是否填充背景",
                "type": "Number"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12649,
            "description": "获取附件选中时是否有阴影效果，默认值为twaver.Defaults.ATTACHMENT_SHADOWABLE（false）",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.isShadowable",
            "return": {
                "description": "返回附件选中时是否有阴影效果",
                "type": "Boolean"
            },
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12656,
            "description": "设置附件内容",
            "itemtype": "method",
            "name": "twaver.network.BasicAttachment.setContent",
            "params": [
                {
                    "name": "value",
                    "description": "附件内容",
                    "type": "HTMLElement"
                }
            ],
            "class": "twaver.network.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12691,
            "description": "获取附件选中时是否有阴影效果，默认值为twaver.Defaults.ATTACHMENT_SHADOWABLE(false)",
            "itemtype": "method",
            "name": "twaver.network.IconsAttachment.isShadowable",
            "return": {
                "description": "返回附件选中时是否有阴影效果",
                "type": "Boolean"
            },
            "class": "twaver.network.IconsAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12731,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateElementInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.CreateElementInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12768,
            "description": "创建连线结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.clear",
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12774,
            "description": "创建连线",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.createLink",
            "return": {
                "description": "连线",
                "type": "twaver.Link"
            },
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12781,
            "description": "获取当前鼠标下的节点，并作为将要创建的连线的起始节点",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.getFromNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12789,
            "description": "获取鼠标下的节点",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.getNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12797,
            "description": "获取当前鼠标下的节点，并作为将要创建的连线的结束节点",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.getToNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12805,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12812,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12819,
            "description": "选择了起始节点后，移动鼠标将动态画一根起始节点中心点到当前鼠标点的连线（宽度为Network#getEditLineWidth，颜色为Network#getEditLineColor）",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.updateLine",
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12825,
            "description": "鼠标移动到任意节点上时，此节点周围会显示边框（宽度为Network#getEditLineWidth，颜色为Network#getEditLineColor）",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateLinkInteraction.updateMark",
            "class": "twaver.network.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12862,
            "description": "创建多边形结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateShapeNodeInteraction.clear",
            "class": "twaver.network.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12868,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateShapeNodeInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12875,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateShapeNodeInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12882,
            "description": "鼠标移动或者点击时，更新当前正在创建的多边形",
            "itemtype": "method",
            "name": "twaver.network.interaction.CreateShapeNodeInteraction.updateMark",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12902,
            "description": "处理键盘按下事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.DefaultInteraction.handle_keydown",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.network.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12909,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.network.interaction.DefaultInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12916,
            "description": "处理鼠标点击",
            "itemtype": "method",
            "name": "twaver.network.interaction.DefaultInteraction.handleClicked",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.network.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12924,
            "description": "处理鼠标双击",
            "itemtype": "method",
            "name": "twaver.network.interaction.DefaultInteraction.handleDoubleClicked",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.network.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12946,
            "description": "编辑结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.clear",
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12952,
            "description": "获取点离直线的距离",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.getDistanceFromPointToLine",
            "params": [
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "point1",
                    "description": "线段顶点1",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "线段顶点2",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回点离直线的距离",
                "type": "Number"
            },
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12962,
            "description": "获取指定点所在的边索引",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.getPointIndex",
            "params": [
                {
                    "name": "points",
                    "description": "坐标点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "closed",
                    "description": "是否闭合",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "返回指定点所在的边索引",
                "type": "Number"
            },
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12972,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12979,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12986,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 12993,
            "description": "获取指定点是否在线段上",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.isPointOnLine",
            "params": [
                {
                    "name": "point",
                    "description": "坐标点",
                    "type": "Object"
                },
                {
                    "name": "point1",
                    "description": "线段顶点1",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "线段顶点2",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "线段宽度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定点是否在线段上",
                "type": "Boolean"
            },
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13004,
            "description": "显示旋转刻度",
            "itemtype": "method",
            "name": "twaver.network.interaction.EditInteraction.showRotateScale",
            "class": "twaver.network.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13032,
            "description": "获取放大镜背景颜色",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getBackgroundColor",
            "return": {
                "description": "返回放大镜背景颜色，默认为白色",
                "type": "String"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13039,
            "description": "获取边框颜色",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getBorderColor",
            "return": {
                "description": "返回边框颜色，默认为黑色",
                "type": "String"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13046,
            "description": "获取边框宽度",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getBorderWidth",
            "return": {
                "description": "返回边框宽度，默认为1",
                "type": "Number"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13053,
            "description": "获取放大镜形状",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getShape",
            "return": {
                "description": "返回放大镜形状，默认为圆形",
                "type": "String"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13060,
            "description": "获取x轴半径",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getXRadius",
            "return": {
                "description": "返回x轴半径，默认为100",
                "type": "Number"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13067,
            "description": "获取y轴半径",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getYRadius",
            "return": {
                "description": "返回y轴半径",
                "type": "Number"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13074,
            "description": "获取缩放级别",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.getZoom",
            "return": {
                "description": "返回缩放级别，默认为2",
                "type": "Number"
            },
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13081,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13088,
            "description": "设置放大镜背景颜色",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setBackgroundColor",
            "params": [
                {
                    "name": "value",
                    "description": "放大镜背景颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13095,
            "description": "设置边框颜色",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setBorderColor",
            "params": [
                {
                    "name": "value",
                    "description": "边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13102,
            "description": "设置边框宽度",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setBorderWidth",
            "params": [
                {
                    "name": "value",
                    "description": "边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13109,
            "description": "设置放大镜形状",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setShape",
            "params": [
                {
                    "name": "value",
                    "description": "放大镜形状",
                    "type": "String"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13116,
            "description": "设置x轴半径",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setXRadius",
            "params": [
                {
                    "name": "value",
                    "description": "x轴半径",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13123,
            "description": "设置y轴半径",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setYRadius",
            "params": [
                {
                    "name": "value",
                    "description": "y轴半径",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13130,
            "description": "设置缩放级别",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.setZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13137,
            "description": "鼠标移动时，更新放大镜内容",
            "itemtype": "method",
            "name": "twaver.network.interaction.MagnifyInteraction.updateMark",
            "class": "twaver.network.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13157,
            "description": "移动结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.end",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13164,
            "description": "处理键盘按下事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.handle_keydown",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13171,
            "description": "处理键盘弹起事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.handle_keyup",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13178,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13185,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13192,
            "description": "处理鼠标弹起，结束网元移动",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13199,
            "description": "获取是否正在设置父亲",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.isParenting",
            "return": {
                "description": "返回是否正在设置父亲",
                "type": "Number"
            },
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13206,
            "description": "键盘P键按下时，鼠标移动到网元上时的处理函数",
            "itemtype": "method",
            "name": "twaver.network.interaction.MoveInteraction.parentProcess",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "released",
                    "description": "键盘P键是否按下",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.interaction.MoveInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13227,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.network.interaction.MSTouchInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13234,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MSTouchInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13241,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MSTouchInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13248,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13255,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13262,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.MSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13282,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.network.interaction.PanInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.PanInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13289,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.network.interaction.PanInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.PanInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13296,
            "description": "处理鼠标弹起",
            "itemtype": "method",
            "name": "twaver.network.interaction.PanInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.PanInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13321,
            "description": "框选结束时，选中网元",
            "itemtype": "method",
            "name": "twaver.network.interaction.SelectInteraction.end",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13328,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.network.interaction.SelectInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13335,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.network.interaction.SelectInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13342,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.network.interaction.SelectInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13349,
            "description": "处理鼠标弹起",
            "itemtype": "method",
            "name": "twaver.network.interaction.SelectInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.network.interaction.SelectInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13369,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.network.interaction.TouchInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13376,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.TouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13383,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.TouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13390,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.network.interaction.TouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.network.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13411,
            "description": "检查连线捆绑标签附件",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.checkLinkHandlerAttachment",
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13417,
            "description": "创建连线内容区域，默认为热点周围一个像素的矩形",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.createBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13424,
            "description": "生成构成连线的点的集合",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.createLinkPoints",
            "return": {
                "description": "返回构成连线的点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13431,
            "description": "用连线的各种样式（link.width连线宽度、link.color连线颜色等）画连线",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.drawBody",
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13437,
            "description": "画线，drawBody方法调用此方法画线",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.drawLinePoints",
            "params": [
                {
                    "name": "g",
                    "description": "画布渲染内容",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "points",
                    "description": "由点构成的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "width",
                    "description": "线条宽度",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13447,
            "description": "获取控制点，控制点用于劈分正交直角连线",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getControlPoint",
            "return": {
                "description": "返回控制点坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13454,
            "description": "获取连线起始坐标",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getFromPoint",
            "return": {
                "description": "返回连线起始坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13461,
            "description": "获取偏移后的起始坐标",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getFromPosition",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回偏移后的起始坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13470,
            "description": "获取Link的长度",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getLineLength",
            "return": {
                "description": "返回Link的长度",
                "type": "Number"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13477,
            "description": "获取连线捆绑标签附件",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getLinkHandlerAttachment",
            "return": {
                "description": "返回连线捆绑标签附件",
                "type": "twaver.network.Attachment"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13484,
            "description": "获取构成连线的点的集合",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getLinkPoints",
            "return": {
                "description": "返回构成连线的点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13491,
            "description": "获取连线结束坐标",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getToPoint",
            "return": {
                "description": "返回连线结束坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13498,
            "description": "获取偏移后的结束坐标",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.getToPosition",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回偏移后的结束坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13507,
            "description": "设置控制点，控制点用于劈分正交直角连线",
            "itemtype": "method",
            "name": "twaver.network.LinkUI.setControlPoint",
            "params": [
                {
                    "name": "point",
                    "description": "控制点坐标，值为包含x和y属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13528,
            "description": "创建节点内容区域，默认为网元节点的x坐标、y坐标、宽度和高度组成",
            "itemtype": "method",
            "name": "twaver.network.NodeUI.createBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13535,
            "description": "画节点内容，根据body.type样式属性填充不同内容，body.type样式可选值为：\ndefault 对应drawDefaultBody方法，用图片填充节点内容区域\nvector 对应drawVectorBody方法，用矢量图形填充节点内容区域\ndefault.vector 先画图片，再画矢量图形\nvector.default 先画矢量图形，再画图片",
            "itemtype": "method",
            "name": "twaver.network.NodeUI.drawBody",
            "class": "twaver.network.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13546,
            "description": "用图片填充节点内容区域",
            "itemtype": "method",
            "name": "twaver.network.NodeUI.drawDefaultBody",
            "class": "twaver.network.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13552,
            "description": "画边框",
            "itemtype": "method",
            "name": "twaver.network.NodeUI.drawOuterBorder",
            "class": "twaver.network.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13558,
            "description": "节点被选中时，画选中边框",
            "itemtype": "method",
            "name": "twaver.network.NodeUI.drawSelectBorder",
            "class": "twaver.network.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13564,
            "description": "当body.type为vector或default.vector时，用矢量图形填充节点内容",
            "itemtype": "method",
            "name": "twaver.network.NodeUI.drawVectorBody",
            "class": "twaver.network.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13584,
            "description": "计算附件位置和大小",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.calculateMeasure",
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13590,
            "description": "获取附件画线时线条两端的样式, 默认值为twaver.Defaults.ATTACHMENT_CAP(butt), 可选值为butt(无端点)，round(圆头端点)或 square(方头端点)",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getCap",
            "return": {
                "description": "返回画线时, 线条两端的样式",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13597,
            "description": "获取附件内容高度，默认值为twaver.Defaults.ATTACHMENT_CONTENT_HEIGHT(20)",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getContentHeight",
            "return": {
                "description": "返回附件内容高度",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13604,
            "description": "获取附件内容区域",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getContentRect",
            "return": {
                "description": "返回附件内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13611,
            "description": "获取附件内容宽度，默认值为twaver.Defaults.ATTACHMENT_CONTENT_HEIGHT（30）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getContentWidth",
            "return": {
                "description": "返回附件内容宽度",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13618,
            "description": "获取附件圆角半径，默认值为twaver.Defaults.ATTACHMENT_CORNER_RADIUS（5）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getCornerRadius",
            "return": {
                "description": "返回附件圆角半径",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13625,
            "description": "获取附件箭头的显示方位，一般用于告警冒泡，默认值为twaver.Defaults.ATTACHMENT_DIRECTION（right），可选值为：\naboveleft 附件箭头在上左角\naboveright 附件箭头在上右角\nbelowleft 附件箭头在下左角\nbelowright 附件箭头在下右角\nleftabove 附件箭头在左上角\nleftbelow 附件箭头在左下角\nrightabove 附件箭头在右上角\nrightbelow 附件箭头在右下角\nabove 附件箭头在上边\nbelow 附件箭头在下边\nleft 附件箭头在左边\nright 附件箭头在右边",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getDirection",
            "return": {
                "description": "返回附件箭头的显示方位",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13644,
            "description": "获取附件填充颜色，默认值为twaver.Defaults.ATTACHMENT_FILL_COLOR（#000000）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getFillColor",
            "return": {
                "description": "返回附件填充颜色",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13651,
            "description": "获取附件渐进色填充样式，默认值为twaver.Defaults.ATTACHMENT_GRADIENT（null），null表示不使用填充渐进色，可选值为：\nlinear.east, linear.north, linear.northeast, linear.northwest, linear.south, linear.southeast, linear.southwest, linear.west, none, radial.center, radial.east, radial.north, radial.northeast, radial.northwest, radial.south, radial.southeast, radial.southwest, radial.west, spread.antidiagonal, spread.diagonal, spread.east, spread.horizontal, spread.north, spread.south, spread.vertical, spread.west",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getGradient",
            "return": {
                "description": "返回附件渐进色填充样式",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13659,
            "description": "获取附件填充渐进色，默认值为twaver.Defaults.ATTACHMENT_GRADIENT_COLOR（#FFFFFF）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getGradientColor",
            "return": {
                "description": "返回附件填充渐进色",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13666,
            "description": "获取附件在画线时的线条连接点样式，默认值为twaver.Defaults.ATTACHMENT_JOIN（miter），可选值为bevel（斜角连接）round（圆角连接）和miter（尖角连接）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getJoin",
            "return": {
                "description": "返回附件在画线时的线条连接点样式",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13673,
            "description": "获取附件边框颜色，默认值为twaver.Defaults.ATTACHMENT_OUTLINE_COLOR（#000000）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getOutlineColor",
            "return": {
                "description": "返回附件边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13680,
            "description": "获取附件边框宽度，默认值为twaver.Defaults.ATTACHMENT_OUTLINE_WIDTH（-1），-1代表无边框",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getOutlineWidth",
            "return": {
                "description": "返回附件边框宽度",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13687,
            "description": "获取附件内容和边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPadding",
            "return": {
                "description": "返回附件内容和边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13694,
            "description": "获取附件内容和下边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_BOTTOM（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPaddingBottom",
            "return": {
                "description": "返回附件内容和下边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13701,
            "description": "获取附件内容和左边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_LEFT（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPaddingLeft",
            "return": {
                "description": "返回附件内容和左边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13708,
            "description": "获取附件内容和右边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_RIGHT（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPaddingRight",
            "return": {
                "description": "附件内容和右边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13715,
            "description": "获取附件内容和上边界之间的间距，默认值为twaver.Defaults.ATTACHMENT_PADDING_TOP（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPaddingTop",
            "return": {
                "description": "返回附件内容和上边界之间的间距",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13722,
            "description": "获取附件箭头长度，默认值为twaver.Defaults.ATTACHMENT_POINTER_LENGTH（10）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPointerLength",
            "return": {
                "description": "返回附件箭头长度",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13729,
            "description": "获取附件箭头宽度，默认值为ATTACHMENT_POINTER_WIDTH（8）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPointerWidth",
            "return": {
                "description": "返回附件箭头宽度",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13736,
            "description": "获取附件位置，默认值为twaver.Defaults.ATTACHMENT_POSITION（topright.topright）\n可选值为\nhotspot\nfrom\nto\ntopleft.topleft\ntopleft.topright\ntop.top\ntopright.topleft\ntopright.topright\ntopleft\ntop\ntopright\ntopleft.bottomleft\ntopleft.bottomright\ntop.bottom\ntopright.bottomleft\ntopright.bottomright\nleft.left\nleft\nleft.right\ncenter\nright.left\nright\nright.right\nbottomleft.topleft\nbottomleft.topright\nbottom.top\nbottomright.topleft\nbottomright.topright\nbottomleft\nbottom\nbottomright\nbottomleft.bottomleft\nbottomleft.bottomright\nbottom.bottom\nbottomright.bottomleft\nbottomright.bottomright",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getPosition",
            "return": {
                "description": "返回附件位置",
                "type": "String"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13780,
            "description": "获取附件圆角区域",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getRoundRect",
            "return": {
                "description": "返回附件圆角区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13787,
            "description": "获取附件x轴偏移量，默认值为twaver.Defaults.ATTACHMENT_XOFFSET（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getXOffset",
            "return": {
                "description": "返回附件的x轴偏移量",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13794,
            "description": "获取附件y轴偏移量，默认值为twaver.Defaults.ATTACHMENT_YOFFSET（0）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.getYOffset",
            "return": {
                "description": "返回附件y轴偏移量",
                "type": "Number"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13801,
            "description": "获取附件是否有填充背景，默认值为twaver.Defaults.ATTACHMENT_FILL（false）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.isFill",
            "return": {
                "description": "返回附件是否有填充背景",
                "type": "Boolean"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13808,
            "description": "获取附件选中时是否有阴影效果，默认值为twaver.Defaults.ATTACHMENT_SHADOWABLE（false）",
            "itemtype": "method",
            "name": "twaver.vector.BasicAttachment.isShadowable",
            "return": {
                "description": "返回附件选中时是否有阴影效果",
                "type": "Boolean"
            },
            "class": "twaver.vector.BasicAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13829,
            "description": "画ShapeLink和ShapeNode的控制点",
            "itemtype": "method",
            "name": "twaver.vector.EditAttachment.paintEditPoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.EditAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13836,
            "description": "画8个更改网元大小的控制点",
            "itemtype": "method",
            "name": "twaver.vector.EditAttachment.paintResizingPoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.EditAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13843,
            "description": "绘制旋转点",
            "itemtype": "method",
            "name": "twaver.vector.EditAttachment.paintRotatePoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.EditAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13864,
            "description": "获取附件选中时是否有阴影效果，默认值为twaver.Defaults.ATTACHMENT_SHADOWABLE(false)",
            "itemtype": "method",
            "name": "twaver.vector.IconsAttachment.isShadowable",
            "return": {
                "description": "返回附件选中时是否有阴影效果",
                "type": "Boolean"
            },
            "class": "twaver.vector.IconsAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13904,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateElementInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.CreateElementInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13941,
            "description": "创建连线结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.clear",
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13947,
            "description": "创建连线",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.createLink",
            "return": {
                "description": "连线",
                "type": "twaver.Link"
            },
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13954,
            "description": "获取当前鼠标下的节点，并作为将要创建的连线的起始节点",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.getFromNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13962,
            "description": "获取鼠标下的节点",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.getNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13970,
            "description": "获取当前鼠标下的节点，并作为将要创建的连线的结束节点",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.getToNode",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回当前鼠标下的节点",
                "type": "twaver.Node"
            },
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13978,
            "description": "返回节点在缩放情况下所在空间的位置和大小",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.getZoomNodeRectOrPoint",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                },
                {
                    "name": "returnPoint",
                    "description": "布尔值，是否返回中心点，否则返回表示大小的矩形",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "返回点或者矩形",
                "type": "Object"
            },
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13987,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 13994,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14001,
            "description": "从起始点画线到鼠标当前点",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateLinkInteraction.paintLine",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.interaction.CreateLinkInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14039,
            "description": "创建多边形结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateShapeNodeInteraction.clear",
            "class": "twaver.vector.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14045,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateShapeNodeInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14052,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.vector.interaction.CreateShapeNodeInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.CreateShapeNodeInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14072,
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.end",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fromStart",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14079,
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.getIntersectMode",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14085,
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.getScrollBarColor",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14091,
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.getScrollBarWidth",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14097,
            "description": "处理键盘按下事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.handle_keydown",
            "params": [
                {
                    "name": "e",
                    "description": "键盘事件",
                    "type": "KeyEvent"
                }
            ],
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14104,
            "description": "处理鼠标按下",
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14111,
            "description": "处理鼠标点击",
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.handleClicked",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14119,
            "description": "处理鼠标双击",
            "itemtype": "method",
            "name": "twaver.vector.interaction.DefaultInteraction.handleDoubleClicked",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                },
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.vector.interaction.DefaultInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14141,
            "description": "编辑结束后，清除临时状态",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.clear",
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14147,
            "description": "获取点离直线的距离",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.getDistanceFromPointToLine",
            "params": [
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "point1",
                    "description": "线段顶点1",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "线段顶点2",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回点离直线的距离",
                "type": "Number"
            },
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14157,
            "description": "获取指定点所在的边索引",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.getPointIndex",
            "params": [
                {
                    "name": "points",
                    "description": "坐标点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "point",
                    "description": "点",
                    "type": "Object"
                },
                {
                    "name": "closed",
                    "description": "是否闭合",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "返回指定点所在的边索引",
                "type": "Number"
            },
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14167,
            "description": "处理鼠标按下事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.handle_mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14174,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14181,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14188,
            "description": "获取指定点是否在线段上",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.isPointOnLine",
            "params": [
                {
                    "name": "point",
                    "description": "坐标点",
                    "type": "Object"
                },
                {
                    "name": "point1",
                    "description": "线段顶点1",
                    "type": "Object"
                },
                {
                    "name": "point2",
                    "description": "线段顶点2",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "线段宽度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定点是否在线段上",
                "type": "Boolean"
            },
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14199,
            "description": "显示旋转刻度",
            "itemtype": "method",
            "name": "twaver.vector.interaction.EditInteraction.showRotateScale",
            "class": "twaver.vector.interaction.EditInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14227,
            "description": "处理鼠标移动",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MagnifyInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.MagnifyInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14247,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MSTouchInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14254,
            "description": "处理鼠标移动事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MSTouchInteraction.handle_mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14261,
            "description": "处理鼠标弹起事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MSTouchInteraction.handle_mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.vector.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14268,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MSTouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14275,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MSTouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14282,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.MSTouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.interaction.MSTouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14302,
            "description": "获取是否使用相交模式（只要和选择区域相交的网元都会被选中）",
            "itemtype": "method",
            "name": "twaver.vector.interaction.TouchInteraction.getIntersectMode",
            "return": {
                "description": "如果是相交模式，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14309,
            "description": "处理触摸结束事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.TouchInteraction.handleTouchend",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14316,
            "description": "处理触摸移动事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.TouchInteraction.handleTouchmove",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14323,
            "description": "处理触摸开始事件",
            "itemtype": "method",
            "name": "twaver.vector.interaction.TouchInteraction.handleTouchstart",
            "params": [
                {
                    "name": "e",
                    "description": "触摸事件",
                    "type": "TouchEvent"
                }
            ],
            "class": "twaver.vector.interaction.TouchInteraction"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14344,
            "description": "检查连线捆绑标签附件",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.checkLinkHandlerAttachment",
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14350,
            "description": "创建连线内容区域，默认为热点周围一个像素的矩形",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.createBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14357,
            "description": "生成构成连线的点的集合",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.createLinkPoints",
            "return": {
                "description": "返回构成连线的点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14364,
            "description": "画线，drawBody方法调用此方法画线",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.drawLinePoints",
            "params": [
                {
                    "name": "g",
                    "description": "画布渲染内容",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "points",
                    "description": "由点构成的集合",
                    "type": "twaver.List"
                },
                {
                    "name": "width",
                    "description": "线条宽度",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14374,
            "description": "获取控制点，控制点用于劈分正交直角连线",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getControlPoint",
            "return": {
                "description": "返回控制点坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14381,
            "description": "获取连线起始坐标",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getFromPoint",
            "return": {
                "description": "返回连线起始坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14388,
            "description": "获取偏移后的起始坐标",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getFromPosition",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回偏移后的起始坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14397,
            "description": "获取Link的长度",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getLineLength",
            "return": {
                "description": "返回Link的长度",
                "type": "Number"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14404,
            "description": "获取连线捆绑标签附件",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getLinkHandlerAttachment",
            "return": {
                "description": "返回连线捆绑标签附件",
                "type": "twaver.network.Attachment"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14411,
            "description": "获取构成连线的点的集合",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getLinkPoints",
            "return": {
                "description": "返回构成连线的点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14418,
            "description": "获取连线结束坐标",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getToPoint",
            "return": {
                "description": "返回连线结束坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14425,
            "description": "获取偏移后的结束坐标",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.getToPosition",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y轴偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回偏移后的结束坐标，值为包含x和y属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14434,
            "description": "设置控制点，控制点用于劈分正交直角连线",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.setControlPoint",
            "params": [
                {
                    "name": "point",
                    "description": "控制点坐标，值为包含x和y属性的Object对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14441,
            "description": "刷新连线视图所占的区域",
            "itemtype": "method",
            "name": "twaver.vector.LinkUI.validateBodyBounds",
            "class": "twaver.vector.LinkUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14475,
            "description": "创建节点内容区域，默认为网元节点的x坐标、y坐标、宽度和高度组成",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.createBodyRect",
            "return": {
                "description": "返回内容区域，值为包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14482,
            "description": "用图片填充节点内容区域",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.drawDefaultBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14489,
            "description": "画边框",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.drawOuterBorder",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14496,
            "description": "画路径",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.drawPath",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "prefix",
                    "description": "前缀",
                    "type": "String"
                },
                {
                    "name": "padding",
                    "description": "内边距",
                    "type": "Number"
                },
                {
                    "name": "pattern",
                    "description": "线条虚线样式",
                    "type": "Array"
                },
                {
                    "name": "points",
                    "description": "点集合",
                    "type": "twaver.List"
                },
                {
                    "name": "segments",
                    "description": "点与点之间连接类型集合",
                    "type": "twaver.List"
                },
                {
                    "name": "close",
                    "description": "是否闭合",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14509,
            "description": "节点被选中时，画选中边框",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.drawSelectBorder",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14516,
            "description": "当body.type为vector或default.vector时，用矢量图形填充节点内容",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.drawVectorBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14523,
            "description": "获取网元视图主体边界",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.getDefaultBodyRect",
            "return": {
                "description": "返回网元视图主体边界",
                "type": "Object"
            },
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14530,
            "description": "获取外边框边界",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.getOuterBorderRect",
            "return": {
                "description": "返回外边框边界",
                "type": "Object"
            },
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14537,
            "description": "获取路径边界",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.getPathRect",
            "params": [
                {
                    "name": "prefix",
                    "description": "前缀",
                    "type": "String"
                },
                {
                    "name": "padding",
                    "description": "内边距",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回路径边界",
                "type": "Object"
            },
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14546,
            "description": "获取选中边框边界",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.getSelectBorderRect",
            "return": {
                "description": "返回选中边框边界",
                "type": "Object"
            },
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14553,
            "description": "获取矢量边界",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.getVectorBody",
            "return": {
                "description": "返回矢量边界",
                "type": "Object"
            },
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14560,
            "description": "重新计算网元主体边界",
            "itemtype": "method",
            "name": "twaver.vector.NodeUI.validateBodyBounds",
            "class": "twaver.vector.NodeUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14603,
            "description": "得到告警的级别，告警级别可以参考twaver.AlarmSeverity",
            "itemtype": "method",
            "name": "twaver.Alarm.getAlarmSeverity",
            "return": {
                "description": "告警级别",
                "type": "twaver.AlarmSeverity"
            },
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14610,
            "description": "获取绑定在告警上的网元ID",
            "itemtype": "method",
            "name": "twaver.Alarm.getElementId",
            "return": {
                "description": "网元ID",
                "type": "Object"
            },
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14617,
            "description": "告警标志",
            "itemtype": "property",
            "name": "IAlarm",
            "type": "Boolean",
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14624,
            "description": "告警是否已经确认",
            "itemtype": "method",
            "name": "twaver.Alarm.isAcked",
            "return": {
                "description": "true为确认，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14631,
            "description": "告警是否已经清除",
            "itemtype": "method",
            "name": "twaver.Alarm.isCleared",
            "return": {
                "description": "true为清除，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14638,
            "description": "设置告警的状态，true为确认，否则为false",
            "itemtype": "method",
            "name": "twaver.Alarm.setAcked",
            "params": [
                {
                    "name": "v",
                    "description": "true为确认，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14645,
            "description": "设置告警的级别，告警级别可参考twaver.AlarmSeverity",
            "itemtype": "method",
            "name": "twaver.Alarm.setAlarmSeverity",
            "params": [
                {
                    "name": "v",
                    "description": "告警级别",
                    "type": "twaver.AlarmSeverity"
                }
            ],
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14652,
            "description": "设置告警清除的状态，true为已清除，否则为false",
            "itemtype": "method",
            "name": "twaver.Alarm.setCleared",
            "params": [
                {
                    "name": "v",
                    "description": "true为清除，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Alarm"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14672,
            "description": "获取告警-网元映射的对象，这个对象用于管理所有的网元和告警的对应关系，它决定了告警显示在哪些网元上",
            "itemtype": "method",
            "name": "twaver.AlarmBox.getAlarmElementMapping",
            "return": {
                "description": "告警-网元映射的对象",
                "type": "twaver.AlarmElementMapping"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14679,
            "description": "获取某个网元上所有的告警集合",
            "itemtype": "method",
            "name": "twaver.AlarmBox.getCorrespondingAlarms",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "网元上所有的告警集合",
                "type": "twaver.List"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14687,
            "description": "获取和某个告警相关联的网元对象的集合。",
            "itemtype": "method",
            "name": "twaver.AlarmBox.getCorrespondingElements",
            "params": [
                {
                    "name": "alarm",
                    "description": "告警对象",
                    "type": "twaver.Alarm"
                }
            ],
            "return": {
                "description": "和告警相关联的网元对象的集合",
                "type": "twaver.List"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14695,
            "description": "获取和这个告警容器绑定的网元容器",
            "itemtype": "method",
            "name": "twaver.AlarmBox.getElementBox",
            "return": {
                "description": "包含这个告警容器的网元容器对象",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14702,
            "description": "当告警的确认状态变化时，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleAckedChange",
            "params": [
                {
                    "name": "alarm",
                    "description": "告警对象",
                    "type": "twaver.Alarm"
                },
                {
                    "name": "e",
                    "description": "告警状态的变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14710,
            "description": "当告警容器发生变化时，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleAlarmBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "告警对象事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14717,
            "description": "当告警属性发生变化时，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleAlarmPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "告警对象事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14724,
            "description": "当告警级别的对象发生变化时，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleAlarmSeverityChange",
            "params": [
                {
                    "name": "alarm",
                    "description": "告警对象",
                    "type": "twaver.Alarm"
                },
                {
                    "name": "e",
                    "description": "告警对象事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14732,
            "description": "当网元添加时，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleElementAdded",
            "params": [
                {
                    "name": "element",
                    "description": "添加的网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14739,
            "description": "当网元容器发生变化时，TWaver内部会调用此方法",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleElementBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "网元容器发生更改的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14746,
            "description": "当网元删除时，调用此方法。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.AlarmBox.handleElementRemoved",
            "params": [
                {
                    "name": "element",
                    "description": "删除了的网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14753,
            "description": "当告警的状态为cleared时是否需要删除告警",
            "itemtype": "method",
            "name": "twaver.AlarmBox.isRemoveAlarmWhenAlarmIsCleared",
            "return": {
                "description": "true为删除告警，false不删除告警",
                "type": "Boolean"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14760,
            "description": "当删除网元时，是否删除所有发生在这个网元上的告警对象",
            "itemtype": "method",
            "name": "twaver.AlarmBox.isRemoveAlarmWhenElementIsRemoved",
            "return": {
                "description": "true为删除所有的告警，false为不删除",
                "type": "String"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14767,
            "description": "删除所有和指定网元相关的告警对象",
            "itemtype": "method",
            "name": "twaver.AlarmBox.removeAlarmsByElement",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14774,
            "description": "设置告警-网元映射的对象，这个对象用于管理所有的网元和告警的对应关系，它决定了告警显示在哪些网元上",
            "itemtype": "method",
            "name": "twaver.AlarmBox.setAlarmElementMapping",
            "params": [
                {
                    "name": "alarmElementMapping",
                    "description": "告警-网元映射的对象",
                    "type": "twaver.AlarmElementMapping"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14781,
            "description": "设置当告警的状态为cleared时是否需要删除告警",
            "itemtype": "method",
            "name": "twaver.AlarmBox.setRemoveAlarmWhenAlarmIsCleared",
            "params": [
                {
                    "name": "removeAlarmWhenAlarmIsCleared",
                    "description": "true为删除告警，false不删除告警",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14789,
            "description": "设置当删除网元时，是否删除所有发生在这个网元上的告警对象",
            "itemtype": "method",
            "name": "twaver.AlarmBox.setRemoveAlarmWhenElementIsRemoved",
            "params": [
                {
                    "name": "v",
                    "description": "true为删除所有的告警，false为不删除",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.AlarmBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14854,
            "description": "画网格内容",
            "itemtype": "method",
            "name": "twaver.canvas.GridUI.drawGridBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.GridUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14875,
            "description": "画展开后的组，用group.shape样式属性定义的形状画出矢量图形",
            "itemtype": "method",
            "name": "twaver.canvas.GroupUI.drawExpandedGroup",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.GroupUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14882,
            "description": "获取所有孩子的区域",
            "itemtype": "method",
            "name": "twaver.canvas.GroupUI.getChildrenRects",
            "return": {
                "description": "返回所有孩子的区域",
                "type": "twaver.List"
            },
            "class": "twaver.canvas.GroupUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14936,
            "description": "获取标签文本",
            "itemtype": "method",
            "name": "twaver.canvas.LabelAttachment.getLabel",
            "return": {
                "description": "返回标签文本",
                "type": "String"
            },
            "class": "twaver.canvas.LabelAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14975,
            "description": "将Network的视图中心点滚动到指定的相对于Overview的坐标",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.centerNetwork",
            "params": [
                {
                    "name": "point",
                    "description": "相对于Overview的包含x和y属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "animate",
                    "description": "可选，如果为true，则有动画效果，否则没有，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14983,
            "description": "获取Overview的填充色，默认值为twaver.Defaults.OVERVIEW_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getFillColor",
            "return": {
                "description": "返回Overview的填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14990,
            "description": "获取鼠标所在的逻辑坐标，包含x，y属性",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getLogicalPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标所在的逻辑坐标，包含x，y属性",
                "type": "Object"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 14998,
            "description": "获取Overview最大伸缩高度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_HEIGHT",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getMaxPackingHeight",
            "return": {
                "description": "返回Overview最大伸缩高度",
                "type": "Number"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15005,
            "description": "获取Overview最大伸缩宽度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getMaxPackingWidth",
            "return": {
                "description": "返回Overview最大伸缩宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15012,
            "description": "获取和Overview绑定的拓扑视图",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getNetwork",
            "return": {
                "description": "返回和Overview绑定的拓扑视图",
                "type": "twaver.network.Network"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15019,
            "description": "获取Overview边框线条颜色，默认值为twaver.Defaults.OVERVIEW_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getOutlineColor",
            "return": {
                "description": "返回Overview边框线条颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15026,
            "description": "获取Overview边框线条宽度，默认值为twaver.Defaults.OVERVIEW_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getOutlineWidth",
            "return": {
                "description": "返回Overview边框线条宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15033,
            "description": "获取Overview边缘空白大小，默认值为twaver.Defaults.OVERVIEW_PADDING",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getPadding",
            "return": {
                "description": "返回Overview边缘空白大小",
                "type": "Number"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15040,
            "description": "获取Overview框选时轮廓的线条颜色，默认值为twaver.Defaults.OVERVIEW_SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getSelectColor",
            "return": {
                "description": "返回Overview框选时轮廓的线条颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15047,
            "description": "获取Overview框选时轮廓的线条宽度，默认值为twaver.Defaults.OVERVIEW_SELECT_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.getSelectWidth",
            "return": {
                "description": "返回Overview框选时轮廓的线条宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15054,
            "description": "获取操作Overview时，是否使用动画效果，默认值为twaver.Defaults.OVERVIEW_ANIMATE",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.isAnimate",
            "return": {
                "description": "返回是否使用动画效果",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15061,
            "description": "设置操作Overview时，是否使用动画效果，默认值为twaver.Defaults.OVERVIEW_ANIMATE",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "是否使用动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15068,
            "description": "设置Overview的填充色，默认值为twaver.Defaults.OVERVIEW_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15075,
            "description": "设置Overview最大伸缩高度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_HEIGHT",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setMaxPackingHeight",
            "params": [
                {
                    "name": "v",
                    "description": "Overview最大伸缩高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15082,
            "description": "设置Overview最大伸缩宽度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setMaxPackingWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview最大伸缩宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15089,
            "description": "设置和Overview绑定的拓扑视图",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setNetwork",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.network.Network"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15096,
            "description": "设置Overview边框线条颜色，默认值为twaver.Defaults.OVERVIEW_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边框线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15103,
            "description": "设置Overview边框线条宽度，默认值为twaver.Defaults.OVERVIEW_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边框线条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15110,
            "description": "设置Overview边缘空白大小，默认值为twaver.Defaults.OVERVIEW_PADDING",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setPadding",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边缘空白大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15117,
            "description": "设置Overview框选时轮廓的线条颜色，默认值为twaver.Defaults.OVERVIEW_SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setSelectColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview框选时轮廓的线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15124,
            "description": "设置Overview框选时轮廓的线条宽度，默认值为twaver.Defaults.OVERVIEW_SELECT_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Overview.setSelectWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview框选时轮廓的线条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15189,
            "description": "获取和这个面板绑定的Chart对象",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getChart",
            "return": {
                "description": "和这个面板绑定的Chart对象",
                "type": "twaver.charts.ChartBase"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15196,
            "description": "获取Chart上图例的方向\nOrientation的返回值为：\ntop：上方\nright：右方\nbottom：下方\nleft：左方",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getLegendOrientation",
            "return": {
                "description": "Chart上图例的方向",
                "type": "String"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15208,
            "description": "获取图例的面板",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getLegendPane",
            "return": {
                "description": "图例的面板",
                "type": "twaver.charts.LegendPane"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15215,
            "description": "获取图例面板的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getLegendWidth",
            "return": {
                "description": "图例面板的宽度值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15222,
            "description": "获取Chart的标题",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getTitle",
            "return": {
                "description": "Chart的标题",
                "type": "String"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15229,
            "description": "获取Chart中包含标题的DIV",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getTitleDiv",
            "return": {
                "description": "标题的DIV",
                "type": "Object"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15236,
            "description": "获取Chart标题的高度",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getTitleHeight",
            "return": {
                "description": "Chart标题的高度",
                "type": "Number"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15243,
            "description": "获取标题的水平对齐方式。水平对齐方式的可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.getTitleHorizontalAlign",
            "return": {
                "description": "标题的水平对齐方式，默认为center",
                "type": "String"
            },
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15256,
            "description": "设置Chart图例的显示方向，方向的可选值为：\ntop：上方\nright：右方\nbottom：下方\nleft：左方",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.setLegendOrientation",
            "params": [
                {
                    "name": "value",
                    "description": "Chart图例的显示方向",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15267,
            "description": "设置图例面板的宽度值",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.setLegendWidth",
            "params": [
                {
                    "name": "v",
                    "description": "图例面板的宽度值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15274,
            "description": "设置Chart的标题",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.setTitle",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15281,
            "description": "设置Chart标题的高度",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.setTitleHeight",
            "params": [
                {
                    "name": "v",
                    "description": "Chart标题的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15288,
            "description": "设置标题的水平对齐方式，对齐方式的可选值为\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.charts.ChartPane.setTitleHorizontalAlign",
            "params": [
                {
                    "name": "v",
                    "description": "标题的水平对齐方式，默认为center",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15314,
            "description": "获取和这个图例面板绑定的Chart",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getChart",
            "return": {
                "description": "绑定的Chart",
                "type": "twaver.charts.ChartBase"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15321,
            "description": "获取图例面板上被隐藏的网元颜色",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getHiddenColor",
            "return": {
                "description": "被隐藏的网元颜色",
                "type": "String"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15328,
            "description": "获取图例上网元图标的高度",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getIconHeight",
            "return": {
                "description": "图例上网元图标的高度",
                "type": "Number"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15335,
            "description": "设置图例面板上图标的圆角弧度，默认为0",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getIconRadius",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15343,
            "description": "获取图例上网元图标的宽度",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getIconWidth",
            "return": {
                "description": "图例上网元图标的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15350,
            "description": "获取图例面板显示实现的方向，默认为水平显示。方向的可选值为：\n'horizontal'：水平\n'vertical'：垂直",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getOrientation",
            "return": {
                "description": "图例面板显示实现的方向",
                "type": "String"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15359,
            "description": "获取图例面板的行高",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getRowHeight",
            "return": {
                "description": "图例面板的行高",
                "type": "Number"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15366,
            "description": "获取选中网元时图例对于元素的背景色",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getSelectBackgroundColor",
            "return": {
                "description": "选中网元时图例对于元素的背景色",
                "type": "String"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15373,
            "description": "获取选中网元时图例对于元素的前景色",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.getSelectForegroundColor",
            "return": {
                "description": "选中网元时图例对于元素的前景色",
                "type": "String"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15380,
            "description": "当图例面板上绑定的Chart更改时，会调用此方法，这个方法用于刷新图例面板",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.handleViewChange",
            "params": [
                {
                    "name": "e",
                    "description": "Chart视图的变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15387,
            "description": "获取图例面板上指定的网元是否隐藏",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.isHidden",
            "params": [
                {
                    "name": "data",
                    "description": "指定的网元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为隐藏，false不隐藏",
                "type": "Boolean"
            },
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15395,
            "description": "当绘制图例面板时会调用此方法，此方法的默认实现为空。用户不需要调用此方法，但可以重载此方法执行自定义逻辑",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.onLegendRendered",
            "params": [
                {
                    "name": "div",
                    "description": "包含图例上网元元素的面板",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "指定的图例上的网元元素",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15403,
            "description": "在指定的div层上绘制指定数据的图例",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.renderLegend",
            "params": [
                {
                    "name": "div",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15411,
            "description": "设置图例面板上被隐藏的网元颜色",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setHiddenColor",
            "params": [
                {
                    "name": "v",
                    "description": "被隐藏的网元颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15418,
            "description": "设置图例上网元图标的高度",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setIconHeight",
            "params": [
                {
                    "name": "v",
                    "description": "图例上网元图标的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15425,
            "description": "获取图例面板上图标的圆角弧度，默认为0",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setIconRadius",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15432,
            "description": "设置图例上网元图标的宽度",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setIconWidth",
            "params": [
                {
                    "name": "v",
                    "description": "图例上网元图标的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15439,
            "description": "设置图例面板显示的方向，默认为水平显示。方向的可选值为：\n'horizontal'：水平\n'vertical'：垂直",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setOrientation",
            "params": [
                {
                    "name": "v",
                    "description": "图例面板显示的方向",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15450,
            "description": "设置图例面板的行高",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setRowHeight",
            "params": [
                {
                    "name": "v",
                    "description": "图例面板的行高",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15457,
            "description": "设置选中网元时图例对于元素的背景色",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setSelectBackgroundColor",
            "params": [
                {
                    "name": "v",
                    "description": "选中网元时图例对于元素的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15464,
            "description": "设置选中网元时图例对于元素的前景色",
            "itemtype": "method",
            "name": "twaver.charts.LegendPane.setSelectForegroundColor",
            "params": [
                {
                    "name": "v",
                    "description": "选中网元时图例对于元素的前景色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.LegendPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15485,
            "description": "获取编辑列时显示的内容。如果列中设置了多个值，编辑时会以combobox的样式来呈现。\n例如：{map:{1:'male', 2:'female'}, values:[1, 2]} 或 ['male', 'female']。",
            "itemtype": "method",
            "name": "twaver.Column.getEnumInfo",
            "return": {
                "description": "编辑列时显示的内容",
                "type": "Object"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15493,
            "description": "获取列的水平对齐方式。可选值：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.Column.getHorizontalAlign",
            "return": {
                "description": "水平对齐方式",
                "type": "String"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15506,
            "description": "获取表格的列所对应的网元属性名",
            "itemtype": "method",
            "name": "twaver.Column.getPropertyName",
            "return": {
                "description": "表格列所对应网元的属性名",
                "type": "String"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15513,
            "description": "获取网元属性的类型。可选值有\n'field'：网元的自身变量属性，\n'accessor', 网元get/set方法的属性，\n'style'：网元样式属性,\n'client'：网元自定义属性",
            "itemtype": "method",
            "name": "twaver.Column.getPropertyType",
            "return": {
                "description": "网元属性类型",
                "type": "String"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15524,
            "description": "获取表格列排序的方向，默认为升序。可选值有：\n'desc'：降序，\n'asc'：升序",
            "itemtype": "method",
            "name": "twaver.Column.getSortDirection",
            "return": {
                "description": "排序的方向",
                "type": "String"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15534,
            "description": "获取表格列排序的规则函数",
            "itemtype": "method",
            "name": "twaver.Column.getSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15541,
            "description": "从Data中获取对应的表格列的值，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.Column.getValue",
            "params": [
                {
                    "name": "data",
                    "description": "表格或树表格绑定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "view",
                    "description": "表格或树表",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回表格列的值",
                "type": "Object"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15550,
            "description": "获取表格列中值的类型。可选值有：\n'string'：字符串类型，\n'boolean'：布尔类型， \n'color'：颜色类型， \n'int'：整型，\n'number'：数字类型",
            "itemtype": "method",
            "name": "twaver.Column.getValueType",
            "return": {
                "description": "表格列中值的类型",
                "type": "String"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15562,
            "description": "获取列的宽度",
            "itemtype": "method",
            "name": "twaver.Column.getWidth",
            "return": {
                "description": "列的宽度",
                "type": "Number"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15569,
            "description": "是否为列的标识",
            "itemtype": "property",
            "name": "IColumn",
            "type": "Boolean",
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15576,
            "description": "判断是否可编辑",
            "itemtype": "method",
            "name": "twaver.Column.isEditable",
            "return": {
                "description": "true为可编辑，false不可编辑",
                "type": "Boolean"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15583,
            "description": "获取表格列内容是否为纯文本",
            "itemtype": "method",
            "name": "twaver.Column.isInnerText",
            "return": {
                "description": "返回表格列内容是否为纯文本，默认为true",
                "type": "Boolean"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15590,
            "description": "判断是否可移动",
            "itemtype": "method",
            "name": "twaver.Column.isMovable",
            "return": {
                "description": "true为可移动，false不可移动",
                "type": "String"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15597,
            "description": "判断是否可改变大小",
            "itemtype": "method",
            "name": "twaver.Column.isResizable",
            "return": {
                "description": "true为可更改大小，false不可更改",
                "type": "Boolean"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15604,
            "description": "判断是否可排序",
            "itemtype": "method",
            "name": "twaver.Column.isSortable",
            "return": {
                "description": "true为可排序，false不可排序",
                "type": "Boolean"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15611,
            "description": "判断列是否可见",
            "itemtype": "method",
            "name": "twaver.Column.isVisible",
            "return": {
                "description": "true为可见，false不可见",
                "type": "Boolean"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15618,
            "description": "单元格的renderer",
            "itemtype": "property",
            "name": "renderCell",
            "type": "Function",
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15625,
            "description": "表头的renderer",
            "itemtype": "property",
            "name": "renderHeader",
            "type": "Function",
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15632,
            "description": "设置表格的列是否可编辑",
            "itemtype": "method",
            "name": "twaver.Column.setEditable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可编辑，false不可编辑",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15639,
            "description": "设置编辑列时显示的内容。如果列中设置了多个值，编辑时会以combobox的样式来呈现。\n例如：{map:{1:'male', 2:'female'}, values:[1, 2]} 或 ['male', 'female']",
            "itemtype": "method",
            "name": "twaver.Column.setEnumInfo",
            "params": [
                {
                    "name": "v",
                    "description": "编辑列时显示的内容",
                    "type": "Object"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15647,
            "description": "设置列的水平对齐方式。可选值：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.Column.setHorizontalAlign",
            "params": [
                {
                    "name": "v",
                    "description": "水平对齐方式",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15660,
            "description": "设置表格列内容是否为纯文本",
            "itemtype": "method",
            "name": "twaver.Column.setInnerText",
            "params": [
                {
                    "name": "v",
                    "description": "表格列内容是否为纯文本",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15667,
            "description": "设置表格列是否可移动",
            "itemtype": "method",
            "name": "twaver.Column.setMovable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可移动，false不可移动",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15674,
            "description": "设置表格列所对应网元的属性名。这里可以是网元自身的属性，样式属性或自定义的属性",
            "itemtype": "method",
            "name": "twaver.Column.setPropertyName",
            "params": [
                {
                    "name": "v",
                    "description": "网元的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15681,
            "description": "设置网元属性的类型。可选值有\n'field'：网元的自身变量属性，\n'accessor', 网元get/set方法的属性，\n'style'：网元样式属性,\n'client'：网元自定义属性",
            "itemtype": "method",
            "name": "twaver.Column.setPropertyType",
            "params": [
                {
                    "name": "v",
                    "description": "网元属性的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15692,
            "description": "设置表格的列是否可改变大小",
            "itemtype": "method",
            "name": "twaver.Column.setResizable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可改变大小，false不可改变",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15699,
            "description": "设置表格的列是否可排序",
            "itemtype": "method",
            "name": "twaver.Column.setSortable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以排序，false不可排序",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15706,
            "description": "设置排序的方向，默认为升序。可选值有：\n'desc'：降序，\n'asc'：升序",
            "itemtype": "method",
            "name": "twaver.Column.setSortDirection",
            "params": [
                {
                    "name": "v",
                    "description": "排序的方向",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15715,
            "description": "设置表格列排序的规则函数",
            "itemtype": "method",
            "name": "twaver.Column.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15722,
            "description": "设置table上的值回写到data中，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.Column.setValue",
            "params": [
                {
                    "name": "data",
                    "description": "表格或树表格绑定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "value",
                    "description": "表格列的值",
                    "type": "Object"
                },
                {
                    "name": "view",
                    "description": "表格或树表",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Data"
            },
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15732,
            "description": "得到表格列中值的类型。可选值有：\n'string'：字符串类型，\n'boolean'：布尔类型， \n'color'：颜色类型， \n'int'：整型，\n'number'：数字类型",
            "itemtype": "method",
            "name": "twaver.Column.setValueType",
            "params": [
                {
                    "name": "v",
                    "description": "表格列中值的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15744,
            "description": "设置表格的列是否可见",
            "itemtype": "method",
            "name": "twaver.Column.setVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，false不可见",
                    "type": "String"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15751,
            "description": "设置表格列的宽度",
            "itemtype": "method",
            "name": "twaver.Column.setWidth",
            "params": [
                {
                    "name": "v",
                    "description": "列的宽度",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Column"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15787,
            "description": "添加指定的内容面板到可折叠面板中",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.add",
            "params": [
                {
                    "name": "title",
                    "description": "指定内容面板的标题",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "指定的内容面板",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15795,
            "description": "清空折叠面板中所有的DIV",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.clear",
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15801,
            "description": "合并当前的面板",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.collapse",
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15807,
            "description": "展开指定标题的面板",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.expand",
            "params": [
                {
                    "name": "title",
                    "description": "指定面板的标题",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15814,
            "description": "获取可折叠面板中DIV面板边框底部的颜色，默认为twaver.Defaults.ACCORDION_BORDER_BOTTOM_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getBorderBottomColor",
            "return": {
                "description": "底部边框的颜色",
                "type": "String"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15821,
            "description": "获取面板合并时的图标，默认为twaver.Defaults.ACCORDION_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getCollapseIcon",
            "return": {
                "description": "面板合并时的图标",
                "type": "String"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15828,
            "description": "获取当前展开面板的标题",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getCurrentTitle",
            "return": {
                "description": "面板的标题",
                "type": "String"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15835,
            "description": "获取面板展开时的图标，默认为twaver.Defaults.ACCORDION_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getExpandIcon",
            "return": {
                "description": "面板展开时的图标",
                "type": "String"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15842,
            "description": "获取可折叠面板图标位置",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getIconPosition",
            "return": {
                "description": "返回可折叠面板图标位置",
                "type": "String"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15849,
            "description": "获取DIV面板标题的背景色，默认为twaver.Defaults.ACCORDION_TITLE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getTitleBackground",
            "return": {
                "description": "标题的背景色",
                "type": "String"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15856,
            "description": "获取DIV面板标题的高度，默认为 twaver.Defaults.ACCORDION_TITLE_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getTitleHeight",
            "return": {
                "description": "标题的高度值",
                "type": "Number"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15863,
            "description": "获取折叠面板中所有DIV面板的标题列表",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.getTitles",
            "return": {
                "description": "面板标题的列表",
                "type": "twaver.List"
            },
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15870,
            "description": "鼠标点击折叠面板时的处理函数",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.handleMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标点击事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15877,
            "description": "合并面板时的处理函数，用户不需要自己调用此方法，但可以重载此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.onCollapsed",
            "params": [
                {
                    "name": "title",
                    "description": "合并面板的标题",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15884,
            "description": "展开面板时的处理函数，用户不需要自己调用此方法，但可以重载此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.onExpanded",
            "params": [
                {
                    "name": "title",
                    "description": "展开面板的标题",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15891,
            "description": "删除指定的面板",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.remove",
            "params": [
                {
                    "name": "title",
                    "description": "指定面板的标题",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15898,
            "description": "设置可折叠面板中DIV面板边框底部的颜色，默认为twaver.Defaults.ACCORDION_BORDER_BOTTOM_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.setBorderBottomColor",
            "params": [
                {
                    "name": "v",
                    "description": "底部边框的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15905,
            "description": "设置面板合并时的图标，默认为twaver.Defaults.ACCORDION_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.setCollapseIcon",
            "params": [
                {
                    "name": "v",
                    "description": "面板合并时的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15912,
            "description": "设置面板展开时的图标，默认为twaver.Defaults.ACCORDION_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.setExpandIcon",
            "params": [
                {
                    "name": "v",
                    "description": "面板展开时的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15919,
            "description": "设置可折叠面板图标位置",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.setIconPosition",
            "params": [
                {
                    "name": "v",
                    "description": "可折叠面板图标位置",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15926,
            "description": "设置DIV面板标题的背景色，默认为twaver.Defaults.ACCORDION_TITLE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.setTitleBackground",
            "params": [
                {
                    "name": "v",
                    "description": "所有标题的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15933,
            "description": "设置DIV面板标题的高度，默认为 twaver.Defaults.ACCORDION_TITLE_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.Accordion.setTitleHeight",
            "params": [
                {
                    "name": "v",
                    "description": "标题显示的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.Accordion"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15957,
            "description": "获取边框面板中下面部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getBottom",
            "return": {
                "description": "边框面板中下面部分的面板",
                "type": "Object"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15964,
            "description": "获取边框面板中下面部分面板的高度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getBottomHeight",
            "return": {
                "description": "边框面板中下面部分面板的高度",
                "type": "Number"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15971,
            "description": "获取边框面板中中间部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getCenter",
            "return": {
                "description": "边框面板中中间部分的面板",
                "type": "Object"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15978,
            "description": "获取各个组件之间的水平间距",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getHGap",
            "return": {
                "description": "各个组件之间的水平间距",
                "type": "Number"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15985,
            "description": "获取边框面板中左边部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getLeft",
            "return": {
                "description": "边框面板中左边部分的面板",
                "type": "Object"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15992,
            "description": "获取边框面板中左边部分面板的宽度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getLeftWidth",
            "return": {
                "description": "边框面板中左边部分面板的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 15999,
            "description": "获取边框面板中右边部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getRight",
            "return": {
                "description": "边框面板中右边部分的面板",
                "type": "Object"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16006,
            "description": "获取边框面板中右边部分面板的宽度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getRightWidth",
            "return": {
                "description": "边框面板中右边部分的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16013,
            "description": "获取边框面板中上边部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getTop",
            "return": {
                "description": "边框面板中上边部分的面板",
                "type": "Object"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16020,
            "description": "获取边框面板中上边部分面板的高度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getTopHeight",
            "return": {
                "description": "边框面板中上边部分面板的高度",
                "type": "Number"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16027,
            "description": "获取各个组件之间的垂直间距",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.getVGap",
            "return": {
                "description": "各个组件之间的垂直间距",
                "type": "Number"
            },
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16034,
            "description": "设置边框面板中下面部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setBottom",
            "params": [
                {
                    "name": "value",
                    "description": "边框面板中下面部分的面板",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16041,
            "description": "设置边框面板中下面部分面板的高度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setBottomHeight",
            "params": [
                {
                    "name": "v",
                    "description": "边框面板中下面部分面板的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16048,
            "description": "设置边框面板中中间部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setCenter",
            "params": [
                {
                    "name": "value",
                    "description": "边框面板中中间部分的面板",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16055,
            "description": "设置各个组件之间的水平间距",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setHGap",
            "params": [
                {
                    "name": "v",
                    "description": "各个组件之间的水平间距",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16062,
            "description": "设置边框面板中左边部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setLeft",
            "params": [
                {
                    "name": "value",
                    "description": "边框面板中左边部分的面板",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16069,
            "description": "设置边框面板中左边部分面板的宽度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setLeftWidth",
            "params": [
                {
                    "name": "v",
                    "description": "边框面板中左边部分面板的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16076,
            "description": "设置边框面板中右边部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setRight",
            "params": [
                {
                    "name": "value",
                    "description": "边框面板中右边部分的面板",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16083,
            "description": "设置边框面板中右边部分面板的宽度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setRightWidth",
            "params": [
                {
                    "name": "v",
                    "description": "边框面板中右边部分面板的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16090,
            "description": "设置边框面板中上边部分的面板",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setTop",
            "params": [
                {
                    "name": "value",
                    "description": "边框面板中上边部分的面板",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16097,
            "description": "设置边框面板中上边部分面板的高度",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setTopHeight",
            "params": [
                {
                    "name": "v",
                    "description": "边框面板中上边部分面板的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16104,
            "description": "设置各个组件之间的垂直间距",
            "itemtype": "method",
            "name": "twaver.controls.BorderPane.setVGap",
            "params": [
                {
                    "name": "v",
                    "description": "各个组件之间的垂直间距",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.BorderPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16128,
            "description": "设置劈分条的背景色，默认为twaver.Defaults.SPLITPANE_DIVIDER_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getDividerBackground",
            "return": {
                "description": "劈分条的背景颜色值",
                "type": "String"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16135,
            "description": "获取劈分条的DIV",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getDividerDiv",
            "return": {
                "description": "劈分条的DIV",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16142,
            "description": "设置劈分条的透明度，默认为twaver.Defaults.SPLITPANE_DIVIDER_OPACITY",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getDividerOpacity",
            "return": {
                "description": "劈分条的透明度，透明度的值的范围为0-1",
                "type": "Number"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16149,
            "description": "设置劈分条的宽度，默认为twaver.Defaults.SPLITPANE_DIVIDER_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getDividerWidth",
            "return": {
                "description": "劈分条的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16156,
            "description": "获取劈分面板中的第一块面板",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getFirstView",
            "return": {
                "description": "劈分面版的第一块面板，面板可以为DIV或ControlBase类型的对象",
                "type": "Object"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16163,
            "description": "获取劈分面板中劈分条拖动时显示的颜色，默认为twaver.Defaults.SPLITPANE_MASK_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getMaskBackground",
            "return": {
                "description": "拖动劈分条时的颜色值",
                "type": "String"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16170,
            "description": "获取劈分面板中的第二块面板",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getNextView",
            "return": {
                "description": "劈分面版的第二块面板，面板可以为DIV或ControlBase类型的对象",
                "type": "Object"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16177,
            "description": "获取劈分面板的劈分方向，默认为twaver.Defaults.SPLITPANE_ORIENTATION\n可选值有：\n'vertical'：垂直，\n'horizontal'：水平",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getOrientation",
            "return": {
                "description": "劈分面板的劈分方向",
                "type": "String"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16187,
            "description": "获取劈分条的位置，劈分条的位置决定了两块面板的大小。比如设置为0.7，那么第一块面板占70%，第二块占30%。默认为twaver.Defaults.SPLITPANE_POSITION",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.getPosition",
            "return": {
                "description": "劈分条的位置，取值范围0-1",
                "type": "Number"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16194,
            "description": "获取分隔条是否可拖拽",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.isDividerDraggable",
            "return": {
                "description": "返回分隔条是否可拖拽，默认问true",
                "type": "Boolean"
            },
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16201,
            "description": "获取劈分条的背景色，默认为twaver.Defaults.SPLITPANE_DIVIDER_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setDividerBackground",
            "params": [
                {
                    "name": "v",
                    "description": "劈分条的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16208,
            "description": "设置分隔条是否可拖拽",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setDividerDraggable",
            "params": [
                {
                    "name": "v",
                    "description": "分隔条是否可拖拽",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16215,
            "description": "获取劈分条的透明度，默认为twaver.Defaults.SPLITPANE_DIVIDER_OPACITY",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setDividerOpacity",
            "params": [
                {
                    "name": "v",
                    "description": "劈分条的透明度，透明度的值为0-1",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16222,
            "description": "设置劈分条的宽度，默认为twaver.Defaults.SPLITPANE_DIVIDER_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setDividerWidth",
            "params": [
                {
                    "name": "v",
                    "description": "劈分条的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16229,
            "description": "设置劈分面板中的第一块面板",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setFirstView",
            "params": [
                {
                    "name": "value",
                    "description": "劈分面版的第一块面板，面板可以为DIV或ControlBase类型的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16236,
            "description": "设置劈分面板中劈分条拖动时显示的颜色，默认为twaver.Defaults.SPLITPANE_MASK_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setMaskBackground",
            "params": [
                {
                    "name": "v",
                    "description": "拖到劈分条时的颜色值",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16243,
            "description": "设置劈分面板中的第二块面板",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setNextView",
            "params": [
                {
                    "name": "value",
                    "description": "劈分面版的第二块面板，面板可以为DIV或ControlBase类型的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16250,
            "description": "设置劈分面板的劈分方向，默认为twaver.Defaults.SPLITPANE_ORIENTATION\n可选值有：\n'vertical'：垂直，\n'horizontal'：水平",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setOrientation",
            "params": [
                {
                    "name": "v",
                    "description": "劈分面板的劈分方向",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16260,
            "description": "设置劈分条的位置，劈分条的位置决定了两块面板的大小。比如设置为0.7，那么第一块面板占70%，第二块占30%。默认为twaver.Defaults.SPLITPANE_POSITION",
            "itemtype": "method",
            "name": "twaver.controls.SplitPane.setPosition",
            "params": [
                {
                    "name": "value",
                    "description": "劈分条的位置，取值范围0-1",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.SplitPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16280,
            "description": "设置表头上列的线的颜色，默认为twaver.Defaults.TABLEHEADER_COLUMN_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getColumnLineColor",
            "return": {
                "description": "表头上列的线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16287,
            "description": "设置表头的高度，默认为twaver.Defaults.TABLEHEADER_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getHeight",
            "return": {
                "description": "表头的高度",
                "type": "Number"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16294,
            "description": "获取移动表头的某一列，将其插入表头列时线的颜色，默认为twaver.Defaults.TABLEHEADER_INSERT_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getInsertBackground",
            "return": {
                "description": "移动表头的某一列，将其插入表头列时线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16301,
            "description": "获取移动表头的某一列时这一列的背景色，默认为twaver.Defaults.TABLEHEADER_MOVE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getMoveBackground",
            "return": {
                "description": "移动表头的某一列时这一列的背景色",
                "type": "String"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16308,
            "description": "获取更改表头列大小时鼠标移至表头列时的公差，默认为twaver.Defaults.TABLEHEADER_RESIZE_TOLERANCE\n比如设置为5，也就是当鼠标到靠近表头上的分割线5个像素之内，都能改变表头的列的大小",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getResizeTolerance",
            "return": {
                "description": "鼠标移至表头列更改表头列大小时的公差",
                "type": "Number"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16316,
            "description": "获取表头对象的根DIV，这个DIV用于存放所有的表头",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getRootDiv",
            "return": {
                "description": "表头上的根DIV",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16323,
            "description": "获取升序排序时表头上显示的图标，默认为twaver.Defaults.TABLEHEADER_SORT_ASC_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getSortAscIcon",
            "return": {
                "description": "升序排序时表头上显示的图标",
                "type": "String"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16330,
            "description": "获取降序排序时表头上显示的图标，默认为twaver.Defaults.TABLEHEADER_SORT_DESC_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getSortDescIcon",
            "return": {
                "description": "降序排序时表头上显示的图标",
                "type": "String"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16337,
            "description": "获取排序时，图标显示的位置。默认为 twaver.Defaults.TABLEHEADER_SORT_ICON_POSITION。比如设置为 '70% 50%'，那么图标显示的位置为横向在表头列上70%的位置，纵向在表头上50%的位置",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.getSortIconPosition",
            "return": {
                "description": "图标显示的位置",
                "type": "String"
            },
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16344,
            "description": "ColumnBox里列发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.handleColumnBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "ColumnBox里列的变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16351,
            "description": "ColumnBox里列的顺序发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.handleColumnHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ColumnBox里列的顺序发生变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16358,
            "description": "ColumnBox里列的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.handleColumnPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ColumnBox里列的属性发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16365,
            "description": "当组件属性更改后，须调用此方法，让组件重画",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.invalidateDisplay",
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16371,
            "description": "当拖动表格的滚动条时，须调用此方法，让组件重画",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.invalidateScroll",
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16377,
            "description": "当调用renderColumn时，会调用此方法，用户不需要直接调用此方法，但可以重载此方法来实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.onColumnRendered",
            "params": [
                {
                    "name": "div",
                    "description": "包含column的DIV对象",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "column",
                    "description": "指定的列对象",
                    "type": "twaver.Column"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16385,
            "description": "绘制表头的列",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.renderColumn",
            "params": [
                {
                    "name": "div",
                    "description": "包含column的DIV对象",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "column",
                    "description": "指定的列对象",
                    "type": "twaver.Column"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16393,
            "description": "设置表头上列的线的颜色，默认为twaver.Defaults.TABLEHEADER_COLUMN_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setColumnLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "表头上列的线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16400,
            "description": "设置表头的高度，默认为twaver.Defaults.TABLEHEADER_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setHeight",
            "params": [
                {
                    "name": "v",
                    "description": "表头的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16407,
            "description": "设置移动表头的列时，将其插入表头列时线的颜色，默认为twaver.Defaults.TABLEHEADER_INSERT_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setInsertBackground",
            "params": [
                {
                    "name": "v",
                    "description": "移动表头的列，将其插入表头列时线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16414,
            "description": "设置移动表头时的背景色，默认为twaver.Defaults.TABLEHEADER_MOVE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setMoveBackground",
            "params": [
                {
                    "name": "v",
                    "description": "移动表头时的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16421,
            "description": "设置更改表头列大小时鼠标移至表头列时的公差，默认为twaver.Defaults.TABLEHEADER_RESIZE_TOLERANCE\n比如设置为5，也就是当鼠标移到表头列上，容差在5个像素之内，都能更改表头列的大小",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setResizeTolerance",
            "params": [
                {
                    "name": "v",
                    "description": "当鼠标靠近表头中的分隔条多少像素时即可以更改表头中列的列宽。",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16429,
            "description": "设置升序排序时表头上显示的图标，默认为twaver.Defaults.TABLEHEADER_SORT_ASC_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setSortAscIcon",
            "params": [
                {
                    "name": "v",
                    "description": "升序排序时表头上显示的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16436,
            "description": "获取降序排序时表头上显示的图标，默认为twaver.Defaults.TABLEHEADER_SORT_DESC_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setSortDescIcon",
            "params": [
                {
                    "name": "v",
                    "description": "降序排序时表头上显示的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16443,
            "description": "设置排序时，图标显示的位置。默认为 twaver.Defaults.TABLEHEADER_SORT_ICON_POSITION。比如设置为 '70% 50%'，那么图标显示的位置为横向在表头列上70%的位置，纵向在表头上50%的位置",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.setSortIconPosition",
            "params": [
                {
                    "name": "v",
                    "description": "图标显示的位置",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16450,
            "description": "重画组件，调用validate方法后，此方法会被调",
            "itemtype": "method",
            "name": "twaver.controls.TableHeader.validateDisplay",
            "class": "twaver.controls.TableHeader"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16470,
            "description": "获取表格面板中的表格体对象",
            "itemtype": "method",
            "name": "twaver.controls.TablePane.getTable",
            "return": {
                "description": "",
                "type": "twaver.controls.Table"
            },
            "class": "twaver.controls.TablePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16477,
            "description": "获取表格面板中的表头对象",
            "itemtype": "method",
            "name": "twaver.controls.TablePane.getTableHeader",
            "return": {
                "description": "",
                "type": "twaver.controls.TableHeader"
            },
            "class": "twaver.controls.TablePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16502,
            "description": "获取选项卡上关闭的图标。默认为twaver.Defaults.TABPANE_CLOSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getCloseIcon",
            "return": {
                "description": "选项卡上关闭的图标",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16509,
            "description": "获取内容DIV，它是用于存放选项卡上的视图组件",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getContentDiv",
            "return": {
                "description": "选项卡面板中的内容DIV",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16516,
            "description": "获取当前的选项卡，当前选项卡为选项卡容器中最后一个选中的数据",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getCurrentTab",
            "return": {
                "description": "选项卡数据",
                "type": "twaver.Tab"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16523,
            "description": "获取当前的选项卡视图，当前选项卡视图为选项卡容器中最后一个选中的数据的视图组件",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getCurrentView",
            "return": {
                "description": "当前的选项卡视图，选项卡视图为DIV或ControlBase类型的对象",
                "type": "Object"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16530,
            "description": "获取选项卡不可用时的颜色值，默认为twaver.Defaults.TABPANE_DISABLED_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getDisabledColor",
            "return": {
                "description": "选项卡不可用时的颜色值",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16537,
            "description": "获取选项卡上文字的水平对齐方式，默认为\ntwaver.Defaults.TABPANE_HORIZONTAL_ALIGN\n文字的对齐方式可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getHorizontalAlign",
            "return": {
                "description": "选项卡上文字的水平对齐方式",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16553,
            "description": "获取在移动选项卡并将其插入选项卡面板时线的颜色，默认为twaver.Defaults.TABPANE_INSERT_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getInsertBackground",
            "return": {
                "description": "插入选项卡时线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16561,
            "description": "设置移动某一选项卡时该选项卡的背景色，默认为twaver.Defaults.TABPANE_MOVE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getMoveBackground",
            "return": {
                "description": "移动某一选项卡时该选项卡的背景色",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16568,
            "description": "获取当鼠标靠近选项卡的右边框多少像素时即可以更改表头中列的列宽，默认值为twaver.Defaults.TABPANE_TAB_ORIENTATION。比如鼠标没有移动到选项卡上，但是在这个公差范围值之内，那么鼠标也会变成改变大小的状态。",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getResizeTolerance",
            "return": {
                "description": "当鼠标靠近选项卡的右边框多少像素时即可以更改表头中列的列宽",
                "type": "Number"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16575,
            "description": "获取选中的选项卡的背景颜色，默认为twaver.Defaults.TABPANE_SELECT_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getSelectBackground",
            "return": {
                "description": "选中的选项卡的背景颜色",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16582,
            "description": "获取选项卡的背景色，默认为twaver.Defaults.TABPANE_TAB_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabBackground",
            "return": {
                "description": "选项卡的背景色",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16589,
            "description": "获取选项卡数据容器",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabBox",
            "return": {
                "description": "选项卡数据容器",
                "type": "twaver.TabBox"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16596,
            "description": "获取选项卡的DIV",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabDiv",
            "return": {
                "description": "选项卡的DIV",
                "type": "Object"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16603,
            "description": "获取选项卡之间的间距，默认为twaver.Defaults.TABPANE_TAB_GAP",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabGap",
            "return": {
                "description": "选项卡之间的间距",
                "type": "Number"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16610,
            "description": "获取选项卡的高度，默认为twaver.Defaults.TABPANE_TAB_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabHeight",
            "return": {
                "description": "选项卡的高度",
                "type": "Number"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16617,
            "description": "获取选项卡所处的位置，默认为twaver.Defaults.TABPANE_TAB_ORIENTATION\n。可选值有：\n'top'，'bottom'",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabOrientation",
            "return": {
                "description": "选项卡所处的位置",
                "type": "String"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16626,
            "description": "获取选项卡的圆角半径，默认为twaver.Defaults.TABPANE_TAB_RADIUS",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.getTabRadius",
            "return": {
                "description": "选项卡的圆角半径",
                "type": "Number"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16633,
            "description": "TabBox中的Tab发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.handleTabChange",
            "params": [
                {
                    "name": "e",
                    "description": "TabBox中的Tab发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16640,
            "description": "无效选项卡，在等待指定的毫秒数后刷新选项卡界面，当选项卡的属性发生更改后，须调用此方法，让选项卡重画",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.invalidateTab",
            "params": [
                {
                    "name": "delay",
                    "description": "延迟刷新等待的毫秒数，可选，默认为twaver.Defaults.CALL_LATER_DELAY",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16648,
            "description": "当关闭当前的选项卡时，是否选中下一个Tab页。默认为twaver.Defaults.TABPANE_SELECT_NEXT_ON_CLOSE",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.isSelectNextOnClose",
            "return": {
                "description": "true为选中下一个选项卡，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16655,
            "description": "当前选项卡隐藏时是否自动选中下一个选项卡",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.isSelectNextOnInVisible",
            "return": {
                "description": "当前选项卡隐藏时是否自动选中下一个选项卡",
                "type": "Boolean"
            },
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16662,
            "description": "当调用renderTab时会调用此方法，用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.onTabRendered",
            "params": [
                {
                    "name": "div",
                    "description": "包含选项卡的DIV",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "tab",
                    "description": "指定的选项卡",
                    "type": "twaver.Tab"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16670,
            "description": "当Tab上添加视图组件时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.onViewAdded",
            "params": [
                {
                    "name": "view",
                    "description": "Tab的视图组件添加的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16677,
            "description": "当Tab上删除视图组件时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.onViewRemoved",
            "params": [
                {
                    "name": "view",
                    "description": "Tab的视图组件删除的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16684,
            "description": "绘制指定的选项卡，用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.renderTab",
            "params": [
                {
                    "name": "div",
                    "description": "包含指定选项卡的DIV",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "tab",
                    "description": "指定的选项卡",
                    "type": "twaver.Tab"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16692,
            "description": "设置选项卡上关闭的图标。默认为twaver.Defaults.TABPANE_CLOSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setCloseIcon",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡上关闭的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16699,
            "description": "设置选项卡不可用时的颜色值，默认为twaver.Defaults.TABPANE_DISABLED_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setDisabledColor",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡不可用时的颜色值",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16706,
            "description": "设置选项卡上文字的水平对齐方式，默认为\ntwaver.Defaults.TABPANE_HORIZONTAL_ALIGN\n文字的对齐方式可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setHorizontalAlign",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡上文字的水平对齐方式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16721,
            "description": "设置在移动选项卡并插入选项卡时线的颜色，默认为twaver.Defaults.TABPANE_INSERT_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setInsertBackground",
            "params": [
                {
                    "name": "v",
                    "description": "插入选项卡时线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16729,
            "description": "设置移动某一选项卡时该选项卡的背景色，默认为twaver.Defaults.TABPANE_MOVE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setMoveBackground",
            "params": [
                {
                    "name": "v",
                    "description": "移动某一选项卡时该选项卡的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16736,
            "description": "设置当鼠标靠近分隔条多少像素时可以改变列宽的像素数，默认值为twaver.Defaults.TABPANE_TAB_TOLERANCE。比如鼠标没有移动到选项卡上，但是在这个公差范围值之内，那么鼠标也会变成改变大小的状态。",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setResizeTolerance",
            "params": [
                {
                    "name": "v",
                    "description": "当鼠标靠近分隔条多少像素时可以改变列宽的像素数",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16743,
            "description": "设置选中的选项卡的背景颜色，默认为twaver.Defaults.TABPANE_SELECT_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setSelectBackground",
            "params": [
                {
                    "name": "v",
                    "description": "选中的选项卡的背景颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16750,
            "description": "当关闭当前的选项卡时，设置是否选中下一个Tab页。默认为twaver.Defaults.TABPANE_SELECT_NEXT_ON_CLOSE",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setSelectNextOnClose",
            "params": [
                {
                    "name": "v",
                    "description": "true为选中下一个选项卡，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16757,
            "description": "设置当前选项卡隐藏时是否自动选中下一个选项卡",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setSelectNextOnInVisible",
            "params": [
                {
                    "name": "v",
                    "description": "当前选项卡隐藏时是否自动选中下一个选项卡",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16764,
            "description": "设置选项卡的背景色，默认为twaver.Defaults.TABPANE_TAB_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setTabBackground",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16771,
            "description": "获取选项卡之间的间距，默认为twaver.Defaults.TABPANE_TAB_GAP",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setTabGap",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡之间的间距",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16778,
            "description": "设置选项卡的高度，默认为twaver.Defaults.TABPANE_TAB_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setTabHeight",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16785,
            "description": "设置选项卡所处的位置，默认为twaver.Defaults.TABPANE_TAB_ORIENTATION\n。可选值有：\n'top'，'bottom'",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setTabOrientation",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡所处的位置",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16794,
            "description": "设置选项卡的圆角半径，默认为twaver.Defaults.TABPANE_TAB_RADIUS",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.setTabRadius",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡的圆角半径",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16801,
            "description": "重画Tab页，调用validate方法后，此方法会被调用",
            "itemtype": "method",
            "name": "twaver.controls.TabPane.validateTab",
            "class": "twaver.controls.TabPane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16823,
            "description": "获取带标题面板中所包含的内容面板",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getContent",
            "return": {
                "description": "内容面板对象",
                "type": "Object"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16830,
            "description": "获取标题栏上显示的图标",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getIcon",
            "return": {
                "description": "标题栏上的图标",
                "type": "String"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16837,
            "description": "获取标题栏上显示的标题名称",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getTitle",
            "return": {
                "description": "标题名称",
                "type": "String"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16844,
            "description": "获取标题的背景色。默认为twaver.Defaults.TITLEPANE_TITLE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getTitleBackground",
            "return": {
                "description": "标题的背景色",
                "type": "String"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16851,
            "description": "获取标题栏的DIV",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getTitleDiv",
            "return": {
                "description": "标题栏的DIV",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16858,
            "description": "获取标题栏的高度，默认为twaver.Defaults.TITLEPANE_TITLE_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getTitleHeight",
            "return": {
                "description": "标题栏的高度",
                "type": "Number"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16865,
            "description": "获取标题的水平对齐方式，默认为twaver.Defaults.TITLEPANE_TITLE_HORIZONTAL_ALIGN\n标题的对齐方式可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.getTitleHorizontalAlign",
            "return": {
                "description": "标题的水平对齐方式",
                "type": "String"
            },
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16879,
            "description": "设置标题面板中所包含的内容面板",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.setContent",
            "params": [
                {
                    "name": "value",
                    "description": "内容面板对象，可以为DIV或为ControlBase类型的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16886,
            "description": "设置标题栏上显示的图标",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.setIcon",
            "params": [
                {
                    "name": "v",
                    "description": "标题栏上的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16893,
            "description": "设置标题栏上显示的标题名称",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.setTitle",
            "params": [
                {
                    "name": "v",
                    "description": "标题名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16900,
            "description": "设置标题的背景色。默认为twaver.Defaults.TITLEPANE_TITLE_BACKGROUND",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.setTitleBackground",
            "params": [
                {
                    "name": "v",
                    "description": "标题的背景色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16907,
            "description": "设置标题栏的高度，默认为twaver.Defaults.TITLEPANE_TITLE_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.setTitleHeight",
            "params": [
                {
                    "name": "v",
                    "description": "标题栏的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16914,
            "description": "设置标题的水平对齐方式，默认为twaver.Defaults.TITLEPANE_TITLE_HORIZONTAL_ALIGN\n标题的对齐方式可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.controls.TitlePane.setTitleHorizontalAlign",
            "params": [
                {
                    "name": "v",
                    "description": "标题的水平对齐方式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TitlePane"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16940,
            "description": "添加交互事件监听器，用于监听用户各种操作",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.addInteractionListener",
            "params": [
                {
                    "name": "listener",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "可选，回调函数的作用域，默认为null，即全局",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "可选，是否将此监听放在最前面，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " viewBase.addInteractionListener(function (e) {\n    console.log(e.kind, e.element);\n});\n\nkind可以为下列值：\ncreateElement 创建网元\nclickElement 单击网元\ndoubleClickElement 双击网元 \nclickBackground 单击背景\ndoubleClickBackground 双击背景\nremoveElement 删除网元\nselectAll 选中所有网元\nupSubNetwork 进入上一层子网\nenterSubNetwork 进入子网\nbundleLink 展开或合并连线捆绑\nexpandGroup 展开组\nliveMoveStart 开始实时移动网元\nliveMoveBetween 正在实时移动网元\nliveMoveEnd 结束实时移动网元\nlazyMoveStart 开始延迟移动网元\nlazyMoveBetween 正在延迟移动网元\nlazyMoveEnd 结束延迟移动网元\nliveResizeStart 开始实时改变网元大小\nliveResizeBetween 正在实时改变网元大小\nliveResizeEnd 结束实时改变网元大小\nlazyResizeStart 开始延迟改变网元大小\nlazyResizeBetween 正在延迟改变网元大小\nlazyResizeEnd 结束延迟改变网元大小\nselectStart 开始框选\nselectBetween 正在框选\nselectEnd 结束框选\nliveMovePointStart 开始移动ShapeLink或ShapeNode的点\nliveMovePointBetween 正在移动ShapeLink或ShapeNode的点\nliveMovePointEnd 结束移动ShapeLink或ShapeNode的点"
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16983,
            "description": "添加视图变化事件，用于在视图无效、刷新之前或刷新之后执行自定义动作",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.addViewListener",
            "params": [
                {
                    "name": "listener",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "可选，回调函数的作用域，默认为null，即全局",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "可选，是否将此监听放在最前面，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                " viewBase.addViewListener(function (e) {\n    console.log(e.kind);\n});\nkind可以为：\ninvalidate 无效视图\nvalidateStart 刷新视图前\nvalidateEnd 刷新视图后"
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 16999,
            "description": "派发交互事件",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.fireInteractionEvent",
            "params": [
                {
                    "name": "evt",
                    "description": "交互事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17006,
            "description": "当视图需要重画时，TWaver调用此方法派发视图变化事件",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.fireViewEvent",
            "params": [
                {
                    "name": "evt",
                    "description": "视图变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17013,
            "description": "获取指定数据元的图标，默认返回data#getIcon",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.getIcon",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的图标",
                "type": "String"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17021,
            "description": "获取指定数据元的标签，默认返回Data#getName",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.getLabel",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的标签",
                "type": "String"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17029,
            "description": "获取指定数据元的选中颜色，默认值为twaver.Defaults.SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.getSelectColor",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的选中颜色",
                "type": "String"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17037,
            "description": "获取选择模型，如果ViewBase#isShareSelectionModel为true（默认值为true），则返回和ViewBase绑定的DataBox的SelectionModel，否则返回视图自己独立的SelectionModel",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.getSelectionModel",
            "return": {
                "description": "返回选择模型",
                "type": "twaver.SelectionModel"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17044,
            "description": "获取指定数据元的提示信息，默认返回Data#getToolTip",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.getToolTip",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的提示信息",
                "type": "String"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17052,
            "description": "获取点击时是否让视图获得焦点",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.isFocusOnClick",
            "return": {
                "description": "返回点击时是否让视图获得焦点",
                "type": "Boolean"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17059,
            "description": "判断指定数据元是否可以被选择，此方法包装了SelectionModel的isSelectable方法",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.isSelectable",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元是否可以被选择",
                "type": "Boolean"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17067,
            "description": "获取指定数据元是否已被选中",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.isSelected",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元是否已被选中",
                "type": "Boolean"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17075,
            "description": "获取是否和视图绑定的数据容器共享选择模型，默认为true",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.isShareSelectionModel",
            "return": {
                "description": "返回是否和视图绑定的数据容器共享选择模型",
                "type": "Boolean"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17082,
            "description": "删除指定作用域的交互监听器，作用域必须和添加监听器时的作用域一致，相同的作用域的相同监听器只能成功添加一次",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.removeInteractionListener",
            "params": [
                {
                    "name": "listener",
                    "description": "交互监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "交互监听器的作用域，可选，默认为null，代表全局",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17090,
            "description": "删除选中的网元",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.removeSelection",
            "return": {
                "description": "返回被删除的网元集合",
                "type": "twaver.List"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17097,
            "description": "删除指定作用域的视图变化监听器，作用域必须和添加监听器时的作用域一致，相同的作用域的相同监听器只能成功添加一次",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.removeViewListener",
            "params": [
                {
                    "name": "listener",
                    "description": "视图变化监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "视图变化监听器的作用域，可选，默认为null，代表全局",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17105,
            "description": "选中所有网元",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.selectAll",
            "return": {
                "description": "返回所有选中的网元",
                "type": "twaver.List"
            },
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17112,
            "description": "设置点击时是否让Network获得焦点",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.setFocusOnClick",
            "params": [
                {
                    "name": "v",
                    "description": "点击时是否让Network获得焦点",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17119,
            "description": "设置是否和Network绑定的ElementBox共享选择模型，默认为true",
            "itemtype": "method",
            "name": "twaver.controls.ViewBase.setShareSelectionModel",
            "params": [
                {
                    "name": "shareSelectionModel",
                    "description": "是否和Network绑定的ElementBox共享选择模型",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.ViewBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17141,
            "description": "反序列化JSON数据到指定的网元样式",
            "itemtype": "method",
            "name": "twaver.Element.deserializeStyleJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据",
                    "type": "String"
                },
                {
                    "name": "styleProp",
                    "description": "网元样式名",
                    "type": "String"
                }
            ],
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17150,
            "description": "反序列化XML数据到指定的网元样式",
            "itemtype": "method",
            "name": "twaver.Element.deserializeStyleXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "styleXML",
                    "description": "XML数据",
                    "type": "String"
                },
                {
                    "name": "styleProp",
                    "description": "网元样式名",
                    "type": "String"
                }
            ],
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17159,
            "description": "获取网元的告警状态对象，告警状态对象是用于存放网元上的所有告警信息",
            "itemtype": "method",
            "name": "twaver.Element.getAlarmState",
            "return": {
                "description": "告警状态对象",
                "type": "twaver.AlarmState"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17166,
            "description": "获取网元的CanvasUI类名称, twaver.canvas.Network用此类实例化网元对应的UI实例",
            "itemtype": "method",
            "name": "twaver.Element.getCanvasUIClass",
            "return": {
                "description": "返回网元的CanvasUI类名称",
                "type": "String"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17173,
            "description": "获取网元UI的类名，网元UI用于在network组件上绘制这个网元。TWaver会用返回的这个UI类去创建UI对象",
            "itemtype": "method",
            "name": "twaver.Element.getElementUIClass",
            "return": {
                "description": "网元UI的类名",
                "type": "String"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17180,
            "description": "获取这个网元所在的图层ID。如果为空，则这个网元处于默认的图层上",
            "itemtype": "method",
            "name": "twaver.Element.getLayerId",
            "return": {
                "description": "图层ID",
                "type": "Object"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17187,
            "description": "通过样式名称去获取这个网元样式的值",
            "itemtype": "method",
            "name": "twaver.Element.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "网元样式名",
                    "type": "String"
                },
                {
                    "name": "returnDefaultIfNull",
                    "description": "当属性为空时，是否需要返回默认的值。默认值为true",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "网元的样式值",
                "type": "Object"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17196,
            "description": "获取网元上所有的样式属性集合",
            "itemtype": "method",
            "name": "twaver.Element.getStyleProperties",
            "return": {
                "description": "网元上所有样式属性名的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17203,
            "description": "获取网元矢量UI的类名，网元UI用于在network组件上绘制这个网元。TWaver会用返回的这个UI类去创建UI对象",
            "itemtype": "method",
            "name": "twaver.Element.getVectorUIClass",
            "return": {
                "description": "矢量UI类型",
                "type": "twaver.vector.ElementUI"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17210,
            "description": "是否为网元的标识，默认值为true",
            "itemtype": "property",
            "name": "IElement",
            "type": "Boolean",
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17217,
            "description": "网元是否需要置底",
            "itemtype": "method",
            "name": "twaver.Element.isAdjustedToBottom",
            "return": {
                "description": "true为调整置底，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17224,
            "description": "判断这个网元是否具有样式的标识，默认为true。",
            "itemtype": "property",
            "name": "IStyle",
            "type": "Boolean",
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17231,
            "description": "当更改网元的样式时，回调此方法",
            "itemtype": "method",
            "name": "twaver.Element.onStyleChanged",
            "params": [
                {
                    "name": "styleProp",
                    "description": "网元样式名",
                    "type": "String"
                },
                {
                    "name": "oldValue",
                    "description": "网元样式原值",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "网元样式新值",
                    "type": "String"
                }
            ],
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17240,
            "description": "如果只有一个参数，则返回指定样式的值，相当于getStyle；否则设置样式，相当于setStyle",
            "itemtype": "method",
            "name": "twaver.Element.s",
            "params": [
                {
                    "name": "style",
                    "description": "样式名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "样式值",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果只有一个参数，则返回指定样式的值，否则返回网元自身",
                "type": "twaver.Element"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17249,
            "description": "序列化指定的样式到JSON数据",
            "itemtype": "method",
            "name": "twaver.Element.serializeStyleJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "stylePrope",
                    "description": "网元样式名",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Element"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17259,
            "description": "序列化样式到XML数据",
            "itemtype": "method",
            "name": "twaver.Element.serializeStyleXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "stylePrope",
                    "description": "网元样式名",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17268,
            "description": "设置图层ID",
            "itemtype": "method",
            "name": "twaver.Element.setLayerId",
            "params": [
                {
                    "name": "v",
                    "description": "图层ID",
                    "type": "Object"
                }
            ],
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17275,
            "description": "设置网元上指定样式名的属性值",
            "itemtype": "method",
            "name": "twaver.Element.setStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "网元样式名",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "网元样式值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对象本身",
                "type": "twaver.Element"
            },
            "class": "twaver.Element"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17306,
            "description": "触发网元Index更改的相关属性名。默认有：'fromAgent'，'toAgent'，'expanded'，'parent'，'host'",
            "itemtype": "property",
            "name": "IS_INTERESTED_ADJUSTELEMENTINDEX_PROPERTY",
            "type": "Object",
            "static": 1,
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17314,
            "description": "添加网元序号变化的事件监听器。一个网元容器中可以添加多个事件监听器。",
            "itemtype": "method",
            "name": "twaver.ElementBox.addIndexChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元序号变化的事件监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ahead",
                    "description": "是否添加在集合的最前方，如果为空，则添加在最后一个位置",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17323,
            "description": "调整网元的序号，将网元设置到最顶部。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.ElementBox.adjustElementIndex",
            "params": [
                {
                    "name": "element",
                    "description": "指定的网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17330,
            "description": "反序列化JSON数据到网元容器的Style属性",
            "itemtype": "method",
            "name": "twaver.ElementBox.deserializeStyleJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "json",
                    "description": "JSON数据",
                    "type": "String"
                },
                {
                    "name": "styleProp",
                    "description": "反序列化的样式属性名称",
                    "type": "String"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17339,
            "description": "反序列化XML数据到网元容器的Style属性",
            "itemtype": "method",
            "name": "twaver.ElementBox.deserializeStyleXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "styleXml",
                    "description": "XML数据",
                    "type": "String"
                },
                {
                    "name": "styleProp",
                    "description": "序列化的样式属性名称",
                    "type": "String"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17348,
            "description": "派发网元Index变化事件。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.ElementBox.fireIndexChange",
            "params": [
                {
                    "name": "element",
                    "description": "Index发生变化的网元",
                    "type": "twaver.Element"
                },
                {
                    "name": "oldIndex",
                    "description": "网元Index的原值",
                    "type": "Number"
                },
                {
                    "name": "newIndex",
                    "description": "网元Index的新值",
                    "type": "Number"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17357,
            "description": "迭代指定图层上的网元。如果指定的图层为空，则迭代网元容器中的所有网元",
            "itemtype": "method",
            "name": "twaver.ElementBox.forEachByLayer",
            "params": [
                {
                    "name": "callbackFunction",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "layer",
                    "description": "迭代网元的图层",
                    "type": "twaver.Layer"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是顶层的面板，即window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17366,
            "description": "反序迭代指定图层上的网元。如果指定的图层为空，则迭代网元容器中的所有网元",
            "itemtype": "method",
            "name": "twaver.ElementBox.forEachByLayerReverse",
            "params": [
                {
                    "name": "callbackFunction",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "layer",
                    "description": "迭代网元的图层",
                    "type": "twaver.Layer"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，为空时指的是顶层的面板，即window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17375,
            "description": "获取网元容器中的告警容器",
            "itemtype": "method",
            "name": "twaver.ElementBox.getAlarmBox",
            "return": {
                "description": "告警容器",
                "type": "twaver.AlarmBox"
            },
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17382,
            "description": "获取告警传播对象：默认孩子最高级别的告警会传给父亲",
            "itemtype": "method",
            "name": "twaver.ElementBox.getAlarmStatePropagator",
            "return": {
                "description": "告警传播对象",
                "type": "twaver.AlarmStatePropagator"
            },
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17389,
            "description": "获取网元容器中的图层容器",
            "itemtype": "method",
            "name": "twaver.ElementBox.getLayerBox",
            "return": {
                "description": "图层容器",
                "type": "twaver.LayerBox"
            },
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17396,
            "description": "获取网元容器某个样式属性的值",
            "itemtype": "method",
            "name": "twaver.ElementBox.getStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "网元容器的样式属性名称",
                    "type": "String"
                },
                {
                    "name": "returnDefaultIfNull",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "网元容器的样式属性值",
                "type": "Object"
            },
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17405,
            "description": "获取网元容器的所有样式属性名称",
            "itemtype": "method",
            "name": "twaver.ElementBox.getStyleProperties",
            "return": {
                "description": "样式属性的集合",
                "type": "twaver.List"
            },
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17412,
            "description": "是否是Style的标识",
            "itemtype": "property",
            "name": "IStyle",
            "type": "Boolean",
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17419,
            "description": "当网元容器的样式发生变化时，回调此函数",
            "itemtype": "method",
            "name": "twaver.ElementBox.onStyleChanged",
            "params": [
                {
                    "name": "styleProp",
                    "description": "网元容器的样式属性名称",
                    "type": "String"
                },
                {
                    "name": "oldValue",
                    "description": "网元容器的样式属性原值",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "网元容器的样式属性新值",
                    "type": "String"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17428,
            "description": "移除网元序号变化的事件监听器",
            "itemtype": "method",
            "name": "twaver.ElementBox.removeIndexChangeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "网元序号变化的事件监听器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "监听器的作用域，为空时指的是window",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17436,
            "description": "设置指定的网元处于某个网元的底层。当refElement为空时，设置指定在网元容器的最底层",
            "itemtype": "method",
            "name": "twaver.ElementBox.sendToBottom",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                },
                {
                    "name": "refElement",
                    "description": "为空时，将网元设置到最底层",
                    "type": "twaver.Element",
                    "optional": true
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17444,
            "description": "设置指定的网元处于网元容易的最顶层",
            "itemtype": "method",
            "name": "twaver.ElementBox.sendToTop",
            "params": [
                {
                    "name": "element",
                    "description": "网元对象",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17451,
            "description": "序列化网元容器的Style属性到JSON数据",
            "itemtype": "method",
            "name": "twaver.ElementBox.serializeStyleJson",
            "params": [
                {
                    "name": "serializer",
                    "description": "JSON序列化对象",
                    "type": "twaver.JsonSerializer"
                },
                {
                    "name": "stylePrope",
                    "description": "序列化的样式属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.ElementBox"
                },
                {
                    "name": "dataObject",
                    "description": "JSON数据对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17461,
            "description": "序列化网元容器的Style属性到XML数据",
            "itemtype": "method",
            "name": "twaver.ElementBox.serializeStyleXml",
            "params": [
                {
                    "name": "serializer",
                    "description": "XML序列化对象",
                    "type": "twaver.XmlSerializer"
                },
                {
                    "name": "stylePrope",
                    "description": "网元样式属性名称",
                    "type": "String"
                },
                {
                    "name": "newInstance",
                    "description": "序列化的实例对象",
                    "type": "twaver.ElementBox"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17470,
            "description": "设置网元容器的样式值",
            "itemtype": "method",
            "name": "twaver.ElementBox.setStyle",
            "params": [
                {
                    "name": "styleProp",
                    "description": "网元样式属性名称",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "网元样式属性的新值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "网元容器对象本身",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17479,
            "description": "开始批量添加网元",
            "itemtype": "method",
            "name": "twaver.ElementBox.startBatch",
            "params": [
                {
                    "name": "callback",
                    "description": "批量添加数据回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域",
                    "type": "Object"
                }
            ],
            "class": "twaver.ElementBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17503,
            "description": "是否为图层的标识",
            "itemtype": "property",
            "name": "ILayer",
            "type": "Boolean",
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17510,
            "description": "判断图层是否可编辑，当设置为false时，其上的网元也不可编辑",
            "itemtype": "method",
            "name": "twaver.Layer.isEditable",
            "return": {
                "description": "true为可编辑，false不可编辑",
                "type": "Boolean"
            },
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17517,
            "description": "判断图层是否可移动，当设置为false时，其上的网元也不可移动",
            "itemtype": "method",
            "name": "twaver.Layer.isMovable",
            "return": {
                "description": "true为可移动，false为不可移动",
                "type": "Boolean"
            },
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17524,
            "description": "获取是否可旋转",
            "itemtype": "method",
            "name": "twaver.Layer.isRotatable",
            "return": {
                "description": "返回是否可旋转",
                "type": "Boolean"
            },
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17531,
            "description": "判断图层是否可见，当设置为false时，其上的网元也不可见",
            "itemtype": "method",
            "name": "twaver.Layer.isVisible",
            "return": {
                "description": "true为可见，false不可见",
                "type": "Boolean"
            },
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17538,
            "description": "设置图层是否可编辑，当设置为false时，其上的网元也不可编辑",
            "itemtype": "method",
            "name": "twaver.Layer.setEditable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可编辑，false不可编辑",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17545,
            "description": "设置图层是否可移动，当设置为false时，其上的网元也不可移动",
            "itemtype": "method",
            "name": "twaver.Layer.setMovable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可移动，false不可移动",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17552,
            "description": "设置是否可旋转",
            "itemtype": "method",
            "name": "twaver.Layer.setRotatable",
            "params": [
                {
                    "name": "v",
                    "description": "是否可旋转",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17559,
            "description": "设置图层是否可见，当设置为false时，其上的网元也不可见",
            "itemtype": "method",
            "name": "twaver.Layer.setVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，false不可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Layer"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17584,
            "description": "获取默认的图层对象",
            "itemtype": "method",
            "name": "twaver.LayerBox.getDefaultLayer",
            "return": {
                "description": "默认的图层对象",
                "type": "twaver.Layer"
            },
            "class": "twaver.LayerBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17591,
            "description": "获取包含图层容器的网元容器",
            "itemtype": "method",
            "name": "twaver.LayerBox.getElementBox",
            "return": {
                "description": "包含图层容器的网元容器",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.LayerBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17598,
            "description": "获取指定网元上的图层",
            "itemtype": "method",
            "name": "twaver.LayerBox.getLayerByElement",
            "params": [
                {
                    "name": "element",
                    "description": "指定的网元对象",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "图层对象",
                "type": "twaver.Layer"
            },
            "class": "twaver.LayerBox"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17634,
            "description": "画网格内容",
            "itemtype": "method",
            "name": "twaver.network.GridUI.drawGridBody",
            "class": "twaver.network.GridUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17654,
            "description": "画展开后的组，用group.shape样式属性定义的形状画出矢量图形",
            "itemtype": "method",
            "name": "twaver.network.GroupUI.drawExpandedGroup",
            "class": "twaver.network.GroupUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17660,
            "description": "获取所有孩子的区域",
            "itemtype": "method",
            "name": "twaver.network.GroupUI.getChildrenRects",
            "return": {
                "description": "返回所有孩子的区域",
                "type": "twaver.List"
            },
            "class": "twaver.network.GroupUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17732,
            "description": "获取标签文本",
            "itemtype": "method",
            "name": "twaver.network.LabelAttachment.getLabel",
            "return": {
                "description": "返回标签文本",
                "type": "String"
            },
            "class": "twaver.network.LabelAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17771,
            "description": "将Network的视图中心点滚动到指定的相对于Overview的坐标",
            "itemtype": "method",
            "name": "twaver.network.Overview.centerNetwork",
            "params": [
                {
                    "name": "point",
                    "description": "相对于Overview的包含x和y属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "animate",
                    "description": "可选，如果为true，则有动画效果，否则没有，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17779,
            "description": "获取Overview的填充色，默认值为twaver.Defaults.OVERVIEW_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Overview.getFillColor",
            "return": {
                "description": "返回Overview的填充色",
                "type": "String"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17786,
            "description": "获取鼠标所在的逻辑坐标，包含x，y属性",
            "itemtype": "method",
            "name": "twaver.network.Overview.getLogicalPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标所在的逻辑坐标，包含x，y属性",
                "type": "Object"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17794,
            "description": "获取Overview最大伸缩高度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_HEIGHT",
            "itemtype": "method",
            "name": "twaver.network.Overview.getMaxPackingHeight",
            "return": {
                "description": "返回Overview最大伸缩高度",
                "type": "Number"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17801,
            "description": "获取Overview最大伸缩宽度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Overview.getMaxPackingWidth",
            "return": {
                "description": "返回Overview最大伸缩宽度",
                "type": "Number"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17808,
            "description": "获取和Overview绑定的拓扑视图",
            "itemtype": "method",
            "name": "twaver.network.Overview.getNetwork",
            "return": {
                "description": "返回和Overview绑定的拓扑视图",
                "type": "twaver.network.Network"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17815,
            "description": "获取Overview边框线条颜色，默认值为twaver.Defaults.OVERVIEW_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Overview.getOutlineColor",
            "return": {
                "description": "返回Overview边框线条颜色",
                "type": "String"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17822,
            "description": "获取Overview边框线条宽度，默认值为twaver.Defaults.OVERVIEW_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Overview.getOutlineWidth",
            "return": {
                "description": "返回Overview边框线条宽度",
                "type": "Number"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17829,
            "description": "获取Overview边缘空白大小，默认值为twaver.Defaults.OVERVIEW_PADDING",
            "itemtype": "method",
            "name": "twaver.network.Overview.getPadding",
            "return": {
                "description": "返回Overview边缘空白大小",
                "type": "Number"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17836,
            "description": "获取Overview框选时轮廓的线条颜色，默认值为twaver.Defaults.OVERVIEW_SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Overview.getSelectColor",
            "return": {
                "description": "返回Overview框选时轮廓的线条颜色",
                "type": "String"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17843,
            "description": "获取Overview框选时轮廓的线条宽度，默认值为twaver.Defaults.OVERVIEW_SELECT_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Overview.getSelectWidth",
            "return": {
                "description": "返回Overview框选时轮廓的线条宽度",
                "type": "Number"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17850,
            "description": "获取操作Overview时，是否使用动画效果，默认值为twaver.Defaults.OVERVIEW_ANIMATE",
            "itemtype": "method",
            "name": "twaver.network.Overview.isAnimate",
            "return": {
                "description": "返回是否使用动画效果",
                "type": "Boolean"
            },
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17857,
            "description": "设置操作Overview时，是否使用动画效果，默认值为twaver.Defaults.OVERVIEW_ANIMATE",
            "itemtype": "method",
            "name": "twaver.network.Overview.setAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "是否使用动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17864,
            "description": "设置Overview的填充色，默认值为twaver.Defaults.OVERVIEW_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Overview.setFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17871,
            "description": "设置Overview最大伸缩高度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_HEIGHT",
            "itemtype": "method",
            "name": "twaver.network.Overview.setMaxPackingHeight",
            "params": [
                {
                    "name": "v",
                    "description": "Overview最大伸缩高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17878,
            "description": "设置Overview最大伸缩宽度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Overview.setMaxPackingWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview最大伸缩宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17885,
            "description": "设置和Overview绑定的拓扑视图",
            "itemtype": "method",
            "name": "twaver.network.Overview.setNetwork",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.network.Network"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17892,
            "description": "设置Overview边框线条颜色，默认值为twaver.Defaults.OVERVIEW_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Overview.setOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边框线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17899,
            "description": "设置Overview边框线条宽度，默认值为twaver.Defaults.OVERVIEW_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Overview.setOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边框线条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17906,
            "description": "设置Overview边缘空白大小，默认值为twaver.Defaults.OVERVIEW_PADDING",
            "itemtype": "method",
            "name": "twaver.network.Overview.setPadding",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边缘空白大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17913,
            "description": "设置Overview框选时轮廓的线条颜色，默认值为twaver.Defaults.OVERVIEW_SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Overview.setSelectColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview框选时轮廓的线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17920,
            "description": "设置Overview框选时轮廓的线条宽度，默认值为twaver.Defaults.OVERVIEW_SELECT_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Overview.setSelectWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview框选时轮廓的线条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17983,
            "description": "获取属性项所属的Category的名称",
            "itemtype": "method",
            "name": "twaver.Property.getCategoryName",
            "return": {
                "description": "Category的名称",
                "type": "String"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17990,
            "description": "获取编辑属性项时显示的内容。如果属性项中设置了多个值，编辑时会以combobox的样式来呈现。\n例如：{map:{1:'male', 2:'female'}, values:[1, 2]} 或 ['male', 'female']。",
            "itemtype": "method",
            "name": "twaver.Property.getEnumInfo",
            "return": {
                "description": "编辑属性项时显示的内容",
                "type": "Object"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 17998,
            "description": "获取属性项的水平对齐方式。可选值：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.Property.getHorizontalAlign",
            "return": {
                "description": "水平对齐方式",
                "type": "String"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18011,
            "description": "获取属性表的属性项所对应的网元属性名",
            "itemtype": "method",
            "name": "twaver.Property.getPropertyName",
            "return": {
                "description": "属性表的属性项所对应网元的属性名",
                "type": "String"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18018,
            "description": "获取网元属性的类型。可选值有\n'field'：网元的自身变量属性，\n'accessor', 网元get/set方法的属性，\n'style'：网元样式属性,\n'client'：网元自定义属性",
            "itemtype": "method",
            "name": "twaver.Property.getPropertyType",
            "return": {
                "description": "网元属性类型",
                "type": "String"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18029,
            "description": "从Data中获取对应的属性项的值，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.Property.getValue",
            "params": [
                {
                    "name": "data",
                    "description": "属性页绑定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "view",
                    "description": "绑定的属性页",
                    "type": "twaver.controls.PropertySheet"
                }
            ],
            "return": {
                "description": "返回属性项的值",
                "type": "Object"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18038,
            "description": "获取属性项中值的类型。可选值有：\n'string'：字符串类型，\n'boolean'：布尔类型， \n'color'：颜色类型， \n'int'：整型，\n'number'：数字类型",
            "itemtype": "method",
            "name": "twaver.Property.getValueType",
            "return": {
                "description": "属性项中值的类型",
                "type": "String"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18050,
            "description": "是否是属性项的标志",
            "itemtype": "property",
            "name": "IProperty",
            "type": "Boolean",
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18057,
            "description": "判断属性表的属性项是否可编辑",
            "itemtype": "method",
            "name": "twaver.Property.isEditable",
            "return": {
                "description": "true为可编辑，false不可编辑",
                "type": "Boolean"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18064,
            "description": "获取属性页列内容是否为纯文本",
            "itemtype": "method",
            "name": "twaver.Property.isInnerText",
            "return": {
                "description": "返回属性页列内容是否为纯文本",
                "type": "Boolean"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18071,
            "description": "true表示属性项显示，false不显示",
            "itemtype": "property",
            "name": "isVisible",
            "type": "Boolean",
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18078,
            "description": "这个属性项所对应的render的名称",
            "itemtype": "property",
            "name": "renderName",
            "type": "String",
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18085,
            "itemtype": "property",
            "name": "renderValue",
            "type": "Object",
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18092,
            "description": "设置属性项所属的Category的名称",
            "itemtype": "method",
            "name": "twaver.Property.setCategoryName",
            "params": [
                {
                    "name": "v",
                    "description": "Category的名称",
                    "type": "String"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18099,
            "description": "设置属性表的属性项是否可编辑",
            "itemtype": "method",
            "name": "twaver.Property.setEditable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可编辑，false不可编辑",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18106,
            "description": "设置编辑属性项时显示的内容。如果属性项中设置了多个值，编辑时会以combobox的样式来呈现。\n例如：{map:{1:'male', 2:'female'}, values:[1, 2]} 或 ['male', 'female']",
            "itemtype": "method",
            "name": "twaver.Property.setEnumInfo",
            "params": [
                {
                    "name": "v",
                    "description": "编辑属性项时显示的内容",
                    "type": "Object"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18114,
            "description": "设置属性项的水平对齐方式。可选值：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.Property.setHorizontalAlign",
            "params": [
                {
                    "name": "v",
                    "description": "水平对齐方式",
                    "type": "String"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18127,
            "description": "设置属性页列内容是否为纯文本",
            "itemtype": "method",
            "name": "twaver.Property.setInnerText",
            "params": [
                {
                    "name": "v",
                    "description": "属性页列内容是否为纯文本",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18134,
            "description": "设置属性表的属性项所对应的网元属性名",
            "itemtype": "method",
            "name": "twaver.Property.setPropertyName",
            "params": [
                {
                    "name": "value",
                    "description": "属性表的属性项所对应网元的属性名",
                    "type": "String"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18141,
            "description": "设置网元属性的类型。可选值有\n'field'：网元的自身变量属性，\n'accessor', 网元get/set方法的属性，\n'style'：网元样式属性,\n'client'：网元自定义属性",
            "itemtype": "method",
            "name": "twaver.Property.setPropertyType",
            "params": [
                {
                    "name": "value",
                    "description": "网元属性的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18152,
            "description": "设置属性页上的值回写到data中，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.Property.setValue",
            "params": [
                {
                    "name": "data",
                    "description": "属性页绑定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "value",
                    "description": "属性项的值",
                    "type": "Object"
                },
                {
                    "name": "view",
                    "description": "属性页",
                    "type": "twaver.controls.PropertySheet"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Data"
            },
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18162,
            "description": "得到属性项中值的类型。可选值有：\n'string'：字符串类型，\n'boolean'：布尔类型， \n'color'：颜色类型， \n'int'：整型，\n'number'：数字类型",
            "itemtype": "method",
            "name": "twaver.Property.setValueType",
            "params": [
                {
                    "name": "v",
                    "description": "属性项中值的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.Property"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18201,
            "description": "获取显示在选项卡中的视图组件",
            "itemtype": "method",
            "name": "twaver.Tab.getView",
            "return": {
                "description": "视图组件",
                "type": "Object"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18208,
            "description": "获取选项卡的宽度",
            "itemtype": "method",
            "name": "twaver.Tab.getWidth",
            "return": {
                "description": "选项卡的宽度",
                "type": "Number"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18215,
            "description": "获取选项卡是否可关闭。默认值为false",
            "itemtype": "method",
            "name": "twaver.Tab.isClosable",
            "return": {
                "description": "true为可关闭，false不可关闭",
                "type": "Boolean"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18222,
            "description": "获取选项卡是否不可用。默认值为false",
            "itemtype": "method",
            "name": "twaver.Tab.isDisabled",
            "return": {
                "description": "true为可用，false不可用",
                "type": "Boolean"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18229,
            "description": "判断是否可移动，默认值为true",
            "itemtype": "method",
            "name": "twaver.Tab.isMovable",
            "return": {
                "description": "true为可移动，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18236,
            "description": "判断是否可改变大小，默认值为true",
            "itemtype": "method",
            "name": "twaver.Tab.isResizable",
            "return": {
                "description": "true为可改变大小，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18243,
            "description": "判断是否可见",
            "itemtype": "method",
            "name": "twaver.Tab.isVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18250,
            "description": "是否是选项卡的标识",
            "itemtype": "property",
            "name": "ITab",
            "type": "Boolean",
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18257,
            "description": "设置选项卡是否可关闭。默认值为false",
            "itemtype": "method",
            "name": "twaver.Tab.setClosable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可关闭，false不可关闭",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18264,
            "description": "设置选项卡是否不可用，默认值为false",
            "itemtype": "method",
            "name": "twaver.Tab.setDisabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可用，false不可用",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18271,
            "description": "设置是否可移动，默认值为true",
            "itemtype": "method",
            "name": "twaver.Tab.setMovable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可移动，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18278,
            "description": "设置是否可改变大小，默认值为true",
            "itemtype": "method",
            "name": "twaver.Tab.setResizable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可改变大小，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18285,
            "description": "设置显示在选项卡中的视图组件",
            "itemtype": "method",
            "name": "twaver.Tab.setView",
            "params": [
                {
                    "name": "v",
                    "description": "视图组件",
                    "type": "Object"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18292,
            "description": "设置是否可见，默认值为true",
            "itemtype": "method",
            "name": "twaver.Tab.setVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18299,
            "description": "设置选项卡的宽度",
            "itemtype": "method",
            "name": "twaver.Tab.setWidth",
            "params": [
                {
                    "name": "v",
                    "description": "选项卡的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.Tab"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18347,
            "description": "画网格内容",
            "itemtype": "method",
            "name": "twaver.vector.GridUI.drawGridBody",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.GridUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18368,
            "description": "画展开后的组，用group.shape样式属性定义的形状画出矢量图形",
            "itemtype": "method",
            "name": "twaver.vector.GroupUI.drawExpandedGroup",
            "params": [
                {
                    "name": "ctx",
                    "description": "canvas画布",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.GroupUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18375,
            "description": "获取所有孩子的区域",
            "itemtype": "method",
            "name": "twaver.vector.GroupUI.getChildrenRects",
            "return": {
                "description": "返回所有孩子的区域",
                "type": "twaver.List"
            },
            "class": "twaver.vector.GroupUI"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18429,
            "description": "获取标签文本",
            "itemtype": "method",
            "name": "twaver.vector.Label2Attachment.getLabel",
            "return": {
                "description": "返回标签文本",
                "type": "String"
            },
            "class": "twaver.vector.Label2Attachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18450,
            "description": "获取标签文本",
            "itemtype": "method",
            "name": "twaver.vector.LabelAttachment.getLabel",
            "return": {
                "description": "返回标签文本",
                "type": "String"
            },
            "class": "twaver.vector.LabelAttachment"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18501,
            "description": "将Network的视图中心点滚动到指定的相对于Overview的坐标",
            "itemtype": "method",
            "name": "twaver.vector.Overview.centerNetwork",
            "params": [
                {
                    "name": "point",
                    "description": "相对于Overview的包含x和y属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "animate",
                    "description": "可选，如果为true，则有动画效果，否则没有，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18509,
            "description": "获取Overview的填充色，默认值为twaver.Defaults.OVERVIEW_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getFillColor",
            "return": {
                "description": "返回Overview的填充色",
                "type": "String"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18516,
            "description": "获取鼠标所在的逻辑坐标，包含x，y属性",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getLogicalPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标所在的逻辑坐标，包含x，y属性",
                "type": "Object"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18524,
            "description": "获取Overview最大伸缩高度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_HEIGHT",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getMaxPackingHeight",
            "return": {
                "description": "返回Overview最大伸缩高度",
                "type": "Number"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18531,
            "description": "获取Overview最大伸缩宽度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getMaxPackingWidth",
            "return": {
                "description": "返回Overview最大伸缩宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18538,
            "description": "获取和Overview绑定的拓扑视图",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getNetwork",
            "return": {
                "description": "返回和Overview绑定的拓扑视图",
                "type": "twaver.network.Network"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18545,
            "description": "获取Overview边框线条颜色，默认值为twaver.Defaults.OVERVIEW_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getOutlineColor",
            "return": {
                "description": "返回Overview边框线条颜色",
                "type": "String"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18552,
            "description": "获取Overview边框线条宽度，默认值为twaver.Defaults.OVERVIEW_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getOutlineWidth",
            "return": {
                "description": "返回Overview边框线条宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18559,
            "description": "获取Overview边缘空白大小，默认值为twaver.Defaults.OVERVIEW_PADDING",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getPadding",
            "return": {
                "description": "返回Overview边缘空白大小",
                "type": "Number"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18566,
            "description": "获取Overview框选时轮廓的线条颜色，默认值为twaver.Defaults.OVERVIEW_SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getSelectColor",
            "return": {
                "description": "返回Overview框选时轮廓的线条颜色",
                "type": "String"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18573,
            "description": "获取Overview框选时轮廓的线条宽度，默认值为twaver.Defaults.OVERVIEW_SELECT_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Overview.getSelectWidth",
            "return": {
                "description": "返回Overview框选时轮廓的线条宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18580,
            "description": "获取操作Overview时，是否使用动画效果，默认值为twaver.Defaults.OVERVIEW_ANIMATE",
            "itemtype": "method",
            "name": "twaver.vector.Overview.isAnimate",
            "return": {
                "description": "返回是否使用动画效果",
                "type": "Boolean"
            },
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18587,
            "description": "设置操作Overview时，是否使用动画效果，默认值为twaver.Defaults.OVERVIEW_ANIMATE",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "是否使用动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18594,
            "description": "设置Overview的填充色，默认值为twaver.Defaults.OVERVIEW_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18601,
            "description": "设置Overview最大伸缩高度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_HEIGHT",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setMaxPackingHeight",
            "params": [
                {
                    "name": "v",
                    "description": "Overview最大伸缩高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18608,
            "description": "设置Overview最大伸缩宽度，默认值为twaver.Defaults.OVERVIEW_MAX_PACKING_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setMaxPackingWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview最大伸缩宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18615,
            "description": "设置和Overview绑定的拓扑视图",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setNetwork",
            "params": [
                {
                    "name": "network",
                    "description": "拓扑视图",
                    "type": "twaver.network.Network"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18622,
            "description": "设置Overview边框线条颜色，默认值为twaver.Defaults.OVERVIEW_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边框线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18629,
            "description": "设置Overview边框线条宽度，默认值为twaver.Defaults.OVERVIEW_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边框线条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18636,
            "description": "设置Overview边缘空白大小，默认值为twaver.Defaults.OVERVIEW_PADDING",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setPadding",
            "params": [
                {
                    "name": "v",
                    "description": "Overview边缘空白大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18643,
            "description": "设置Overview框选时轮廓的线条颜色，默认值为twaver.Defaults.OVERVIEW_SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setSelectColor",
            "params": [
                {
                    "name": "v",
                    "description": "Overview框选时轮廓的线条颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18650,
            "description": "设置Overview框选时轮廓的线条宽度，默认值为twaver.Defaults.OVERVIEW_SELECT_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Overview.setSelectWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Overview框选时轮廓的线条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Overview"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18712,
            "description": "添加Chart图中悬浮信息框的内容，TWaver内部调用，重写此方法可以更改Chart图上提示信息的显示内容",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.addToolTipInfo",
            "params": [
                {
                    "name": "x",
                    "description": "提示信息显示的X轴上的坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "提示信息显示的Y轴上的坐标",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "提示信息显示的宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "提示信息显示的高度",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "提示信息显示的内容",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "提示信息所对应的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "index",
                    "description": "数据所对应的索引值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18725,
            "description": "创建显示在Chart图上的数据，TWaver内部调用",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.createPublishedDatas",
            "return": {
                "description": "所有发布的数据集合",
                "type": "twaver.List"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18732,
            "description": "绘制图表的背景。当显示图表时，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.drawBackground",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表背景的画笔",
                    "type": "Object"
                },
                {
                    "name": "rect",
                    "description": "图表背景的显示矩形区域。rect是一个包含x,y,width,height的对象。",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18740,
            "description": "绘制一条直线，TWaver绘制图表时调用此方法",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.drawLine",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "Object"
                },
                {
                    "name": "color",
                    "description": "绘制的直线颜色",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "绘制的直线宽度",
                    "type": "String"
                },
                {
                    "name": "x1",
                    "description": "直线的起始点X坐标值",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "直线的起始点Y坐标值",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "直线的终点X坐标值",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "直线的终点Y坐标值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18753,
            "description": "绘制值，TWaver绘制图表时调用此方法",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.drawValueTexts",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "Object"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18760,
            "description": "绘制垂直显示的文本内容，TWaver绘制图表时调用此方法",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.drawVerticalText",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "绘制的文本内容",
                    "type": "String"
                },
                {
                    "name": "cx",
                    "description": "文本显示为值的起始坐标点，它是一个包含x，y坐标值的对象",
                    "type": "Object"
                },
                {
                    "name": "font",
                    "description": "文本的字体",
                    "type": "Object"
                },
                {
                    "name": "color",
                    "description": "文本的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18771,
            "description": "格式化文本的值，当显示图表时调用此方法，用户可以重写这个方法来对显示的文本进行格式化",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.formatValueText",
            "params": [
                {
                    "name": "value",
                    "description": "需要格式的值",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "格式化的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "格式化后的字符值",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18780,
            "description": "获取图表的背景是否填充，默认为twaver.Defaults.CHART_BACKGROUND_FILL",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundFill",
            "return": {
                "description": "true为填充背景，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18787,
            "description": "获取图表背景的填充色，默认为twaver.Defaults.CHART_BACKGROUND_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundFillColor",
            "return": {
                "description": "背景的填充色",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18794,
            "description": "获取背景的渐变类型，默认为twaver.Defaults.CHART_BACKGROUND_GRADIENT。\n渐变类型的可选值为：\n'linear.southwest'：线性.南西\n'linear.southeast'：线性.南东\n'linear.northwest'：线性.北西\n'linear.northeast'：线性.北东\n'linear.north'：线性.北\n'linear.south'：线性.南\n'linear.west'：线性.西\n'linear.east'：线性.东\n'radial.center'：放射.中\n'radial.southwest'：放射.南西\n'radial.southeast'：放射.南东\n'radial.northwest'：放射.北西\n'radial.northeast'：放射.北东\n'radial.north'：放射.北\n'radial.south'：放射.南\n'radial.west'：放射.西\n'radial.east'：放射.东\n'spread.horizontal':扩展.水平\n'spread.vertical':扩展.垂直\n'spread.diagonal':扩展.对角线\n'spread.antidiagonal':扩展.反对角线\n'spread.north':扩展.北\n'spread.south':扩展.南\n'spread.west':扩展.西\n'spread.east':扩展.东",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundGradient",
            "return": {
                "description": "渐变类型",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18828,
            "description": "获取背景的渐变颜色，默认为twaver.Defaults.CHART_BACKGROUND_GRADIENT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundGradientColor",
            "return": {
                "description": "渐变颜色",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18835,
            "description": "获取背景的外边框颜色，默认为twaver.Defaults.CHART_BACKGROUND_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundOutlineColor",
            "return": {
                "description": "外边框颜色",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18842,
            "description": "获取背景的外边框宽度，默认为 twaver.Defaults.CHART_BACKGROUND_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundOutlineWidth",
            "return": {
                "description": "外边框的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18849,
            "description": "获取背景的显示区域",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getBackgroundRect",
            "return": {
                "description": "背景的显示矩形范围",
                "type": "Object"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18856,
            "description": "获取图表上的画板",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getCanvas",
            "return": {
                "description": "图表的画板",
                "type": "Object"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18863,
            "description": "获取画板的高度",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getCanvasHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18870,
            "description": "获取画板的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getCanvasWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18877,
            "description": "绘制图表上指定数据的颜色，它取的是data中的chart.color值",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getColor",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "颜色值",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18885,
            "description": "获取指定坐标点上的数据对象。参数可以为1个或2个。当参数为一个时，可以是包含x，y坐标值的对象，也可以是鼠标事件对象；当参数为两个时，必须是x，y坐标",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getDataAt",
            "return": {
                "description": "数据对象",
                "type": "twaver.Data"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18892,
            "description": "获取和这个图表绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getDataBox",
            "return": {
                "description": "",
                "type": "twaver.DataBox"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18899,
            "description": "通过鼠标事件获取当前鼠标点的逻辑坐标",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getLogicalPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件对象",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "包含x，y的坐标点的对象",
                "type": "Object"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18907,
            "description": "获取最大的缩放比例值，默认为twaver.Defaults.ZOOM_MAX",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getMaxZoom",
            "return": {
                "description": "缩放比例值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18914,
            "description": "获取最小的缩放比例值，默认为twaver.Defaults.ZOOM_MIN",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getMinZoom",
            "return": {
                "description": "缩放比例值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18921,
            "description": "获取指定数据的名称",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getName",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "数据的名称",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18929,
            "description": "获取外部缩放级别",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getOuterZoom",
            "return": {
                "description": "返回外部缩放级别",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18936,
            "description": "获取显示在图表上的数据",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getPublishedDatas",
            "return": {
                "description": "所有发布的数据",
                "type": "twaver.List"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18943,
            "description": "获取Chart上选择网元时的公差。默认值为twaver.Defaults.CHART_SELECT_TOLERANCE。当设置了这个值后，点击图表上的网元在这个偏差的范围值之内都能选中这个网元",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getSelectTolerance",
            "return": {
                "description": "选择网元时的公差",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18950,
            "description": "获取图表上排序的函数，默认为空",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18957,
            "description": "获取图表上显示文本的大小",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getTextSize",
            "params": [
                {
                    "name": "font",
                    "description": "显示的字体",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "文本值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "显示文本的大小，是一个包含width，height的对象",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18966,
            "description": "获取指定数据显示的提示信息",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getToolTipByData",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "info",
                    "description": "关联信息",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回提示信息",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18975,
            "description": "获取图表上所有显示的数据",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getUnfilteredDatas",
            "return": {
                "description": "显示的数据的集合",
                "type": "twaver.List"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18982,
            "description": "通过指定的对象和颜色值获取唯一的对象颜色值，用于区分不同的网元设置相同的颜色。如果对象设置了相同的颜色值，调用此方法可以对其中的一个颜色值做一些偏移",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getUniqueColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data",
                    "optional": true
                }
            ],
            "return": {
                "description": "颜色值对象",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18991,
            "description": "获取指定的数据在图表上的值，默认取的是Style上的'chart.value'的值",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getValue",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "指定的数据在图表上的值",
                "type": "Object"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 18999,
            "description": "获取指定的数据在图表上值的颜色，默认取的是Style上的'chart.value.color'的值",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getValueColor",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "指定的数据在图表上值的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19007,
            "description": "获取指定的数据在图表上值的字体，默认取的是Style上的'chart.value.font'的值",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getValueFont",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "指定的数据在图表上值的字体",
                "type": "String"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19015,
            "description": "获取图表上是否可见的函数，这个函数可以过滤哪些网元显示，哪些不显示",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getVisibleFunction",
            "return": {
                "description": "是否可见的过滤器函数",
                "type": "Function"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19022,
            "description": "获取水平方向的间距，默认为\ntwaver.Defaults.CHART_XGAP",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getXGap",
            "return": {
                "description": "水平方向的间距",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19031,
            "description": "获取图表上X轴方向的偏移值，默认为0",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getXTranslate",
            "return": {
                "description": "X轴方向的偏移值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19039,
            "description": "获取图表的X轴方向的缩放值，默认为1",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getXZoom",
            "return": {
                "description": "图表上X轴方向的缩放值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19046,
            "description": "获取垂直方向的间距，默认为\ntwaver.Defaults.CHART_YGAP",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getYGap",
            "return": {
                "description": "垂直方向的间距",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19054,
            "description": "获取图表上Y轴方向的偏移值，默认为0",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getYTranslate",
            "return": {
                "description": "Y轴方向的偏移值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19061,
            "description": "获取图表的Y轴方向的缩放值，默认为1",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.getYZoom",
            "return": {
                "description": "Y轴方向的缩放值",
                "type": "Number"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19068,
            "description": "当数据容器中数据发生变化时，TWaver内部会调用此方法，同步图表的显示。",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.handleDataBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据容器更改的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19075,
            "description": "当数据的层次关系发生变化时，TWaver内部会调用此方法来更新图表的显示",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.handleHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "层次关系变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19082,
            "description": "当数据容器中的数据发生变化时，TWaver内部会调用此方法来更新图表的显示",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.handlePropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据更改事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19089,
            "description": "当选择容器中的数据发生变化时，TWaver内部会调用此方法来更新图表的显示",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择数据变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19096,
            "description": "刷新和图表绑定的数据容器，当数据容器发生变化时，TWaver内部会调用此方法。用户不需要直接调用此方法，可以重载这个方法做自己的处理",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.invalidateModel",
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19102,
            "description": "判断图表的背景是否可见，默认为twaver.Defaults.CHART_BACKGROUND_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isBackgroundVisible",
            "return": {
                "description": "true为可见，false不可见",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19109,
            "description": "判断双击是否还原成默认的初始状态，默认为\ntwaver.Defaults.CHART_DOUBLE_CLICK_TO_RESET",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isDoubleClickToReset",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19117,
            "description": "判断悬浮信息框是否生效",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isToolTipEnabled",
            "return": {
                "description": "true为生效，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19124,
            "description": "判断图表上网元的值是否可见，默认为twaver.Defaults.CHART_VALUE_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isValueVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19131,
            "description": "判断图表上指定的数据是否可见",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isVisible",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19139,
            "description": "是否允许X轴进行偏移，默认为twaver.Defaults.CHART_XTRANSLATE_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isXTranslateEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19146,
            "description": "判断X轴方向是否允许缩放，默认为 twaver.Defaults.CHART_XZOOM_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isXZoomEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19153,
            "description": "是否允许Y轴进行偏移，默认为twaver.Defaults.CHART_YTRANSLATE_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isYTranslateEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19160,
            "description": "判断Y轴方向是否允许缩放，默认为 twaver.Defaults.CHART_YZOOM_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.isYZoomEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19167,
            "description": "当X轴的缩放比例变化时，回调此方法。默认实现为空，用户可以重写这个方法进行自己的处理",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.onXZoomChanged",
            "params": [
                {
                    "name": "oldZoom",
                    "description": "X轴缩放的原值",
                    "type": "Number"
                },
                {
                    "name": "newZoom",
                    "description": "X轴缩放的新值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19175,
            "description": "当Y轴的缩放比例变化时，回调此方法。默认实现为空，用户可以重写这个方法进行自己的处理",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.onYZoomChanged",
            "params": [
                {
                    "name": "oldZoom",
                    "description": "Y轴缩放的原值",
                    "type": "Number"
                },
                {
                    "name": "newZoom",
                    "description": "Y轴缩放的新值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19183,
            "description": "设置图表的背景是否填充，默认为twaver.Defaults.CHART_BACKGROUND_FILL",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundFill",
            "params": [
                {
                    "name": "v",
                    "description": "true为填充背景，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19190,
            "description": "设置图表背景的填充色，默认为twaver.Defaults.CHART_BACKGROUND_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "背景的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19197,
            "description": "设置背景的渐变类型，默认为twaver.Defaults.CHART_BACKGROUND_GRADIENT。\n渐变类型的可选值为：\n'linear.southwest'：线性.南西\n'linear.southeast'：线性.南东\n'linear.northwest'：线性.北西\n'linear.northeast'：线性.北东\n'linear.north'：线性.北\n'linear.south'：线性.南\n'linear.west'：线性.西\n'linear.east'：线性.东\n'radial.center'：放射.中\n'radial.southwest'：放射.南西\n'radial.southeast'：放射.南东\n'radial.northwest'：放射.北西\n'radial.northeast'：放射.北东\n'radial.north'：放射.北\n'radial.south'：放射.南\n'radial.west'：放射.西\n'radial.east'：放射.东\n'spread.horizontal':扩展.水平\n'spread.vertical':扩展.垂直\n'spread.diagonal':扩展.对角线\n'spread.antidiagonal':扩展.反对角线\n'spread.north':扩展.北\n'spread.south':扩展.南\n'spread.west':扩展.西\n'spread.east':扩展.东",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundGradient",
            "params": [
                {
                    "name": "v",
                    "description": "渐变类型",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19231,
            "description": "设置背景的渐变颜色，默认为twaver.Defaults.CHART_BACKGROUND_GRADIENT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundGradientColor",
            "params": [
                {
                    "name": "v",
                    "description": "渐变颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19238,
            "description": "设置背景的外边框颜色，默认为twaver.Defaults.CHART_BACKGROUND_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "外边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19245,
            "description": "设置背景的外边框宽度，默认为 twaver.Defaults.CHART_BACKGROUND_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "外边框的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19252,
            "description": "设置图表的背景是否可见，默认为twaver.Defaults.CHART_BACKGROUND_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setBackgroundVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，false不可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19259,
            "description": "设置和这个图表绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setDataBox",
            "params": [
                {
                    "name": "dataBox",
                    "description": "",
                    "type": "twaver.DataBox"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19266,
            "description": "设置双击是否还原的默认的初始状态，默认为\ntwaver.Defaults.CHART_DOUBLE_CLICK_TO_RESET",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setDoubleClickToReset",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19274,
            "description": "设置最大的缩放比例值，默认为twaver.Defaults.ZOOM_MAX",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setMaxZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放比例值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19281,
            "description": "设置最小的缩放比例值，默认为twaver.Defaults.ZOOM_MIN",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setMinZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放比例值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19288,
            "description": "设置外部缩放级别",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setOuterZoom",
            "params": [
                {
                    "name": "v",
                    "description": "外部缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19295,
            "description": "设置Chart上选择网元时的公差。默认值为twaver.Defaults.CHART_SELECT_TOLERANCE。当设置了这个值后，点击图表上的网元在这个偏差的范围值之内都能选中这个网元",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setSelectTolerance",
            "params": [
                {
                    "name": "v",
                    "description": "选择网元时的公差",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19302,
            "description": "设置图表上排序的函数，默认为空",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19309,
            "description": "设置悬浮信息框是否生效",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setToolTipEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "true为生效，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19316,
            "description": "设置指定的数据在图表上显示值的字体",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setValueFont",
            "params": [
                {
                    "name": "value",
                    "description": "指定的数据在图表上值的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19323,
            "description": "设置图表上网元的值是否可见，默认为twaver.Defaults.CHART_VALUE_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setValueVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19330,
            "description": "设置图表上是否可见的函数，这个函数可以过滤哪些网元显示，哪些不显示",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setVisibleFunction",
            "params": [
                {
                    "name": "v",
                    "description": "是否可见的过滤器函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19337,
            "description": "设置水平方向的间距，默认为twaver.Defaults.CHART_XGAP",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setXGap",
            "params": [
                {
                    "name": "v",
                    "description": "水平方向的间距",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19344,
            "description": "设置图表上X轴方向的偏移值，默认为0",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setXTranslate",
            "params": [
                {
                    "name": "v",
                    "description": "X轴方向的偏移值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19351,
            "description": "设置是否允许X轴进行偏移，默认为twaver.Defaults.CHART_XTRANSLATE_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setXTranslateEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19358,
            "description": "设置图表的X轴方向的缩放值，默认为1",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setXZoom",
            "params": [
                {
                    "name": "value",
                    "description": "X轴方向的缩放值",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "true为需要动画，false不需要动画",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19366,
            "description": "设置X轴方向是否允许缩放，默认为 twaver.Defaults.CHART_XZOOM_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setXZoomEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19373,
            "description": "设置垂直方向的间距，默认为twaver.Defaults.CHART_YGAP",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setYGap",
            "params": [
                {
                    "name": "v",
                    "description": "垂直方向的间距",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19380,
            "description": "设置图表上Y轴方向的偏移值，默认为0",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setYTranslate",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴方向的偏移值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19387,
            "description": "设置是否允许Y轴进行偏移，默认为twaver.Defaults.CHART_YTRANSLATE_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setYTranslateEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19394,
            "description": "设置图表的Y轴方向的缩放值，默认为1",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setYZoom",
            "params": [
                {
                    "name": "value",
                    "description": "Y轴方向的缩放值",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "true为需要动画，false不需要动画",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19402,
            "description": "设置Y轴方向是否允许缩放，默认为 twaver.Defaults.CHART_YZOOM_ENABLED",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.setYZoomEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为允许缩放，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19409,
            "description": "通过指定的鼠标点和公差来获取当前鼠标下的数据，如果当前鼠标点下没有网元，但是在公差的范围值下有网元存在，也会将这个网元返回",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.tryGetDataAt",
            "params": [
                {
                    "name": "point",
                    "description": "鼠标点对象，是一个包含target,x,y的对象",
                    "type": "Object"
                },
                {
                    "name": "tolerance",
                    "description": "公差的范围值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "twaver.Data"
            },
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19418,
            "description": "刷新图表的显示界面，当图表发生变化时或数据模型更改时，TWaver会自动调用此方法，用户不需要直接调用此方法，可以重载这个方法做自己的处理",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.validateDisplay",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "刷新显示区域的宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "刷新显示区域的高度",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19427,
            "description": "重画视图组件，当视图组件中绑定的数据发生变化时，须调用此方法，让组件重画",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.validateModel",
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19433,
            "description": "对图表的X轴方向进行放大",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.xZoomIn",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19440,
            "description": "对图表的X轴方向进行缩小",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.xZoomOut",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19447,
            "description": "对图表的X轴方向还原至默认的缩放状态",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.xZoomReset",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19454,
            "description": "对图表的Y轴方向进行放大",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.yZoomIn",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19461,
            "description": "对图表的Y轴方向进行缩小",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.yZoomOut",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19468,
            "description": "对图表的Y轴方向还原至默认的缩放状态",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.yZoomReset",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19475,
            "description": "对图表进行整体放大",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.zoomIn",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19482,
            "description": "对图表进行整体缩小",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.zoomOut",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19489,
            "description": "将图表的整体还原至默认的缩放状态",
            "itemtype": "method",
            "name": "twaver.charts.ChartBase.zoomReset",
            "params": [
                {
                    "name": "animate",
                    "description": "是否需要动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ChartBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19508,
            "description": "将视图的中心点滚动到指定的逻辑坐标",
            "itemtype": "method",
            "name": "twaver.controls.View.centerByLogicalPoint",
            "params": [
                {
                    "name": "x",
                    "description": "视图中心点x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "视图中心点y坐标",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "可选，如果为true，则有动画效果，否者没有，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19517,
            "description": "如果缩放级别大于maxZoom，则返回maxZoom；如果小于minZoom，则返回minZoom",
            "itemtype": "method",
            "name": "twaver.controls.View.checkZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放级别",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回修正后的缩放级别",
                "type": "Number"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19525,
            "description": "获取指定数据元的告警填充色，默认如果数据元是网元，则返回网元的最高新发告警颜色，否则返回null",
            "itemtype": "method",
            "name": "twaver.controls.View.getAlarmFillColor",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的告警填充色",
                "type": "String"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19533,
            "description": "获取指定数据元的填充颜色，默认如果数据元是网元，而且有新发告警，则返回最高级别新发告警的颜色，否则返回样式属性inner.color的值",
            "itemtype": "method",
            "name": "twaver.controls.View.getInnerColor",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的填充颜色",
                "type": "String"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19541,
            "description": "获取鼠标所在的逻辑坐标，包含x，y属性",
            "itemtype": "method",
            "name": "twaver.controls.View.getLogicalPoint",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标所在的逻辑坐标，包含x，y属性",
                "type": "Object"
            },
            "example": [
                " network.getView().addEventListener('mousedown', function (e) {\n    var point = network.getLogicalPoint(e);\n    console.log(point.x, point.y);\n});"
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19553,
            "description": "获取最大缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.getMaxZoom",
            "return": {
                "description": "返回最大缩放级别",
                "type": "Number"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19560,
            "description": "获取最小缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.getMinZoom",
            "return": {
                "description": "返回最小缩放级别",
                "type": "Number"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19567,
            "description": "获取指定数据元的边框颜色，默认情况下，如果数据元是网元，而且有传播告警，则返回传播告警的颜色，否者返回属性为outer.color的style值",
            "itemtype": "method",
            "name": "twaver.controls.View.getOuterColor",
            "params": [
                {
                    "name": "data",
                    "description": "数据元",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回指定数据元的边框颜色",
                "type": "String"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19575,
            "description": "获取根div元素",
            "itemtype": "method",
            "name": "twaver.controls.View.getRootDiv",
            "return": {
                "description": "返回根div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19582,
            "description": "获取当前缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.getZoom",
            "return": {
                "description": "返回当前缩放级别",
                "type": "Number"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19589,
            "description": "获取指定鼠标事件是否合法，如果鼠标所在的位置在滚动条上，则不合法，否则合法",
            "itemtype": "method",
            "name": "twaver.controls.View.isValidEvent",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "如果指定鼠标事件是合法的，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19597,
            "description": "缩放级别变化时触发的动作，用户不需要调用此方法，但可以重载此方法执行自定义逻辑",
            "itemtype": "method",
            "name": "twaver.controls.View.onZoomChanged",
            "params": [
                {
                    "name": "oldZoom",
                    "description": "旧缩放级别",
                    "type": "Number"
                },
                {
                    "name": "newZoom",
                    "description": "新缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19605,
            "description": "滚动水平和垂直滚动条指定偏移量",
            "itemtype": "method",
            "name": "twaver.controls.View.panByOffset",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回实际偏移量，为包含x和y属性的对象",
                "type": "Object"
            },
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19614,
            "description": "设置最大缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.setMaxZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19621,
            "description": "设置最小缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.setMinZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19628,
            "description": "触摸模式下设置缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.setTouchZoom",
            "params": [
                {
                    "name": "z",
                    "description": "缩放级别",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19635,
            "description": "设置当前缩放级别",
            "itemtype": "method",
            "name": "twaver.controls.View.setZoom",
            "params": [
                {
                    "name": "value",
                    "description": "缩放级别",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "缩放时，是否有动画效果，可选，默认为twaver.Defaults.ZOOM_ANIMATE",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19643,
            "description": "将视图放大twaver.Defaults.ZOOM_INCREMENT倍",
            "itemtype": "method",
            "name": "twaver.controls.View.zoomIn",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为twaver.Defaults.ZOOM_ANIMATE",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19650,
            "description": "将视图缩小twaver.Defaults.ZOOM_INCREMENT倍",
            "itemtype": "method",
            "name": "twaver.controls.View.zoomOut",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为twaver.Defaults.ZOOM_ANIMATE",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19657,
            "description": "将视图缩放到让所有数据元可见",
            "itemtype": "method",
            "name": "twaver.controls.View.zoomOverview",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为twaver.Defaults.ZOOM_ANIMATE",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19664,
            "description": "还原缩放级别为1",
            "itemtype": "method",
            "name": "twaver.controls.View.zoomReset",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为twaver.Defaults.ZOOM_ANIMATE",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.controls.View"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19685,
            "description": "是否为哑节点的标识",
            "itemtype": "property",
            "name": "IDummy",
            "type": "Boolean",
            "class": "twaver.Dummy"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19715,
            "description": "触发连线捆绑更改的相关属性样式。默认有：'link.bundle.enable'，'link.bundle.id'，'link.bundle.independent'",
            "itemtype": "property",
            "name": "IS_INTERESTED_BUNDLE_STYLE",
            "type": "Object",
            "static": 1,
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19723,
            "description": "获取和这条连线捆绑的连线数量",
            "itemtype": "method",
            "name": "twaver.Link.getBundleCount",
            "return": {
                "description": "捆绑数量",
                "type": "Number"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19730,
            "description": "得到捆绑的顺序号",
            "itemtype": "method",
            "name": "twaver.Link.getBundleIndex",
            "return": {
                "description": "捆绑的顺序号",
                "type": "Number"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19737,
            "description": "获取和这条连线捆绑的所有连线集合",
            "itemtype": "method",
            "name": "twaver.Link.getBundleLinks",
            "return": {
                "description": "连线集合",
                "type": "twaver.List"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19744,
            "description": "获取连线的起始节点的代理",
            "itemtype": "method",
            "name": "twaver.Link.getFromAgent",
            "return": {
                "description": "起始节点代理",
                "type": "twaver.Node"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19751,
            "description": "获取连线的起始节点",
            "itemtype": "method",
            "name": "twaver.Link.getFromNode",
            "return": {
                "description": "起始节点",
                "type": "twaver.Node"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19758,
            "description": "获取连线的结束节点代理",
            "itemtype": "method",
            "name": "twaver.Link.getToAgent",
            "return": {
                "description": "结束节点的代理",
                "type": "twaver.Node"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19765,
            "description": "获取连线的结束节点",
            "itemtype": "method",
            "name": "twaver.Link.getToNode",
            "return": {
                "description": "结束节点",
                "type": "twaver.Node"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19772,
            "description": "判断是否为绑定连线的代理",
            "itemtype": "method",
            "name": "twaver.Link.isBundleAgent",
            "return": {
                "description": "绑定连线的代理",
                "type": "Boolean"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19779,
            "description": "判断是否为自环连线",
            "itemtype": "method",
            "name": "twaver.Link.isLooped",
            "return": {
                "description": "true为自环，否则为false。",
                "type": "Boolean"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19786,
            "description": "反转连线捆绑的状态。如果这条link处于展开状态，调用这个方法，就会将所有和这条连线捆绑的links都合并，反之亦然。",
            "itemtype": "method",
            "name": "twaver.Link.reverseBundleExpanded",
            "return": {
                "description": "true为反转成功，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19793,
            "description": "设置连线的起始节点",
            "itemtype": "method",
            "name": "twaver.Link.setFromNode",
            "params": [
                {
                    "name": "fromNode",
                    "description": "起始节点",
                    "type": "twaver.Node"
                }
            ],
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19800,
            "description": "设置连线的结束节点",
            "itemtype": "method",
            "name": "twaver.Link.setToNode",
            "params": [
                {
                    "name": "toNode",
                    "description": "结束节点",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Link"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19821,
            "description": "触发网元更改的相关属性",
            "itemtype": "property",
            "name": "IS_INTERESTED_NODE_PROPERTY",
            "type": "Object",
            "static": 1,
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19829,
            "description": "获取这个节点上所有代理连线的集合",
            "itemtype": "method",
            "name": "twaver.Node.getAgentLinks",
            "return": {
                "description": "代理连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19836,
            "description": "获取节点的旋转角度，单位为度",
            "itemtype": "method",
            "name": "twaver.Node.getAngle",
            "return": {
                "description": "返回节点的旋转角度，单位为度",
                "type": "Number"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19843,
            "description": "得到这个节点的中心位置。如果想获取左上角的位置，需使用getLocation",
            "itemtype": "method",
            "name": "twaver.Node.getCenterLocation",
            "return": {
                "description": "节点的中心位置。是一个包含x，y值的对象，比如{x:10,y:10}",
                "type": "Object"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19850,
            "description": "获取这个节点的所有跟随者。若想了解跟随者的概念，可参考跟随者类",
            "itemtype": "method",
            "name": "twaver.Node.getFollowers",
            "return": {
                "description": "跟随者的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19857,
            "description": "获取从这个节点出发的所有代理连线的集合",
            "itemtype": "method",
            "name": "twaver.Node.getFromAgentLinks",
            "return": {
                "description": "代理连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19864,
            "description": "获取以这个节点为起始节点的所有连线的集合",
            "itemtype": "method",
            "name": "twaver.Node.getFromLinks",
            "return": {
                "description": "连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19871,
            "description": "获取网元的高度。若网元上设置了高度，则返回设置的高度值。否则如果网元上设置了图片，那么高度就是网元图片的高度。如果什么都没设置，则会返回默认的高度，默认高度为50像素",
            "itemtype": "method",
            "name": "twaver.Node.getHeight",
            "return": {
                "description": "节点的高度",
                "type": "Number"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19878,
            "description": "获取网元上图片的名称",
            "itemtype": "method",
            "name": "twaver.Node.getImage",
            "return": {
                "description": "网元图片的名称",
                "type": "String"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19885,
            "description": "获取和这个网元相连的所有连线",
            "itemtype": "method",
            "name": "twaver.Node.getLinks",
            "return": {
                "description": "连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19892,
            "description": "获取网元的位置。网元的位置指的是网元左上角的位置",
            "itemtype": "method",
            "name": "twaver.Node.getLocation",
            "return": {
                "description": "节点网元的位置。是一个包含x，y值的对象，比如{x:10,y:10}",
                "type": "Object"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19899,
            "description": "获取这个节点上所有自环的连线",
            "itemtype": "method",
            "name": "twaver.Node.getLoopedLinks",
            "return": {
                "description": "自环连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19906,
            "description": "获取节点未旋转前的矩形区域",
            "itemtype": "method",
            "name": "twaver.Node.getOriginalRect",
            "return": {
                "description": "返回节点未旋转前的矩形区域",
                "type": "Object"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19913,
            "description": "获取网元的形状",
            "itemtype": "method",
            "name": "twaver.Node.getRect",
            "return": {
                "description": "网元形状。是一个包含网元下x,y坐标以及宽高的对象。例如：{x:200,y:200,width:50,height:50}",
                "type": "Object"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19920,
            "description": "获取网元的大小",
            "itemtype": "method",
            "name": "twaver.Node.getSize",
            "return": {
                "description": "是一个包含节点宽高的对象。例如：{width:50,height:50}",
                "type": "String"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19927,
            "description": "获取到这个节点的所有代理连线的集合",
            "itemtype": "method",
            "name": "twaver.Node.getToAgentLinks",
            "return": {
                "description": "代理连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19934,
            "description": "获取到这个节点的所有连线的集合",
            "itemtype": "method",
            "name": "twaver.Node.getToLinks",
            "return": {
                "description": "连线的集合",
                "type": "twaver.List"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19941,
            "description": "获取网元的宽度。若网元上设置了宽度，则返回设置的宽度值。否则如果网元上设置了图片，宽度就是网元图片的宽度。如果什么都没设置，则会返回默认的宽度，默认宽度为50像素",
            "itemtype": "method",
            "name": "twaver.Node.getWidth",
            "return": {
                "description": "节点的宽度",
                "type": "Number"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19948,
            "description": "获取网元的X坐标。X坐标为网元坐上角的坐标",
            "itemtype": "method",
            "name": "twaver.Node.getX",
            "return": {
                "description": "网元的X坐标",
                "type": "Number"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19955,
            "description": "获取网元的Y坐标。Y坐标为网元左上角的坐标",
            "itemtype": "method",
            "name": "twaver.Node.getY",
            "return": {
                "description": "网元的Y坐标",
                "type": "Number"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19962,
            "description": "判断这个节点上是否有代理的连线",
            "itemtype": "method",
            "name": "twaver.Node.hasAgentLinks",
            "return": {
                "description": "true为节点上有代理连线，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19969,
            "description": "设置节点的旋转角度，单位为度",
            "itemtype": "method",
            "name": "twaver.Node.setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "节点的旋转角度，单位为度",
                    "type": "Number"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19976,
            "description": "设置这个节点的中心位置。如果想设置左上角的位置，需使用setLocation。参数可以为一个或两个。如果是一个，则传入的必须是一个带x，y坐标的对象，例如：{x:100,y:100}；如果传入的是两个，第一个参数为x坐标，第二个参数为y坐标",
            "itemtype": "method",
            "name": "twaver.Node.setCenterLocation",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标或者包含x和y属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "y",
                    "description": "y坐标, 如果第一个参数为包含x和y属性的Object对象, 则此参数忽略",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19984,
            "description": "设置网元的高度",
            "itemtype": "method",
            "name": "twaver.Node.setHeight",
            "params": [
                {
                    "name": "height",
                    "description": "网元高度值",
                    "type": "Number"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19991,
            "description": "设置网元上图片的名称。图片名称需要先注册后才可以使用",
            "itemtype": "method",
            "name": "twaver.Node.setImage",
            "params": [
                {
                    "name": "image",
                    "description": "网元图片的名称",
                    "type": "String"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 19998,
            "description": "设置网元的位置。网元的位置指的是网元左上角的位置。参数可以为一个或两个。如果是一个，则传入的必须是一个带x，y坐标的对象，例如：{x:100,y:100}；如果传入的是两个，第一个参数为x坐标，第二个参数为y坐标",
            "itemtype": "method",
            "name": "twaver.Node.setLocation",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标或者包含x和y属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "y",
                    "description": "y坐标, 如果第一个参数为包含x和y属性的Object对象, 则此参数忽略",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20006,
            "description": "设置网元的大小。网元的大小指的是网元宽高。参数可以为一个或两个。如果是一个，则传入的必须是一个带width，height坐标的对象，例如：{width:100,height:100}；如果传入的是两个，第一个参数为宽度，第二个参数为高度",
            "itemtype": "method",
            "name": "twaver.Node.setSize",
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20012,
            "description": "设置网元的宽度",
            "itemtype": "method",
            "name": "twaver.Node.setWidth",
            "params": [
                {
                    "name": "width",
                    "description": "网元的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20019,
            "description": "设置X坐标。Z坐标指的是网元左上角X的值",
            "itemtype": "method",
            "name": "twaver.Node.setX",
            "params": [
                {
                    "name": "x",
                    "description": "X坐标",
                    "type": "Number"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20026,
            "description": "设置Y坐标。Y坐标指的是网元左上角Y的值",
            "itemtype": "method",
            "name": "twaver.Node.setY",
            "params": [
                {
                    "name": "y",
                    "description": "Y坐标值",
                    "type": "Number"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20033,
            "description": "设置网元相对于原来的位置偏移一定的值",
            "itemtype": "method",
            "name": "twaver.Node.translate",
            "params": [
                {
                    "name": "x",
                    "description": "偏移X个像素",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "偏移Y个像素",
                    "type": "Number"
                }
            ],
            "class": "twaver.Node"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20057,
            "description": "添加网元，并派发createElement类型的事件。CreateElementInteraction、CreateLinkInteraction、CreateShapeLinkInteraction和CreateShapeNodeInteraction会调用此方法",
            "itemtype": "method",
            "name": "twaver.canvas.Network.addElementByInteraction",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20064,
            "description": "添加标记",
            "itemtype": "method",
            "name": "twaver.canvas.Network.addMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "带paint方法的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20071,
            "description": "清空标记",
            "itemtype": "method",
            "name": "twaver.canvas.Network.clearMarker",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20077,
            "description": "创建和指定Element关联的ElementUI，添加网元到和Network关联的ElementBox时会触发调用此方法，用户不需要调用此方法，但可以重载此方法",
            "itemtype": "method",
            "name": "twaver.canvas.Network.createElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "用于创建和网元关联的ElementUI",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20084,
            "description": "销毁拓扑图",
            "itemtype": "method",
            "name": "twaver.canvas.Network.dispose",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20090,
            "description": "获取指定网元的告警冒泡文字内容，默认返回网元的最高新发告警数和别名，如果还有低级别的新发告警则前面带一个+号（比如+3C代表有3个严重告警，并且还有其他低级别新发告警），如果没有新发告警，则返回null",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getAlarmLabel",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的告警冒泡文字内容",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20098,
            "description": "获取背景图片",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getBackgroundImage",
            "return": {
                "description": "返回背景图片",
                "type": "HTMLImageElement"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20105,
            "description": "获取背景图片边界",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getBackgroundImageRect",
            "return": {
                "description": "返回背景图片边界",
                "type": "Object"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20112,
            "description": "获取拓扑图大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getCanvasSize",
            "return": {
                "description": "返回拓扑图大小",
                "type": "Object"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20119,
            "description": "获取当前子网，如果是最顶层子网则返回null",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getCurrentSubNetwork",
            "return": {
                "description": "返回当前子网，如果是最顶层子网则返回null",
                "type": "twaver.SubNetwork"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20126,
            "description": "获取网元可编辑过滤器，默认值为null，用于判断在编辑模式时是否可以更改节点大小（选中网元时周围有8个可拖拽的控制点），或者移动多边形、折线的点",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditableFunction",
            "return": {
                "description": "返回网元可编辑过滤器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20133,
            "description": "获取创建连线时连线的颜色，默认值为twaver.Defaults.NETWORK_EDIT_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditLineColor",
            "return": {
                "description": "返回创建连线时连线的颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20140,
            "description": "获取创建连线时连线的宽度，默认值为twaver.Defaults.NETWORK_EDIT_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditLineWidth",
            "return": {
                "description": "返回创建连线时连线的宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20147,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的填充色，默认值为twaver.Defaults.NETWORK_EDIT_POINT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditPointFillColor",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20154,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的边框颜色，默认值为twaver.Defaults.NETWORK_EDIT_POINT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditPointOutlineColor",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20161,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的边框宽度，默认值为twaver.Defaults.NETWORK_EDIT_POINT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditPointOutlineWidth",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20168,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的大小，默认值为twaver.Defaults.NETWORK_EDIT_POINT_SIZE",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getEditPointSize",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的大小",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20175,
            "description": "获取指定坐标点或者当前鼠标下的网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getElementAt",
            "params": [
                {
                    "name": "point",
                    "description": "可以为坐标点或者鼠标事件",
                    "type": "Object"
                },
                {
                    "name": "selectable",
                    "description": "如果为true，则只返回可以被选择的网元，否则不可选中的网元也可以返回，可选，默认值为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回坐标点或者当前鼠标下的网元",
                "type": "twaver.Element"
            },
            "example": [
                " network.getView().addEventListener('mousedown', function (e) {\n    var point = network.getLogicalPoint(e);\n    console.log(network.getElementAt(e));\n    console.log(network.getElementAt(point));\n});"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20189,
            "description": "获取和Network绑定的ElementBox网元容器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getElementBox",
            "return": {
                "description": "返回和Network绑定的ElementBox网元容器",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20196,
            "description": "获取矩形区域包含或相交网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getElementsAtRect",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域",
                    "type": "Object"
                },
                {
                    "name": "intersectMode",
                    "description": "如果为true则只要和矩形区域相交的网元都返回，否则只返回矩形区域包含的网元，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "过滤器, 可选, 默认值为null",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "selectable",
                    "description": "网元是否可选择，默认为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回矩形区域包含或相交网元",
                "type": "twaver.List"
            },
            "example": [
                " var elements = network.getElementsAtRect({x:0, y:0, width:100, height:100});"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20208,
            "description": "获取和网元关联的视图对象",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回和网元关联的视图对象",
                "type": "twaver.network.ElementUI"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20216,
            "description": "获取网元视图生成器，用于创建和网元关联的网元视图，默认用element#getElementUIClass返回的类型创建和网元关联的网元视图\ntwaver.Defaults.ELEMENTUI_FUNCTION = function(network, element){\n    var clazz = element.getElementUIClass();\n    if (clazz) {\n         return new clazz(network, element);\n    }\n    return null;\n }",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getElementUIFunction",
            "return": {
                "description": "返回网元视图生成器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20230,
            "description": "返回包含分组孩子视图区域的集合",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getGroupChildrenRects",
            "params": [
                {
                    "name": "group",
                    "description": "分组对象",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "返回包含孩子视图区域的集合",
                "type": "twaver.List"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20238,
            "description": "获取指定网元的图标颜色数组，默认返回element#getStyle('icons.colors')",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getIconsColors",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的图标颜色数组",
                "type": "Array"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20246,
            "description": "获取指定网元的图标名称数组，默认返回element#getStyle('icons.names')",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getIconsNames",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的图标名称数组",
                "type": "Array"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20254,
            "description": "获取交互处理器集合，交互处理器用于设置Network相应哪些键盘和鼠标事件。",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getInteractions",
            "return": {
                "description": "返回交互处理器集合",
                "type": "Array"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20261,
            "description": "获取指定网元所在的层，默认为'default'层",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLayerByElement",
            "params": [
                {
                    "name": "element",
                    "description": "用于返回层的网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元所在的层",
                "type": "twaver.Layer"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20269,
            "description": "获取延迟移动网元时网元的填充色，默认值为twaver.Defaults.NETWORK_LAZYMOVE_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLazyMoveFillColor",
            "return": {
                "description": "返回延迟移动网元时网元的填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20276,
            "description": "获取延迟移动网元时网元的边框颜色，默认值为twaver.Defaults.NETWORK_LAZYMOVE_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLazyMoveOutlineColor",
            "return": {
                "description": "返回延迟移动网元时网元的边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20283,
            "description": "获取延迟移动网元时网元的边框宽度，默认值为twaver.Defaults.NETWORK_LAZYMOVE_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLazyMoveOutlineWidth",
            "return": {
                "description": "返回延迟移动网元时网元的边框宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20290,
            "description": "获取节点是否可以连线的过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLinkableFunction",
            "return": {
                "description": "返回节点是否可以连线的过滤器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20297,
            "description": "获得LINK的流动间隔时间",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLinkFlowInterval",
            "return": {
                "description": "返回Link的流动间隔时间",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20304,
            "description": "获得Link流动时的偏移量",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLinkFlowOffset",
            "params": [
                {
                    "name": "link",
                    "description": "Link实例",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回Link流动时的偏移量",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20312,
            "description": "获得Link流动时的步进量",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLinkFlowStepping",
            "params": [
                {
                    "name": "link",
                    "description": "Link实例",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回Link流动时的步进量",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20320,
            "description": "获取指定连线捆绑后的标签，默认如果指定的连线是捆绑代理，则返回\"+(\" + link.getBundleCount() + \")\"，否则返回null",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLinkHandlerLabel",
            "params": [
                {
                    "name": "link",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "返回指定连线捆绑后的标签",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20328,
            "description": "获取连线路径生成函数",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getLinkPathFunction",
            "return": {
                "description": "返回连线路径生成函数",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20335,
            "description": "获取网元可移动过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getMovableFunction",
            "return": {
                "description": "返回网元可移动过滤器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20342,
            "description": "获取可移动的被选中的网元集合",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getMovableSelectedElements",
            "return": {
                "description": "返回可移动的被选中的网元集合",
                "type": "twaver.List"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20349,
            "description": "获取可移动的网元的区域",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getMovableSelectedElementsRect",
            "return": {
                "description": "返回可移动的网元的区域",
                "type": "Object"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20356,
            "description": "获取下方内边距",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getPaddingBottom",
            "return": {
                "description": "返回下方内边距，默认为0",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20363,
            "description": "获取右边内边距",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getPaddingRight",
            "return": {
                "description": "返回右边内编辑，默认为0",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20370,
            "description": "获取相对于网元指定位置的坐标，此方法常用于定位和网元相关的附件的位置",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getPosition",
            "params": [
                {
                    "name": "position",
                    "description": "相对位置",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "获取位置时的相对网元或网元视图，类型为twaver.Element或者twaver.network.ElementUI",
                    "type": "Object"
                },
                {
                    "name": "tarSize",
                    "description": "目标的大小，类型为包含width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "String"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回包含x坐标和y坐标的Object对象",
                "type": "Object"
            },
            "example": [
                " var node = new twaver.Node({name:'Node', location: {x:100, y:100}});\nbox.add(node);\nvar position = network.getPosition('top.top', node, {width:10, height:10}, 0, 0);\nconsole.log(position.x, position.y);\n// output: 110 90\n\nposition可以为：\nhotspot\nfrom\nto\ntopleft.topleft\ntopleft.topright\ntop.top\ntopright.topleft\ntopright.topright\ntopleft\ntop\ntopright\ntopleft.bottomleft\ntopleft.bottomright\ntop.bottom\ntopright.bottomleft\ntopright.bottomright\nleft.left\nleft\nleft.right\ncenter\nright.left\nright\nright.right\nbottomleft.topleft\nbottomleft.topright\nbottom.top\nbottomright.topleft\nbottomright.topright\nbottomleft\nbottom\nbottomright\nbottomleft.bottomleft\nbottomleft.bottomright\nbottom.bottom\nbottomright.bottomleft\nbottomright.bottomright"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20425,
            "description": "获取框选网元过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRectSelectFilter",
            "return": {
                "description": "返回框选网元过滤器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20432,
            "description": "获取延迟改变网元大小时网元边框的颜色，默认值为twaver.Defaults.NETWORK_RESIZE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getResizeLineColor",
            "return": {
                "description": "返回延迟改变网元大小时网元边框的颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20439,
            "description": "获取延迟改变网元大小时网元边框的宽度，默认值为twaver.Defaults.NETWORK_RESIZE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getResizeLineWidth",
            "return": {
                "description": "返回延迟改变网元大小时网元边框的宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20446,
            "description": "获取改变网元大小时控制点的填充色，默认为twaver.Defaults.NETWORK_RESIZE_POINT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getResizePointFillColor",
            "return": {
                "description": "返回改变网元大小时控制点的填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20453,
            "description": "获取改变网元大小时控制点的边框颜色，默认值为twaver.Defaults.NETWORK_RESIZE_POINT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getResizePointOutlineColor",
            "return": {
                "description": "返回改变网元大小时控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20460,
            "description": "获取改变网元大小时控制点的边框宽度，默认值为twaver.Defaults.NETWORK_RESIZE_POINT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getResizePointOutlineWidth",
            "return": {
                "description": "返回改变网元大小时控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20467,
            "description": "获取更改网元大小的控制点的大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getResizePointSize",
            "return": {
                "description": "返回更改网元大小的控制点的大小",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20474,
            "description": "获取主画布，网元视图绘制在主画布上",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRootCanvas",
            "return": {
                "description": "返回主画布",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20481,
            "description": "获取网元是否可旋转过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotatableFunction",
            "return": {
                "description": "网元是否可旋转过滤器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20488,
            "description": "获取旋转控制点的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotatePointFillColor",
            "return": {
                "description": "返回旋转控制点的填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20495,
            "description": "获取旋转控制点的偏移量",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotatePointOffset",
            "return": {
                "description": "返回旋转控制点的偏移量",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20502,
            "description": "获取旋转控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotatePointOutlineColor",
            "return": {
                "description": "返回旋转控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20509,
            "description": "获取旋转控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotatePointOutlineWidth",
            "return": {
                "description": "返回旋转控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20516,
            "description": "返回旋转控制点的大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotatePointSize",
            "return": {
                "description": "旋转控制点的大小",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20523,
            "description": "获取旋转刻度填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotateScaleFillColor",
            "return": {
                "description": "返回旋转刻度填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20530,
            "description": "获取旋转刻度文字字体颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotateScaleFontColor",
            "return": {
                "description": "旋转刻度文字字体颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20537,
            "description": "获取旋转刻度高度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotateScaleHeight",
            "return": {
                "description": "旋转刻度高度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20544,
            "description": "获取旋转刻度宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getRotateScaleWidth",
            "return": {
                "description": "返回旋转刻度宽度",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20551,
            "description": "获取滚动条宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getScrollBarWidth",
            "return": {
                "description": "返回滚动条宽度，默认为10",
                "type": "Number"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20558,
            "description": "获取框选时矩形框的填充色，默认值为twaver.Defaults.NETWORK_SELECT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getSelectFillColor",
            "return": {
                "description": "返回框选时矩形框的填充色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20565,
            "description": "获取选择模式（当框选网元时，哪些网元会被选中），默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getSelectMode",
            "return": {
                "description": "返回选择模式",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20576,
            "description": "获取框选时矩形框的边框颜色，默认值为twaver.Defaults.NETWORK_SELECT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getSelectOutlineColor",
            "return": {
                "description": "返回框选时矩形框的边框颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20583,
            "description": "获取框选时矩形框的边框宽度，默认值为twaver.Defaults.NETWORK_SELECT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getSelectOutlineWidth",
            "return": {
                "description": "返回框选时矩形框的边框宽度",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20590,
            "description": "获得指定网元选中时的阴影颜色，如果网元的style属性shadow.color不为空，则返回style属性shadow.color的值，否则返回style属性select.color的值",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getShadowColor",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元选中时的阴影颜色",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20598,
            "description": "获取上层画布，默认告警等附件画在上层画布上",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getTopCanvas",
            "return": {
                "description": "返回上层画布",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20605,
            "description": "获取Network可见网元所占的区域",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getViewRect",
            "return": {
                "description": "返回包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20612,
            "description": "获取网元可见过滤器，Network通过可见过滤器判断每个网元是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.getVisibleFunction",
            "return": {
                "description": "返回网元可见过滤器",
                "type": "Function"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20619,
            "description": "ElementBox里网元添加、删除以及清空时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleElementBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox里网元变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20626,
            "description": "ElementBox里网元的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleElementBoxPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox里网元属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20633,
            "description": "ElementBox的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleElementPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20640,
            "description": "ElementBox里网元的顺序发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleIndexChange",
            "params": [
                {
                    "name": "e",
                    "description": "网元顺序变化事件，包含element、oldIndex和newIndex属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20647,
            "description": "ElementBox的LayerBox里Layer添加、删除以及清空时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleLayerBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20654,
            "description": "ElementBox的LayerBox里Layer层次变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleLayerHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer层次变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20661,
            "description": "ElementBox的LayerBox里Layer属性变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleLayerPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer属性变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20668,
            "description": "SelectionModel选择变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20675,
            "description": "获取是否包含编辑交互处理器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.hasEditInteraction",
            "return": {
                "description": "如果包含编辑交互处理器，则返回ture，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20682,
            "description": "判断是否包含选中的并且可移动的网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.hasMovableSelectedElements",
            "return": {
                "description": "如果包含选中的并且可移动的网元，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20689,
            "description": "获取鼠标下或指定坐标下的网元视图对象或附件对象",
            "itemtype": "method",
            "name": "twaver.canvas.Network.hitTest",
            "params": [
                {
                    "name": "point",
                    "description": "鼠标事件或坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回鼠标下或指定坐标下的网元视图对象或附件对象",
                "type": "Object"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20697,
            "description": "使指定连线的捆绑连线无效",
            "itemtype": "method",
            "name": "twaver.canvas.Network.invalidateBundleLink",
            "params": [
                {
                    "name": "element",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20704,
            "description": "无效画布大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.invalidateCanvasSize",
            "params": [
                {
                    "name": "delay",
                    "description": "延迟时间，默认为300ms",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20711,
            "description": "使指定网元的视图无效",
            "itemtype": "method",
            "name": "twaver.canvas.Network.invalidateElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                },
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则使网元无效的同时使附件无效，否则不使附件无效，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20719,
            "description": "使所有网元的视图无效",
            "itemtype": "method",
            "name": "twaver.canvas.Network.invalidateElementUIs",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则使网元无效的同时使附件无效，否则不使附件无效，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20726,
            "description": "无效所有网元的可见性，当设置了visibleFunction，并且外部条件变动后，可以用此方法强制刷新所有网元是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.invalidateElementVisibility",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20732,
            "description": "无效所有选中网元的视图",
            "itemtype": "method",
            "name": "twaver.canvas.Network.invalidateSelectedElementUIs",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则无效网元的同时无效附件，否则不无效附件，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20739,
            "description": "获取是否自动计算画布大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isAutoValidateCanvasSize",
            "return": {
                "description": "返回是否自动计算画布大小",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20746,
            "description": "获取是否能双击进入空的子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_EMPTYSUBNETWORK",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isDoubleClickToEmptySubNetwork",
            "return": {
                "description": "返回是否能双击进入空的子网",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20753,
            "description": "获取是否双击展开组，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_GROUPEXPAND",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isDoubleClickToGroupExpand",
            "return": {
                "description": "返回是否双击展开组",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20760,
            "description": "获取是否双击捆绑连线，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_LINKBUNDLE",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isDoubleClickToLinkBundle",
            "return": {
                "description": "返回是否双击捆绑连线",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20767,
            "description": "获取是否双击子网时进入子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_SUBNETWORK",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isDoubleClickToSubNetwork",
            "return": {
                "description": "返回是否双击子网时进入子网",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20774,
            "description": "获取是否双击背景返回上一层子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_UPSUBNETWORK",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isDoubleClickToUpSubNetwork",
            "return": {
                "description": "返回是否双击背景返回上一层子网",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20781,
            "description": "判断指定网元是否可编辑，如果editableFunction返回false，则不可编辑；如果网元所在的层不可编辑，则不可编辑；否则可编辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isEditable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可编辑，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20789,
            "description": "获取是否正在编辑网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isEditingElement",
            "return": {
                "description": "返回是否正在编辑网元",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20796,
            "description": "获取水平滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isHScrollBarVisible",
            "return": {
                "description": "返回水平滚动条是否可见",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20803,
            "description": "获取是否允许用键盘Delete键删除选中网元，默认值为twaver.Defaults.NETWORK_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isKeyboardRemoveEnabled",
            "return": {
                "description": "返回是否允许用键盘Delete键删除选中网元",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20810,
            "description": "获取是否允许用键盘Ctrl+A键选择所有网元，默认值为twaver.Defaults.NETWORK_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isKeyboardSelectEnabled",
            "return": {
                "description": "返回是否允许用键盘Ctrl+A键选择所有网元",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20817,
            "description": "获取延迟移动网元时是否有动画效果，默认值为twaver.Defaults.NETWORK_LAZYMOVE_ANIMATE",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isLazyMoveAnimate",
            "return": {
                "description": "返回延迟移动网元时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20824,
            "description": "获取延迟移动网元时轮廓是否填充，默认值为twaver.Defaults.NETWORK_LAZYMOVE_FILL",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isLazyMoveFill",
            "return": {
                "description": "返回延迟移动网元时轮廓是否填充",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20831,
            "description": "获取是否限制网元坐标不能为负",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isLimitElementInPositiveLocation",
            "return": {
                "description": "返回是否限制网元坐标不能为负",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20838,
            "description": "获取是否限制左上角，如果限制左上角，不能看到左上角以外的区域",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isLimitViewInCanvas",
            "return": {
                "description": "返回是否限制左上角，默认为true",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20845,
            "description": "获取指定节点是否可以创建连线",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isLinkable",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "返回指定节点是否可以创建连线",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20853,
            "description": "返回是否启用流动Link，默认是false",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isLinkFlowEnabled",
            "return": {
                "description": "是否启用流动Link",
                "type": "String"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20860,
            "description": "获取网元被选择时是否让其可见，默认值为twaver.Defaults.NETWORK_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isMakeVisibleOnSelected",
            "return": {
                "description": "返回网元被选择时是否让其可见",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20867,
            "description": "判断指定网元是否可移动，如果网元是Link，则不可移动；如果movableFunction返回false，则也不可移动；如果网元所在的层不可移动，则也不可移动；否则可以移动",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isMovable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可移动，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20875,
            "description": "获取是否正在移动网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isMovingElement",
            "return": {
                "description": "返回是否正在移动网元",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20882,
            "description": "获取不是代理的连线是否可见，默认值为twaver.Defaults.NETWORK_NO_AGENT_LINK_VISIBLE",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isNoAgentLinkVisible",
            "return": {
                "description": "返回不是代理的连线是否可见",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20889,
            "description": "获取是否允许框选网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isRectSelectEnabled",
            "return": {
                "description": "如果允许框选网元, 返回true, 否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20896,
            "description": "获取改变网元大小时是否有动画效果，默认值为twaver.Defaults.NETWORK_RESIZE_ANIMATE",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isResizeAnimate",
            "return": {
                "description": "返回改变网元大小时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20903,
            "description": "获取指定网元是否可旋转",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isRotatable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元是否可旋转",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20911,
            "description": "获取是否正在旋转网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isRotatingElement",
            "return": {
                "description": "返回是否正在旋转网元",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20918,
            "description": "获取滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isScrollBarVisible",
            "return": {
                "description": "返回滚动条是否可见",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20925,
            "description": "获取是否正在选择网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isSelectingElement",
            "return": {
                "description": "返回是否正在选择网元",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20932,
            "description": "获取网元被选中后是否置顶，默认值为twaver.Defaults.NETWORK_SENDTOTOP_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isSendToTopOnSelected",
            "return": {
                "description": "返回网元被选中后是否置顶",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20939,
            "description": "获取是否显示旋转网元时的刻度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isShowRotateScale",
            "return": {
                "description": "返回是否显示旋转网元时的刻度",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20946,
            "description": "获取进入下一层子网或返回上一层子网时是否有动画效果，默认值为twaver.Defaults.NETWORK_SUBNETWORK_ANIMATE",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isSubNetworkAnimate",
            "return": {
                "description": "返回进入下一层子网或返回上一层子网时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20953,
            "description": "获取是否让提示信息生效，默认值为twaver.Defaults.NETWORK_TOOLTIP_ENABLED",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isToolTipEnabled",
            "return": {
                "description": "返回是否让提示信息生效",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20960,
            "description": "获取指定的网元是否可见，如果可见过滤器visibleFunction返回false，则不可见；如果网元所在的层不可见，则网元不可见；否则网元可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果指定网元可见，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20968,
            "description": "获取垂直滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.isVScrollBarVisible",
            "return": {
                "description": "返回垂直滚动条是否可见，默认为true",
                "type": "Boolean"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20975,
            "description": "滚动水平和垂直滚动条，让指定网元可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.makeVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20982,
            "description": "将选中的网元移动指定偏移量，移动时可以设置是否有动画效果，而且能指定移动结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.canvas.Network.moveSelectedElements",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "移动时是否有动画效果，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，移动结束后执行的动作，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20992,
            "description": "shareSelectionModel属性变化时触发的动作，用户不需要调用此方法，但可以重载此方法执行自定义逻辑",
            "itemtype": "method",
            "name": "twaver.canvas.Network.onShareSelectionModelChanged",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 20998,
            "description": "绘制最底层元素",
            "itemtype": "method",
            "name": "twaver.canvas.Network.paintBottom",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21005,
            "description": "回去标记",
            "itemtype": "method",
            "name": "twaver.canvas.Network.paintMarker",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21012,
            "description": "绘制所有网元视图",
            "itemtype": "method",
            "name": "twaver.canvas.Network.paintRoot",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21018,
            "description": "绘制上层画布",
            "itemtype": "method",
            "name": "twaver.canvas.Network.paintTopCanvas",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21024,
            "description": "删除标记",
            "itemtype": "method",
            "name": "twaver.canvas.Network.removeMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "带paint方法的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21031,
            "description": "重绘上层画布",
            "itemtype": "method",
            "name": "twaver.canvas.Network.repaintTopCanvas",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21037,
            "description": "将指定网元置顶，显示在所有网元的最上面，遮盖其他网元，但也受网元所在的层的制约，还有父子关系以及跟随关系的制约；如果sendToTopOnSelected为true，则点击网元时会调用此方法",
            "itemtype": "method",
            "name": "twaver.canvas.Network.sendToTop",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21044,
            "description": "设置是否自动计算画布大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setAutoValidateCanvasSize",
            "params": [
                {
                    "name": "v",
                    "description": "是否自动计算画布大小",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21051,
            "description": "设置背景图片",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setBackgroundImage",
            "params": [
                {
                    "name": "backgroundImage",
                    "description": "背景图片",
                    "type": "HTMLImageElement"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21058,
            "description": "设置当前交互模式为创建网元模式，在Network上单击时，会创建指定类型的网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setCreateElementInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "网元类型，可选，默认值为twaver.Node",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21065,
            "description": "设置当前交互模式为创建连线模式，在Network上单击任意网元设置连线的开始节点，再次点击任意网元设置连线的结束节点",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setCreateLinkInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "连线类型，可选，默认值为twaver.Link",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21072,
            "description": "设置当前交互模式为创建折线模式，在Network上单击任意网元设置折线的开始节点，多次点击不同的背景位置设置折线的points属性，再次点击任意网元设置折线的结束节点",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setCreateShapeLinkInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "折线类型，可选，默认值为twaver.ShapeLink",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21079,
            "description": "设置当前交互模式为创建多边形模式，在Network上多次点击不同位置设置多边形的points属性，最后双击结束",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setCreateShapeNodeInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "多边形类型，可选，默认值为twaver.ShapeNode",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21086,
            "description": "将当前子网设置为指定子网，并且可以设置是否有动画效果，而且能指定设置当前子网结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setCurrentSubNetwork",
            "params": [
                {
                    "name": "currentSubNetwork",
                    "description": "子网",
                    "type": "twaver.SubNetwork"
                },
                {
                    "name": "animate",
                    "description": "是否有动画效果",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "设置当前子网结束后的回调函数，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21095,
            "description": "设置交互模式为默认交互模式，包含选择交互处理器SelectInteraction（处理框选或选择网元）、移动交互处理器MoveInteraction（处理移动网元）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setDefaultInteractions",
            "params": [
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选、默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21102,
            "description": "设置是否能双击进入空的子网",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setDoubleClickToEmptySubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否能双击进入空的子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21109,
            "description": "设置是否双击展开组",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setDoubleClickToGroupExpand",
            "params": [
                {
                    "name": "v",
                    "description": "是否能双击展开组",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21116,
            "description": "设置是否双击捆绑连线",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setDoubleClickToLinkBundle",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击捆绑连线",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21123,
            "description": "设置是否双击子网时进入子网",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setDoubleClickToSubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击子网时进入子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21130,
            "description": "设置是否双击背景返回上一层子网",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setDoubleClickToUpSubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击背景返回上一层子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21137,
            "description": "设置网元可编辑过滤器，默认值为null，用于判断在编辑模式时是否可以更改节点大小（选中网元时周围有8个可拖拽的控制点），或者移动多边形、折线的点",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元可编辑过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setEditInteractions();\nnetwork.setEditableFunction(function (element) {\n    return element.getName() === 'From';\n});"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21148,
            "description": "设置是否正在编辑网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在编辑网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21155,
            "description": "设置交互模式为编辑交互模式，包含选择交互处理器SelectInteraction（处理框选或选择网元）、编辑处理器EditInteraction（处理改变网元大小）、移动交互处理器MoveInteraction（处理移动网元）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditInteractions",
            "params": [
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选、默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21162,
            "description": "设置创建连线时连线的颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "创建连线时连线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21169,
            "description": "设置创建连线时连线的宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "创建连线时连线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21176,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditPointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21183,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditPointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21190,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditPointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21197,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setEditPointSize",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21204,
            "description": "设置和Network绑定的ElementBox网元容器，Network构造时可以设置ElementBox（内部创建一个新的ElementBox），也可以构造完后再设置ElementBox",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setElementBox",
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器",
                    "type": "twaver.ElementBox"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21211,
            "description": "设置网元视图生成器，用于创建和网元关联的网元视图，默认用element#getElementUIClass返回的类型创建和网元关联的网元视图\ntwaver.Defaults.ELEMENTUI_FUNCTION = function(network, element){\n    var clazz = element.getElementUIClass();\n    if (clazz) {\n         return new clazz(network, element);\n    }\n    return null;\n }",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setElementUIFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元视图生成器",
                    "type": "Function"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21225,
            "description": "设置是否包含编辑交互处理器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setHasEditInteraction",
            "params": [
                {
                    "name": "value",
                    "description": "是否包含编辑交互处理器",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21232,
            "description": "设置水平滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setHScrollBarVisible",
            "params": [
                {
                    "name": "v",
                    "description": "水平滚动条是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21239,
            "description": "设置交互处理器，交互处理器用于设置Network相应哪些键盘和鼠标事件。",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setInteractions",
            "params": [
                {
                    "name": "interactions",
                    "description": "包含交互处理器的集合",
                    "type": "twaver.List"
                }
            ],
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.SelectInteraction(network),\n    new twaver.network.interaction.EditInteraction(network),\n    new twaver.network.interaction.MoveInteraction(network),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21252,
            "description": "设置是否允许用键盘Delete键删除选中网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许用键盘Delete键删除选中网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21259,
            "description": "设置是否允许用键盘Ctrl+A键选择所有网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许用键盘Ctrl+A键选择所有网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21266,
            "description": "设置延迟移动网元时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLazyMoveAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21273,
            "description": "设置延迟移动网元时轮廓是否填充",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLazyMoveFill",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时轮廓是否填充",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21280,
            "description": "设置延迟移动网元时网元的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLazyMoveFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21287,
            "description": "设置延迟移动网元时网元的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLazyMoveOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21294,
            "description": "设置延迟移动网元时网元的边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLazyMoveOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21301,
            "description": "设置是否限制网元坐标不能为负",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLimitElementInPositiveLocation",
            "params": [
                {
                    "name": "v",
                    "description": "是否限制网元坐标不能为负",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21308,
            "description": "设置是否限制左上角",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLimitViewInCanvas",
            "params": [
                {
                    "name": "v",
                    "description": "是否限制左上角",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21315,
            "description": "设置节点是否可以连线的过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLinkableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "节点是否可以连线的过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21322,
            "description": "设置是否启用流动Link，默认是false",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLinkFlowEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "是否启用流动Link",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21329,
            "description": "设置LINK的流动间隔时间",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLinkFlowInterval",
            "params": [
                {
                    "name": "value",
                    "description": "Link的流动间隔时间(毫秒)",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21336,
            "description": "设置连线路径生成函数function (linkUI, defaultPoints)",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setLinkPathFunction",
            "params": [
                {
                    "name": "value",
                    "description": "连线路径生成函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21343,
            "description": "设置交互模式为放大镜模式",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setMagnifyInteractions",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21349,
            "description": "设置网元被选择时是否让其可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "网元被选择时是否让其可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21356,
            "description": "设置网元可移动过滤器，用于判断网元是否可以移动，如果网元是Link，则不可移动；如果movableFunction返回false，则也不可移动；如果网元所在的层不可移动，则也不可移动；否则可以移动",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setMovableFunction",
            "params": [
                {
                    "name": "v",
                    "description": "网元可移动过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setMovableFunction(function (element) {\n    return element.getName() === 'From';\n});"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21366,
            "description": "设置是否正在移动网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setMovingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在移动网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21373,
            "description": "设置交互模式为微软触摸交互模式",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setMSTouchInteractions",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21379,
            "description": "设置不是代理的连线是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setNoAgentLinkVisible",
            "params": [
                {
                    "name": "v",
                    "description": "不是代理的连线是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21386,
            "description": "设置下方内边距",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setPaddingBottom",
            "params": [
                {
                    "name": "v",
                    "description": "下方内边距",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21393,
            "description": "设置右边内边距",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setPaddingRight",
            "params": [
                {
                    "name": "v",
                    "description": "右边内边距",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21400,
            "description": "设置交互模式为手抓图交互模式，包含手抓图交互处理器PanInteraction（处理垂直或水平滚动滚动条）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setPanInteractions",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21406,
            "description": "设置是否允许框选网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRectSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许框选网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21413,
            "description": "设置框选网元过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRectSelectFilter",
            "params": [
                {
                    "name": "v",
                    "description": "框选网元过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21420,
            "description": "设置改变网元大小时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizeAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21427,
            "description": "设置延迟改变网元大小时网元边框的颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizeLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟改变网元大小时网元边框的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21434,
            "description": "设置延迟改变网元大小时网元边框的宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizeLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "延迟改变网元大小时网元边框的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21441,
            "description": "设置改变网元大小时控制点的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizePointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21448,
            "description": "设置改变网元大小时控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizePointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21455,
            "description": "设置改变网元大小时控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizePointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21462,
            "description": "设置更改网元大小的控制点的大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setResizePointSize",
            "params": [
                {
                    "name": "v",
                    "description": "更改网元大小的控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21469,
            "description": "设置网元是否可旋转过滤器",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元是否可旋转过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21476,
            "description": "设置旋转控制点的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatePointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21483,
            "description": "设置旋转控制点的偏移量",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatePointOffset",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的偏移量",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21490,
            "description": "设置旋转控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatePointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21497,
            "description": "设置旋转控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatePointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21504,
            "description": "设置旋转控制点的大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatePointSize",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21511,
            "description": "设置旋转刻度填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotateScaleFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21518,
            "description": "设置旋转刻度文字字体颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotateScaleFontColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度文字字体颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21525,
            "description": "设置旋转刻度高度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotateScaleHeight",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21532,
            "description": "设置旋转刻度宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotateScaleWidth",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21539,
            "description": "设置正在旋转的节点",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setRotatingElement",
            "params": [
                {
                    "name": "v",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21546,
            "description": "设置滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setScrollBarVisible",
            "params": [
                {
                    "name": "v",
                    "description": "滚动条是否可见",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21553,
            "description": "设置滚动条宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setScrollBarWidth",
            "params": [
                {
                    "name": "v",
                    "description": "滚动条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21560,
            "description": "设置框选时矩形框的填充色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSelectFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21567,
            "description": "设置是否正在框选网元",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSelectingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在框选网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21574,
            "description": "设置选择模式（当框选网元时，哪些网元会被选中），默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSelectMode",
            "params": [
                {
                    "name": "v",
                    "description": "选择模式",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21585,
            "description": "设置框选时矩形框的边框颜色",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSelectOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21592,
            "description": "设置框选时矩形框的边框宽度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSelectOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的边框宽度",
                    "type": "String"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21599,
            "description": "设置网元被选中后是否置顶",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSendToTopOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "网元被选中后是否置顶",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21606,
            "description": "设置是否显示旋转网元时的刻度",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setShowRotateScale",
            "params": [
                {
                    "name": "v",
                    "description": "是否显示旋转网元时的刻度",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21613,
            "description": "设置进入下一层子网或返回上一层子网时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setSubNetworkAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "进入下一层子网或返回上一层子网时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21620,
            "description": "设置是否让提示信息生效",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setToolTipEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "是否让提示信息生效",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21627,
            "description": "设置当前交互模式为触摸模式，只响应触摸事件，包含触摸交互处理器TouchInteraction（处理触摸事件）",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setTouchInteractions",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21633,
            "description": "设置视图偏移量",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setViewOffSet",
            "params": [
                {
                    "name": "xoff",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "yoff",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21641,
            "description": "设置视图区域",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setViewRect",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21651,
            "description": "设置网元可见过滤器，用于判断指定的网元是否可见，如果可见过滤器visibleFunction返回false，则不可见；如果网元所在的层不可见，则网元不可见；否则网元可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setVisibleFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元可见过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setVisibleFunction(function (element) {\n    return !(element instanceof twaver.Link);\n});"
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21661,
            "description": "设置垂直滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.canvas.Network.setVScrollBarVisible",
            "params": [
                {
                    "name": "v",
                    "description": "垂直滚动条是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21668,
            "description": "从Network生成指定大小的Canvas元素，用于生成缩略图",
            "itemtype": "method",
            "name": "twaver.canvas.Network.toCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "要生成的Canvas元素的宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "要生成的Canvas元素的高度",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "目标Canvas元素，可选，默认为null，如果为null，则创建新的Canvas元素，否则使用此Canvas元素",
                    "type": "HTMLCanvasElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Canvas元素",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21678,
            "description": "从Network的指定区域生成指定比例的Canvas元素，用于生成缩略图",
            "itemtype": "method",
            "name": "twaver.canvas.Network.toCanvasByRegion",
            "params": [
                {
                    "name": "rect",
                    "description": "包含x、y、width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "scale",
                    "description": "缩放比例",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "目标Canvas元素，可选，默认为null，如果为null，则创建新的Canvas元素，否则使用此Canvas元素",
                    "type": "HTMLCanvasElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Canvas元素",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21688,
            "description": "返回上一层子网，可以设置是否使用动画效果，还可以指定返回结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.canvas.Network.upSubNetwork",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "返回上一层子网结束后执行的回调函数，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21696,
            "description": "计算画布大小",
            "itemtype": "method",
            "name": "twaver.canvas.Network.validateCanvasSize",
            "class": "twaver.canvas.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21717,
            "description": "对表盘的刻度值进行格式化，默认是保留两位小数。用户可以重写此方法进行自己的格式化",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.formatScaleText",
            "params": [
                {
                    "name": "value",
                    "description": "格式化的数据对象",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "格式化后的值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21725,
            "description": "获取表盘的填充颜色，默认为twaver.Defaults.DIALCHART_COLOR_RANGE_FILL_COLOR。\n当ColorRangeList没有赋值时，这个参数才生效",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getColorRangeFillColor",
            "return": {
                "description": "表盘的填充颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21733,
            "description": "获取表盘的填充颜色列表，如果设置了仪表盘的填充颜色列表，TWaver会使用这几个颜色值平分显示在表盘上",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getColorRangeList",
            "return": {
                "description": "表盘的填充颜色列表",
                "type": "twaver.List"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21740,
            "description": "获取表盘图结束时的角度，默认为 twaver.Defaults.DIALCHART_END_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getEndAngle",
            "return": {
                "description": "表盘图结束时的角度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21747,
            "description": "获取表盘内圈深色部分的半径值。表盘的内圈深色部分用户绘制表盘的3D效果，默认为twaver.Defaults.DIALCHART_INNER_DARKER_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getInnerDarkerRadius",
            "return": {
                "description": "表盘内圈深色部分的半径值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21754,
            "description": "获取表盘内圈的半径值，取值范围为0-1，默认为 twaver.Defaults.DIALCHART_INNER_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getInnerRadius",
            "return": {
                "description": "表盘内圈的半径值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21761,
            "description": "获取表盘上限制的最小刻度值，默认为 twaver.Defaults.DIALCHART_LOWER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getLowerLimit",
            "return": {
                "description": "表盘上限制的最小刻度值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21768,
            "description": "获取表盘上主要的刻度值数量，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_COUNT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMajorScaleCount",
            "return": {
                "description": "表盘上主要的刻度值数量",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21775,
            "description": "获取表盘上主要的刻度线的颜色，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMajorScaleLineColor",
            "return": {
                "description": "表盘上主要的刻度线的颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21782,
            "description": "获取表盘上主要的刻度线的长度，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_LINE_LENGTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMajorScaleLineLength",
            "return": {
                "description": "表盘上主要的刻度线的长度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21789,
            "description": "获取表盘上主要的刻度线的宽度，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMajorScaleLineWidth",
            "return": {
                "description": "表盘上主要的刻度线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21796,
            "description": "获取表盘上次要的刻度值数量，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_COUNT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMinorScaleCount",
            "return": {
                "description": "表盘上次要的刻度值数量",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21803,
            "description": "获取表盘上次要的刻度线的颜色，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMinorScaleLineColor",
            "return": {
                "description": "表盘上次要的刻度线的颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21810,
            "description": "获取表盘上次要的刻度线的长度，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_LINE_LENGTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMinorScaleLineLength",
            "return": {
                "description": "表盘上次要的刻度线的长度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21817,
            "description": "获取表盘上次要的刻度线的宽度，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getMinorScaleLineWidth",
            "return": {
                "description": "表盘上次要的刻度线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21824,
            "description": "获取表盘外圈浅色部分的半径值。表盘的外圈浅色部分用于绘制表盘的3D效果，默认为twaver.Defaults.DIALCHART_OUTER_BRIGHTER_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getOuterBrighterRadius",
            "return": {
                "description": "表盘外圈浅色部分的半径值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21831,
            "description": "获取表盘外边框的颜色，默认为 twaver.Defaults.DIALCHART_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getOutlineColor",
            "return": {
                "description": "表盘外边框的颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21838,
            "description": "获取表盘外边框的宽度，默认为 twaver.Defaults.DIALCHART_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getOutlineWidth",
            "return": {
                "description": "表盘外边框的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21845,
            "description": "获取仪表盘图上中心轴的填充颜色，默认为twaver.Defaults.DIALCHART_PIVOT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getPivotFillColor",
            "return": {
                "description": "中心轴的填充颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21852,
            "description": "获取仪表盘图上中心轴的渐变类型。默认为twaver.Defaults.DIALCHART_PIVOT_GRADIENT。\n渐变类型的可选值为：\n'linear.southwest'：线性.南西\n'linear.southeast'：线性.南东\n'linear.northwest'：线性.北西\n'linear.northeast'：线性.北东\n'linear.north'：线性.北\n'linear.south'：线性.南\n'linear.west'：线性.西\n'linear.east'：线性.东\n'radial.center'：放射.中\n'radial.southwest'：放射.南西\n'radial.southeast'：放射.南东\n'radial.northwest'：放射.北西\n'radial.northeast'：放射.北东\n'radial.north'：放射.北\n'radial.south'：放射.南\n'radial.west'：放射.西\n'radial.east'：放射.东\n'spread.horizontal':扩展.水平\n'spread.vertical':扩展.垂直\n'spread.diagonal':扩展.对角线\n'spread.antidiagonal':扩展.反对角线\n'spread.north':扩展.北\n'spread.south':扩展.南\n'spread.west':扩展.西\n'spread.east':扩展.东",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getPivotGradient",
            "return": {
                "description": "渐变类型",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21886,
            "description": "获取仪表盘图上中心轴的渐变颜色，默认为twaver.Defaults.DIALCHART_PIVOT_GRADIENT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getPivotGradientColor",
            "return": {
                "description": "中心轴的渐变颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21893,
            "description": "获取仪表盘图上中心轴的外边框颜色，默认为twaver.Defaults.DIALCHART_PIVOT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getPivotOutlineColor",
            "return": {
                "description": "中心轴的外边框颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21900,
            "description": "获取仪表盘图上中心轴的外边框宽度，默认为twaver.Defaults.DIALCHART_PIVOT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getPivotOutlineWidth",
            "return": {
                "description": "中心轴的外边框宽度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21907,
            "description": "获取仪表盘图上中心轴的半径值，默认为twaver.Defaults.DIALCHART_PIVOT_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getPivotRadius",
            "return": {
                "description": "中心轴的半径值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21914,
            "description": "获取表盘上刻度值的颜色，默认为twaver.Defaults.DIALCHART_SCALE_TEXT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getScaleTextColor",
            "return": {
                "description": "表盘上刻度值的颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21921,
            "description": "获取表盘上刻度值的字体，默认为twaver.Defaults.DIALCHART_SCALE_TEXT_FONT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getScaleTextFont",
            "return": {
                "description": "表盘上刻度值的字体",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21928,
            "description": "取表盘上刻度值的显示位置。TWaver内部会调用此方法，用户不需调用，但可以重写此方法增加自己的逻辑",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getScaleTextPosition",
            "params": [
                {
                    "name": "angle",
                    "description": "刻度值显示的角度",
                    "type": "Number"
                },
                {
                    "name": "cx",
                    "description": "刻度值显示区域的x坐标值",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "刻度值显示区域的y坐标值",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "刻度值显示区域的宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "刻度值显示区域的高度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回刻度值的位置对象，它是一个包含x，y坐标的对象",
                "type": "Object"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21940,
            "description": "获取选中网元时的阴影的颜色，默认为twaver.Defaults.DIALCHART_SELECT_SHADOW_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getSelectShadowColor",
            "return": {
                "description": "选中网元时的阴影的颜色",
                "type": "String"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21947,
            "description": "获取选中网元时的阴影的偏移值，默认为twaver.Defaults.DIALCHART_SELECT_SHADOW_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getSelectShadowOffset",
            "return": {
                "description": "选中网元时的阴影的偏移值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21954,
            "description": "获取表盘图开始时的角度，默认为 twaver.Defaults.DIALCHART_START_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getStartAngle",
            "return": {
                "description": "表盘图开始时的角度",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21961,
            "description": "获取表盘上限制的最大刻度值",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getUpperLimit",
            "return": {
                "description": "表盘上限制的最大刻度值",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21968,
            "description": "获取仪表盘图上网元的值在指针上显示的位置比例，即在指针上的百分比，默认为twaver.Defaults.DIALCHART_VALUE_POSITION",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.getValuePosition",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21975,
            "description": "判断仪表盘图上中心轴是否需要填充，默认为twaver.Defaults.DIALCHART_PIVOT_FILL",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.isPivotFill",
            "return": {
                "description": "true为需要填充，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21982,
            "description": "判断仪表盘度上的刻度值是否显示在内部，默认为twaver.Defaults.DIALCHART_SCALE_INSIDE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.isScaleInside",
            "return": {
                "description": "true为显示在内部，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21989,
            "description": "获取表盘上限制的最小刻度值是否可见，默认为twaver.Defaults.DIALCHART_SCALE_LOWER_LIMIT_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.isScaleLowerLimitTextVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 21996,
            "description": "判断仪表盘图上的刻度值是否可见，默认为twaver.Defaults.DIALCHART_SCALE_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.isScaleTextVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22003,
            "description": "获取表盘上限制的最大刻度值是否可见，默认为twaver.Defaults.DIALCHART_SCALE_UPPER_LIMIT_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.isScaleUpperLimitTextVisible",
            "return": {
                "description": "true为可见 ，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22010,
            "description": "设置表盘的填充颜色，默认为twaver.Defaults.DIALCHART_COLOR_RANGE_FILL_COLOR。\n当ColorRangeList没有赋值时，这个参数才生效",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setColorRangeFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "表盘的填充颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22018,
            "description": "设置表盘的填充颜色列表，如果设置了仪表盘的填充颜色列表，TWaver会使用这几个颜色值平分显示在表盘上",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setColorRangeList",
            "params": [
                {
                    "name": "v",
                    "description": "表盘的填充颜色列表",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22025,
            "description": "设置表盘图结束时的角度，默认为 twaver.Defaults.DIALCHART_END_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setEndAngle",
            "params": [
                {
                    "name": "v",
                    "description": "表盘图结束时的角度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22032,
            "description": "设置表盘内圈深色部分的半径值。表盘的内圈深色部分用户绘制表盘的3D效果，默认为twaver.Defaults.DIALCHART_INNER_DARKER_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setInnerDarkerRadius",
            "params": [
                {
                    "name": "v",
                    "description": "表盘内圈深色部分的半径值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22039,
            "description": "设置表盘内圈的半径值，取值范围为0-1，默认为 twaver.Defaults.DIALCHART_INNER_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setInnerRadius",
            "params": [
                {
                    "name": "v",
                    "description": "表盘内圈的半径值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22046,
            "description": "设置表盘上限制的最小刻度值，默认为 twaver.Defaults.DIALCHART_LOWER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setLowerLimit",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上限制的最小刻度值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22053,
            "description": "设置表盘上主要的刻度值数量，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_COUNT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMajorScaleCount",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上主要的刻度值数量",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22060,
            "description": "获取表盘上主要的刻度线的颜色，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMajorScaleLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上主要的刻度线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22067,
            "description": "设置表盘上主要的刻度线的长度，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_LINE_LENGTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMajorScaleLineLength",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上主要的刻度线的长度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22074,
            "description": "设置表盘上主要的刻度线的宽度，默认为twaver.Defaults.DIALCHART_MAJOR_SCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMajorScaleLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上主要的刻度线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22081,
            "description": "设置表盘上次要的刻度值数量，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_COUNT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMinorScaleCount",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上次要的刻度值数量",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22088,
            "description": "设置表盘上次要的刻度线的颜色，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMinorScaleLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上次要的刻度线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22095,
            "description": "设置表盘上次要的刻度线的长度，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_LINE_LENGTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMinorScaleLineLength",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上次要的刻度线的长度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22102,
            "description": "设置表盘上次要的刻度线的宽度，默认为twaver.Defaults.DIALCHART_MINOR_SCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setMinorScaleLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上次要的刻度线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22109,
            "description": "设置表盘外圈浅色部分的半径值。表盘的外圈浅色部分用于绘制表盘的3D效果，默认为twaver.Defaults.DIALCHART_OUTER_BRIGHTER_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setOuterBrighterRadius",
            "params": [
                {
                    "name": "v",
                    "description": "表盘外圈浅色部分的半径值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22116,
            "description": "设置表盘外边框的颜色，默认为 twaver.Defaults.DIALCHART_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "表盘外边框的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22123,
            "description": "设置表盘外边框的宽度，默认为 twaver.Defaults.DIALCHART_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "表盘外边框的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22130,
            "description": "设置仪表盘图上中心轴是否需要填充，默认为twaver.Defaults.DIALCHART_PIVOT_FILL",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotFill",
            "params": [
                {
                    "name": "v",
                    "description": "true为需要填充，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22137,
            "description": "设置仪表盘图上中心轴的填充颜色，默认为twaver.Defaults.DIALCHART_PIVOT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "仪表盘图上中心轴的填充颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22144,
            "description": "设置仪表盘图上中心轴的渐变类型，默认为twaver.Defaults.DIALCHART_PIVOT_GRADIENT。\n渐变类型的可选值为：\n'linear.southwest'：线性.南西\n'linear.southeast'：线性.南东\n'linear.northwest'：线性.北西\n'linear.northeast'：线性.北东\n'linear.north'：线性.北\n'linear.south'：线性.南\n'linear.west'：线性.西\n'linear.east'：线性.东\n'radial.center'：放射.中\n'radial.southwest'：放射.南西\n'radial.southeast'：放射.南东\n'radial.northwest'：放射.北西\n'radial.northeast'：放射.北东\n'radial.north'：放射.北\n'radial.south'：放射.南\n'radial.west'：放射.西\n'radial.east'：放射.东\n'spread.horizontal':扩展.水平\n'spread.vertical':扩展.垂直\n'spread.diagonal':扩展.对角线\n'spread.antidiagonal':扩展.反对角线\n'spread.north':扩展.北\n'spread.south':扩展.南\n'spread.west':扩展.西\n'spread.east':扩展.东",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotGradient",
            "params": [
                {
                    "name": "v",
                    "description": "渐变类型",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22178,
            "description": "设置仪表盘图上中心轴的渐变颜色，默认为twaver.Defaults.DIALCHART_PIVOT_GRADIENT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotGradientColor",
            "params": [
                {
                    "name": "v",
                    "description": "中心轴的渐变颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22185,
            "description": "获取仪表盘图上中心轴的外边框颜色，默认为twaver.Defaults.DIALCHART_PIVOT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "中心轴的外边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22192,
            "description": "设置仪表盘图上中心轴的外边框宽度，默认为twaver.Defaults.DIALCHART_PIVOT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "仪表盘图上中心轴的外边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22199,
            "description": "设置仪表盘图上中心轴的半径值，默认为twaver.Defaults.DIALCHART_PIVOT_RADIUS",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setPivotRadius",
            "params": [
                {
                    "name": "v",
                    "description": "仪表盘图上中心轴的半径值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22206,
            "description": "设置仪表盘度上的刻度值是否显示在内部，默认为twaver.Defaults.DIALCHART_SCALE_INSIDE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setScaleInside",
            "params": [
                {
                    "name": "v",
                    "description": "true为显示在内部，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22213,
            "description": "设置表盘上限制的最小刻度值是否可见，默认为twaver.Defaults.DIALCHART_SCALE_LOWER_LIMIT_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setScaleLowerLimitTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22220,
            "description": "设置表盘上刻度值的颜色，默认为twaver.Defaults.DIALCHART_SCALE_TEXT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setScaleTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上刻度值的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22227,
            "description": "设置表盘上刻度值的字体，默认为twaver.Defaults.DIALCHART_SCALE_TEXT_FONT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setScaleTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上刻度值的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22234,
            "description": "设置仪表盘图上的刻度值是否可见，默认为twaver.Defaults.DIALCHART_SCALE_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setScaleTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22241,
            "description": "设置表盘上限制的最大刻度值是否可见，默认为twaver.Defaults.DIALCHART_SCALE_UPPER_LIMIT_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setScaleUpperLimitTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见 ，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22248,
            "description": "设置选中网元时的阴影的颜色，默认为twaver.Defaults.DIALCHART_SELECT_SHADOW_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setSelectShadowColor",
            "params": [
                {
                    "name": "v",
                    "description": "选中网元时的阴影的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22255,
            "description": "设置选中网元时的阴影的偏移值，默认为twaver.Defaults.DIALCHART_SELECT_SHADOW_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setSelectShadowOffset",
            "params": [
                {
                    "name": "v",
                    "description": "选中网元时的阴影的偏移值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22262,
            "description": "设置表盘图开始时的角度，默认为 twaver.Defaults.DIALCHART_START_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setStartAngle",
            "params": [
                {
                    "name": "v",
                    "description": "表盘图开始时的角度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22269,
            "description": "设置表盘上限制的最大刻度值，默认为twaver.Defaults.DIALCHART_UPPER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setUpperLimit",
            "params": [
                {
                    "name": "v",
                    "description": "表盘上限制的最大刻度值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22276,
            "description": "设置仪表盘图上网元的值在指针上显示的位置比例，即在指针上的百分比，默认为twaver.Defaults.DIALCHART_VALUE_POSITION",
            "itemtype": "method",
            "name": "twaver.charts.DialChart.setValuePosition",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.DialChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22298,
            "description": "获取环形饼图内圈的百分比值，取值范围0-1，默认值为twaver.Defaults.PIECHART_DONUT_RATE。当饼图的类型为donut或ovalDonut时，这个参数才生效。",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getDonutRate",
            "return": {
                "description": "环形饼图内圈的百分比值",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22305,
            "description": "获取线形饼图显示的百分比值，取值范围在0-1之间，默认值为twaver.Defaults.PIECHART_LINE_RATE。当饼图的类型为line时，这个参数才生效。",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getLineRate",
            "return": {
                "description": "线形饼图显示的百分比值",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22314,
            "description": "获取饼图上选择网元时网元的偏移值，默认为twaver.Defaults.PIECHART_SELECT_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getSelectOffset",
            "return": {
                "description": "选择网元时网元的偏移值",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22321,
            "description": "设置饼图阴影的颜色，默认值为twaver.Defaults.PIECHART_SHADOW_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getShadowColor",
            "return": {
                "description": "饼图阴影的颜色",
                "type": "String"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22328,
            "description": "设置饼图阴影的偏移值，默认值为twaver.Defaults.PIECHART_SHADOW_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getShadowOffset",
            "return": {
                "description": "饼图阴影的偏移值",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22335,
            "description": "获取饼图上起始值显示的角度，取值范围为0-3.141592653589793，默认值为twaver.Defaults.PIECHART_START_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getStartAngle",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22342,
            "description": "获取饼图上所有显示的网元值的总和",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getSum",
            "return": {
                "description": "显示的网元值的总和",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22349,
            "description": "获取饼图的类型，默认为twaver.Defaults.PIECHART_TYPE。类型的可选值有：\n'oval'：椭圆形\n'circle'：圆形\n'line'：直线型\n'donut'：环线\n'ovalDonut'：椭圆环型",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getType",
            "return": {
                "description": "饼图的类型",
                "type": "String"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22361,
            "description": "获取网元的值到中心的距离与饼图半径的位置百分比，默认为twaver.Defaults.PIECHART_VALUE_POSITION",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.getValuePosition",
            "return": {
                "description": "网元的值到中心的距离与饼图半径的位置百分比",
                "type": "Number"
            },
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22368,
            "description": "设置环形饼图内圈的百分比值，取值范围0-1，默认值为twaver.Defaults.PIECHART_DONUT_RATE。当饼图的类型为donut或ovalDonut时，这个参数才生效。",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setDonutRate",
            "params": [
                {
                    "name": "v",
                    "description": "环形饼图内圈的百分比值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22375,
            "description": "设置线形饼图显示的百分比值，取值范围在0-1之间，默认值为twaver.Defaults.PIECHART_LINE_RATE。当饼图的类型为line时，这个参数才生效。",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setLineRate",
            "params": [
                {
                    "name": "v",
                    "description": "线形饼图显示的百分比值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22382,
            "description": "设置饼图上选择网元时网元的偏移值，默认为twaver.Defaults.PIECHART_SELECT_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setSelectOffset",
            "params": [
                {
                    "name": "v",
                    "description": "饼图上选择网元时网元的偏移值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22389,
            "description": "获取当选中饼图时其阴影的颜色，默认值为twaver.Defaults.PIECHART_SHADOW_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setShadowColor",
            "params": [
                {
                    "name": "v",
                    "description": "当选中饼图时其阴影的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22396,
            "description": "获取选中饼图时其阴影的偏移值，默认值为twaver.Defaults.PIECHART_SHADOW_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setShadowOffset",
            "params": [
                {
                    "name": "v",
                    "description": "选中饼图时其阴影的偏移值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22403,
            "description": "设置饼图上起始值显示的角度，取值范围为0-3.141592653589793，默认值为twaver.Defaults.PIECHART_START_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setStartAngle",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22410,
            "description": "设置饼图的类型，默认为twaver.Defaults.PIECHART_TYPE。类型的可选值有：\n'oval'：椭圆形\n'circle'：圆形\n'line'：线形\n'donut'：环形\n'ovalDonut'：椭圆环形",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setType",
            "params": [
                {
                    "name": "v",
                    "description": "饼图的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22422,
            "description": "设置饼图上网元的值显示的位置百分比，默认为twaver.Defaults.PIECHART_VALUE_POSITION",
            "itemtype": "method",
            "name": "twaver.charts.PieChart.setValuePosition",
            "params": [
                {
                    "name": "v",
                    "description": "网元的值显示的位置百分比",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.PieChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22445,
            "description": "格式化雷达图上刻度数据显示的格式，默认是保留两位小数",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.formatScaleText",
            "params": [
                {
                    "name": "value",
                    "description": "雷达图上的刻度值",
                    "type": "Number"
                },
                {
                    "name": "axisIndex",
                    "description": "雷达图上坐标轴的次序",
                    "type": "String"
                }
            ],
            "return": {
                "description": "格式化后的数据",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22454,
            "description": "获取指定数据在雷达图上显示的瞄点的形状，默认为圆形。TWaver中瞄点的形状支持：\n'rectangle'：矩形，\n'oval'：椭圆形，\n'roundrect'：圆角矩形，\n'star'：星形，\n'triangle'：三角形，\n'circle'：圆形，\n'hexagon'：六角形，\n'pentagon'：五角形，\n'diamond'：菱形",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAnchorShape",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "瞄点显示的形状",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22471,
            "description": "获取指定数据在雷达图上显示的瞄点的大小。默认为6",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAnchorSize",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "瞄点的大小",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22479,
            "description": "获取网元在雷达图上显示区域的透明度，默认为twaver.Defaults.RADARCHART_AREA_FILL_ALPHA",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAreaFillAlpha",
            "return": {
                "description": "显示区域的透明度，取值范围0-1",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22486,
            "description": "获取当选择网元时，网元在雷达图上显示区域的透明度，默认为\ntwaver.Defaults.RADARCHART_AREA_SELECT_FILL_ALPHA",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAreaSelectFillAlpha",
            "return": {
                "description": "透明度值的取值范围0-1",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22494,
            "description": "获取雷达图上坐标轴的数量",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisCount",
            "return": {
                "description": "雷达图上坐标轴的数量",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22501,
            "description": "获取雷达图上坐标轴的颜色，默认为twaver.Defaults.RADARCHART_AXIS_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisLineColor",
            "return": {
                "description": "雷达图上坐标轴的颜色",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22508,
            "description": "获取雷达图上坐标轴的宽度，默认为twaver.Defaults.RADARCHART_AXIS_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisLineWidth",
            "return": {
                "description": "雷达图上坐标轴的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22515,
            "description": "获取雷达图上坐标轴的集合，坐标轴的集合设置成如下的格式：\nnew twaver.List([\n\t{ text: 'Inflation', min: -5, max: 15 },\n\t{ text: 'Area(Millions)', min: 0, max: 20000000 / 1000000 },\n\t{ text: 'Population(Millions)', min: 0, max: 2000000000 / 1000000 },\n\t{ text: 'GDP(Thousands)', min: 0, max: 8000000 / 1000000 },\n\t{ text: 'Growth', min: 0, max: 2 }\n]);",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisList",
            "return": {
                "description": "雷达图上坐标轴的集合",
                "type": "twaver.List"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22529,
            "description": "获取雷达图上起始轴的显示角度。默认为twaver.Defaults.RADARCHART_AXIS_START_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisStartAngle",
            "return": {
                "description": "雷达图上起始轴的显示角度",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22536,
            "description": "获取雷达图上坐标轴文字的显示颜色。默认为 twaver.Defaults.RADARCHART_AXIS_TEXT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisTextColor",
            "return": {
                "description": "雷达图上坐标轴文字的显示颜色",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22543,
            "description": "获取雷达图坐标轴上文字的字体。默认为twaver.Defaults.RADARCHART_AXIS_TEXT_FONT",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisTextFont",
            "return": {
                "description": "雷达图坐标轴上文字的字体",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22550,
            "description": "获取雷达图上坐标轴文字显示的位置，TWaver内部调用，用户可以重写此方法更改文字显示的位置",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getAxisTextPosition",
            "params": [
                {
                    "name": "angle",
                    "description": "坐标轴的角度",
                    "type": "Number"
                },
                {
                    "name": "cx",
                    "description": "坐标轴文字显示区域的x点",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "坐标轴文字显示区域的y点",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "坐标轴文字显示区域的宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "坐标轴文字显示区域的高度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "坐标轴文字显示的位置，是一个带x，y的对象，例如{x:200,y:300}",
                "type": "Object"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22562,
            "description": "获取指定的数据在雷达图上显示的线的宽度，默认为2个像素",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getLineWidth",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "数据在雷达图上显示的线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22570,
            "description": "获取雷达图上坐标轴之间环形线的颜色，默认为twaver.Defaults.RADARCHART_RING_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getRingLineColor",
            "return": {
                "description": "环形线的颜色",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22577,
            "description": "获取雷达图上坐标轴之间环形线的宽度，默认为twaver.Defaults.RADARCHART_RING_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getRingLineWidth",
            "return": {
                "description": "环形线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22584,
            "description": "获取雷达图上坐标轴之间环形线的类型，默认为\ntwaver.Defaults.RADARCHART_RING_TYPE，可选值有：\n'line'：直线, \n'arc'：弧形线",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getRingType",
            "return": {
                "description": "环形线的类型",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22594,
            "description": "获取雷达图上坐标轴刻度的数量，默认为twaver.Defaults.RADARCHART_SCALE_COUNT",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getScaleCount",
            "return": {
                "description": "刻度的数量",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22601,
            "description": "获取雷达图上坐标轴刻度的最大值，默认为\ntwaver.Defaults.RADARCHART_SCALE_MAXVALUE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getScaleMaxValue",
            "return": {
                "description": "坐标轴刻度的最大值",
                "type": "Number"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22609,
            "description": "获取雷达图上坐标轴刻度的最小值，默认为\ntwaver.Defaults.RADARCHART_SCALE_MINVALUE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getScaleMinValue",
            "return": {
                "description": "坐标轴刻度的最小值",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22617,
            "description": "获取雷达图上坐标轴刻度尺文字的颜色，默认为\ntwaver.Defaults.RADARCHART_SCALE_TEXT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getScaleTextColor",
            "return": {
                "description": "坐标轴刻度尺文字的颜色",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22625,
            "description": "获取雷达图上坐标轴刻度尺文字的字体，默认为\ntwaver.Defaults.RADARCHART_SCALE_TEXT_FONT",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getScaleTextFont",
            "return": {
                "description": "坐标轴刻度尺文字的字体",
                "type": "String"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22633,
            "description": "获取雷达图上坐标轴刻度尺文字的显示位置，TWaver内部调用，用户可以重写此方法更改文字显示的位置",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getScaleTextPosition",
            "params": [
                {
                    "name": "angle",
                    "description": "坐标轴的角度",
                    "type": "Number"
                },
                {
                    "name": "cx",
                    "description": "坐标轴刻度尺文字显示区域的x点",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "坐标轴刻度尺文字显示区域的y点",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "坐标轴刻度尺文字显示区域的宽度",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "坐标轴刻度尺文字显示区域的高度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "坐标轴刻度文字显示的位置，是一个带x，y的对象，例如{x:200,y:300}",
                "type": "Object"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22645,
            "description": "获取指定的数据在雷达图上显示值的集合",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.getValues",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "数据在雷达图上显示值的集合",
                "type": "twaver.List"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22653,
            "description": "判断雷达图上的网元瞄点是否可见，默认为twaver.Defaults.RADARCHART_ANCHOR_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.isAnchorVisible",
            "return": {
                "description": "true为可见，false不可见",
                "type": "Boolean"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22660,
            "description": "获取网元在雷达图上显示区域的是否需要填充，默认为twaver.Defaults.RADARCHART_AREA_FILL",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.isAreaFill",
            "return": {
                "description": "true为需要填充，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22667,
            "description": "判读雷达图上坐标轴的文字是否可见，默认为\ntwaver.Defaults.RADARCHART_AXIS_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.isAxisTextVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22675,
            "description": "判断雷达图上坐标轴是否可见，默认为twaver.Defaults.RADARCHART_AXIS_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.isAxisVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22682,
            "description": "判断雷达图上坐标轴之间环形线的是否可见，默认为twaver.Defaults.RADARCHART_RING_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.isRingVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22689,
            "description": "判断雷达图上坐标轴刻度尺上的文字是否可见，默认为\ntwaver.Defaults.RADARCHART_SCALE_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.isScaleTextVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22697,
            "description": "设置雷达图上的网元瞄点是否可见，默认为twaver.Defaults.RADARCHART_ANCHOR_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAnchorVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，false不可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22704,
            "description": "设置网元在雷达图上显示区域的是否需要填充，默认为twaver.Defaults.RADARCHART_AREA_FILL",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAreaFill",
            "params": [
                {
                    "name": "v",
                    "description": "true为需要填充，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22711,
            "description": "设置网元在雷达图上显示区域的透明度，默认为twaver.Defaults.RADARCHART_AREA_FILL_ALPHA",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAreaFillAlpha",
            "params": [
                {
                    "name": "v",
                    "description": "显示区域的透明度，取值范围0-1",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22718,
            "description": "设置当选择网元时，网元在雷达图上显示区域的透明度，默认为\ntwaver.Defaults.RADARCHART_AREA_SELECT_FILL_ALPHA",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAreaSelectFillAlpha",
            "params": [
                {
                    "name": "v",
                    "description": "透明度值的取值范围0-1",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22726,
            "description": "设置雷达图上坐标轴的颜色，默认为twaver.Defaults.RADARCHART_AXIS_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "雷达图上坐标轴的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22733,
            "description": "设置雷达图上坐标轴的宽度，默认为twaver.Defaults.RADARCHART_AXIS_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "雷达图上坐标轴的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22740,
            "description": "设置雷达图上坐标轴的集合，坐标轴的集合设置成如下的格式：\nnew twaver.List([\n\t{ text: 'Inflation', min: -5, max: 15 },\n\t{ text: 'Area(Millions)', min: 0, max: 20000000 / 1000000 },\n\t{ text: 'Population(Millions)', min: 0, max: 2000000000 / 1000000 },\n\t{ text: 'GDP(Thousands)', min: 0, max: 8000000 / 1000000 },\n\t{ text: 'Growth', min: 0, max: 2 }\n]);",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisList",
            "params": [
                {
                    "name": "v",
                    "description": "雷达图上坐标轴的集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22754,
            "description": "设置雷达图上起始轴的显示角度。默认为twaver.Defaults.RADARCHART_AXIS_START_ANGLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisStartAngle",
            "params": [
                {
                    "name": "v",
                    "description": "雷达图上起始轴的显示角度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22761,
            "description": "设置雷达图上坐标轴文字的显示颜色。默认为 twaver.Defaults.RADARCHART_AXIS_TEXT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "雷达图上坐标轴文字的显示颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22768,
            "description": "设置雷达图坐标轴上文字的字体。默认为twaver.Defaults.RADARCHART_AXIS_TEXT_FONT",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "雷达图坐标轴上文字的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22775,
            "description": "设置雷达图上坐标轴的文字是否可见，默认为\ntwaver.Defaults.RADARCHART_AXIS_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22783,
            "description": "设置雷达图上坐标轴是否可见，默认为twaver.Defaults.RADARCHART_AXIS_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setAxisVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22790,
            "description": "设置雷达图上坐标轴之间环形线的颜色，默认为twaver.Defaults.RADARCHART_RING_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setRingLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "环形线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22797,
            "description": "设置雷达图上坐标轴之间环形线的宽度，默认为twaver.Defaults.RADARCHART_RING_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setRingLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "环形线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22804,
            "description": "设置雷达图上坐标轴之间环形线的类型，默认为\ntwaver.Defaults.RADARCHART_RING_TYPE，可选值有：\n'line'：直线, \n'arc'：弧形线",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setRingType",
            "params": [
                {
                    "name": "v",
                    "description": "环形线的类型",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22814,
            "description": "设置雷达图上坐标轴之间环形线的是否可见，默认为twaver.Defaults.RADARCHART_RING_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setRingVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22821,
            "description": "设置雷达图上坐标轴刻度的数量，默认为twaver.Defaults.RADARCHART_SCALE_COUNT",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setScaleCount",
            "params": [
                {
                    "name": "v",
                    "description": "刻度的数量",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22828,
            "description": "设置雷达图上坐标轴刻度的最大值，默认为\ntwaver.Defaults.RADARCHART_SCALE_MAXVALUE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setScaleMaxValue",
            "params": [
                {
                    "name": "v",
                    "description": "坐标轴刻度的最大值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22836,
            "description": "设置雷达图上坐标轴刻度的最小值，默认为\ntwaver.Defaults.RADARCHART_SCALE_MINVALUE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setScaleMinValue",
            "params": [
                {
                    "name": "v",
                    "description": "坐标轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22844,
            "description": "设置雷达图上坐标轴刻度尺文字的颜色，默认为\ntwaver.Defaults.RADARCHART_SCALE_TEXT_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setScaleTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "坐标轴刻度尺文字的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22852,
            "description": "设置雷达图上坐标轴刻度尺文字的字体，默认为\ntwaver.Defaults.RADARCHART_SCALE_TEXT_FONT",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setScaleTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "坐标轴刻度尺文字的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22860,
            "description": "设置雷达图上坐标轴刻度尺上的文字是否可见，默认为\ntwaver.Defaults.RADARCHART_SCALE_TEXT_VISIBLE",
            "itemtype": "method",
            "name": "twaver.charts.RadarChart.setScaleTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.RadarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22881,
            "description": "格式化Y轴上的刻度尺的文字，默认保留两位小数。用户可以重写这个方法来对文字进行格式化",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.formatYScaleText",
            "params": [
                {
                    "name": "value",
                    "description": "指定的数据值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "格式化后的数据",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22889,
            "description": "获取显示的列数，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getColumnCount",
            "return": {
                "description": "显示的列数",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22896,
            "description": "获取显示的列的宽度，TWaver内部会调用此方法。",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getColumnWidth",
            "return": {
                "description": "列的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22903,
            "description": "获取图表上限制的最小值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getLowerLimit",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22910,
            "description": "获取图表上网元的最大值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getMax",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22917,
            "description": "获取图表上网元的最小值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getMin",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22924,
            "description": "最大、最小值之间的差值，取的是Max-Min",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getRange",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22931,
            "description": "获取图表上限制显示的最大值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getUpperLimit",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22938,
            "description": "获取指定数据值的集合，取的是data中的chart.values的样式值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getValues",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "数据对象图表上值的集合",
                "type": "twaver.List"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22946,
            "description": "获取图表上X轴线的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXAxisLineColor",
            "return": {
                "description": "X轴线的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22953,
            "description": "获取图表上X轴线的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXAxisLineWidth",
            "return": {
                "description": "X轴线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22960,
            "description": "获取图表上X轴的显示文字",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXAxisText",
            "return": {
                "description": "X轴的显示文字",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22967,
            "description": "获取图表上X轴的显示文字的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXAxisTextColor",
            "return": {
                "description": "X轴显示文字的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22974,
            "description": "获取图表上X轴的显示文字的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXAxisTextFont",
            "return": {
                "description": "X轴的显示文字的字体",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22981,
            "description": "获取图表上X轴刻度尺上的文字显示的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXScaleTextColor",
            "return": {
                "description": "X轴刻度尺上文字显示颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22988,
            "description": "获取图表上X轴刻度尺上的文字显示的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXScaleTextFont",
            "return": {
                "description": "X轴刻度尺上的文字的字体",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 22995,
            "description": "获取图表上X轴刻度尺上的文字显示的方向，可选值为\n'horizontal'：水平\n'vertical'：垂直",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXScaleTextOrientation",
            "return": {
                "description": "X轴刻度尺上的文字显示的方向",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23004,
            "description": "获取X轴上刻度尺的文字显示的内容",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getXScaleTexts",
            "return": {
                "description": "刻度尺的文字显示的内容集合",
                "type": "twaver.List"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23012,
            "description": "获取图表上Y轴线的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYAxisLineColor",
            "return": {
                "description": "Y轴线的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23019,
            "description": "获取图表上Y轴线的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYAxisLineWidth",
            "return": {
                "description": "Y轴线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23026,
            "description": "获取图表上Y轴的显示文字",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYAxisText",
            "return": {
                "description": "Y轴的显示文字",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23033,
            "description": "获取图表上Y轴的文字显示的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYAxisTextColor",
            "return": {
                "description": "Y轴的文字显示的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23040,
            "description": "获取图表上Y轴的文字显示的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYAxisTextFont",
            "return": {
                "description": "Y轴的文字显示的字体",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23047,
            "description": "获取图表上Y轴刻度线的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYScaleLineColor",
            "return": {
                "description": "Y轴刻度线的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23054,
            "description": "获取图表上Y轴刻度线的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYScaleLineWidth",
            "return": {
                "description": "Y轴刻度线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23061,
            "description": "获取图表上Y轴刻度之间的间隙像素值，当没有设置Y轴刻度值之间的间距时，这个参数生效",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYScalePixelGap",
            "return": {
                "description": "Y轴刻度之间的间隙像素值",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23068,
            "description": "获取图表上Y轴刻度尺上的文字显示的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYScaleTextColor",
            "return": {
                "description": "Y轴刻度尺上的文字显示的颜色",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23075,
            "description": "获取图表上Y轴刻度尺上的文字显示的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYScaleTextFont",
            "return": {
                "description": "Y轴刻度尺上的文字显示的字体",
                "type": "String"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23082,
            "description": "获取图表上Y轴刻度值之间的间距",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.getYScaleValueGap",
            "return": {
                "description": "Y轴刻度值之间的间距",
                "type": "Number"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23089,
            "description": "判断图表上Y轴上最小刻度值是否可见",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.isYScaleMinTextVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23096,
            "description": "判断图表上Y轴上的刻度值是否可见",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.isYScaleTextVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23103,
            "description": "设置图表上限制显示的最小值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setLowerLimit",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23110,
            "description": "设置图表上限制显示的最大值",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setUpperLimit",
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23117,
            "description": "设置图表上X轴线的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXAxisLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "X轴线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23124,
            "description": "设置图表上X轴线的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXAxisLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "X轴线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23131,
            "description": "设置图表上X轴的显示文字",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXAxisText",
            "params": [
                {
                    "name": "v",
                    "description": "X轴的显示文字",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23138,
            "description": "设置图表上X轴的显示文字的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXAxisTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "X轴显示文字的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23145,
            "description": "设置图表上X轴的显示文字的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXAxisTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "X轴的显示文字的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23152,
            "description": "设置图表上X轴刻度尺上的文字显示的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXScaleTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "X轴刻度尺上文字显示颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23159,
            "description": "设置图表上X轴刻度尺上的文字显示的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXScaleTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "X轴刻度尺上的文字的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23166,
            "description": "设置图表上X轴刻度尺上的文字显示的方向，可选值为\n'horizontal'：水平\n'vertical'：垂直",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXScaleTextOrientation",
            "params": [
                {
                    "name": "v",
                    "description": "X轴刻度尺上的文字显示的方向",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23175,
            "description": "设置X轴上刻度尺的文字显示的内容",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setXScaleTexts",
            "params": [
                {
                    "name": "v",
                    "description": "刻度尺的文字显示的内容集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23183,
            "description": "设置图表上Y轴线的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYAxisLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23190,
            "description": "设置图表上Y轴线的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYAxisLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23197,
            "description": "设置图表上Y轴的显示文字",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYAxisText",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴的显示文字",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23204,
            "description": "设置图表上Y轴的文字显示的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYAxisTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴的文字显示的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23211,
            "description": "设置图表上Y轴的文字显示的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYAxisTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴的文字显示的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23218,
            "description": "设置图表上Y轴刻度线的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴刻度线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23225,
            "description": "设置图表上Y轴刻度线的宽度",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴刻度线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23232,
            "description": "设置图表上Y轴上最小刻度值是否可见",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleMinTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23239,
            "description": "设置图表上Y轴刻度之间的间隙像素值，当没有设置Y轴刻度值之间的间距时，这个参数生效",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScalePixelGap",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴刻度之间的间隙像素值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23246,
            "description": "设置图表上Y轴刻度尺上的文字显示的颜色",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleTextColor",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴刻度尺上的文字显示的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23253,
            "description": "设置图表上Y轴刻度尺上的文字显示的字体",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleTextFont",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴刻度尺上的文字显示的字体",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23260,
            "description": "设置图表上Y轴上的刻度值是否可见",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleTextVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23267,
            "description": "设置图表上Y轴刻度值之间的间距",
            "itemtype": "method",
            "name": "twaver.charts.ScaleChart.setYScaleValueGap",
            "params": [
                {
                    "name": "v",
                    "description": "Y轴刻度值之间的间距",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.ScaleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23288,
            "description": "调整行的大小",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.adjustRowSize",
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23294,
            "description": "获取当前排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getCurrentSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23301,
            "description": "获取鼠标点击的数据",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getDataAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "鼠标事件下的数据",
                "type": "twaver.Data"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23309,
            "description": "获取绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getDataBox",
            "return": {
                "description": "绑定的数据容器",
                "type": "twaver.DataBox"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23316,
            "description": "获得所有数据的div",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getDataDiv",
            "return": {
                "description": "数据div对象",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23323,
            "description": "获取可见区域结束的行号",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getEndRowIndex",
            "return": {
                "description": "结束的行号",
                "type": "Number"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23330,
            "description": "获取所有的行数据",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getRowDatas",
            "return": {
                "description": "所有行的数据",
                "type": "twaver.List"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23337,
            "description": "获取鼠标下数据的行号",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getRowIndexAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "数据的行号",
                "type": "Number"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23345,
            "description": "获取指定数据的行号",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getRowIndexByData",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "行号",
                "type": "Number"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23353,
            "description": "通过指定数据的ID编号获取数据所在行的行号",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getRowIndexById",
            "params": [
                {
                    "name": "id",
                    "description": "指定数据的ID编号",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "行的Index值",
                "type": "Number"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23361,
            "description": "获取列表上行的数量",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getRowSize",
            "return": {
                "description": "行的数量",
                "type": "Number"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23368,
            "description": "获取可见区域开始的行号，当列表的滚动条滚动时，开始的行号是随之变化的",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.getStartRowIndex",
            "return": {
                "description": "开始的行号",
                "type": "Number"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23375,
            "description": "当视图组件发生更改时，twaver会调用此方法。用户不需要直接调用此方法，但是可以重载此方法来实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.handleChange",
            "params": [
                {
                    "name": "e",
                    "description": "视图更改事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23382,
            "description": "当DataBox中的数据发生变化时调用此方法，用于更新视图的显示内容。用户不需要调用此方法，但可以重写此方式实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.handleDataBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23389,
            "description": "当DataBox中的数据的层次发生变化时调用此方法，用于更新视图的显示内容。用户不需要调用此方法，但可以重写此方式实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.handleHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据的层次发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23396,
            "description": "当DataBox中的数据的属性发生变化时调用此方法，用于更新视图的显示内容。用户不需要调用此方法，但可以重写此方式实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.handlePropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据的属性发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23403,
            "description": "当DataBox中的选择的数据发生变化时调用此方法，用于更新视图的显示内容。用户不需要调用此方法，但可以重写此方式实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "DataBox中的选择的数据发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23410,
            "description": "无效视图中的指定的数据，在等待数毫秒后刷新视图，当视图数据容器中指定的数据发生变化时，须调用此方法，让组件重画",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.invalidateData",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23417,
            "description": "无效视图的组件，在等待数毫秒后刷新视图组件，当视图发生变化时，须调用此方法，让组件重画",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.invalidateDisplay",
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23423,
            "description": "无效视图的模型，当视图模型中的数据发生变化时，调用此方法，在等待数毫秒数后刷新视图组件",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.invalidateModel",
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23429,
            "description": "获取列表列内容是否为纯文本",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.isInnerText",
            "return": {
                "description": "返回列表列内容是否为纯文本",
                "type": "Boolean"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23436,
            "description": "判断指定的数据在视图上是否可见",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.isVisible",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23444,
            "description": "让指定的数据处于可见区域",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.makeVisible",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23451,
            "description": "当调用renderData时，会调用此方法。用户不需要直接调用此方法，但是可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.onDataRendered",
            "params": [
                {
                    "name": "div",
                    "description": "包含数据的div",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "row",
                    "description": "数据所在的行",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "是否为选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23461,
            "description": "当数据容器中选择的数据发生变化时，会调用此方法。用户不需要直接调用此方法，但可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.onSelectionChanged",
            "params": [
                {
                    "name": "e",
                    "description": "DataBox中选择的数据发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23468,
            "description": "当共享选择模型发生更改时调用此方法",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.onShareSelectionModelChanged",
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23474,
            "description": "当调用validate后，twaver会调用此方法，用户不需自己调用此方法，但可以重载此方法，实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.onValidated",
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23480,
            "description": "让滚动条滚动到指定的数据，让指定的数据可见",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.scrollToData",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23487,
            "description": "设置绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.setDataBox",
            "params": [
                {
                    "name": "dataBox",
                    "description": "绑定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23494,
            "description": "设置列表列内容是否为纯文本",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.setInnerText",
            "params": [
                {
                    "name": "v",
                    "description": "列表列内容是否为纯文本",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23501,
            "description": "重画组件，调用validate方法后，此方法会被调用",
            "itemtype": "method",
            "name": "twaver.controls.ListBase.validateModel",
            "class": "twaver.controls.ListBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23522,
            "description": "调整属性表的宽度",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.adjustWidth",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23528,
            "description": "取消当前编辑器的编辑状态",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.cancelEditing",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23534,
            "description": "合并属性表上的指定的类别",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.collapse",
            "params": [
                {
                    "name": "categoryName",
                    "description": "类别的名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23541,
            "description": "合并属性表上所有的类别",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.collapseAll",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23547,
            "description": "提交单元格中编辑的值，将这个值回写到Data的属性中",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.commitEditValue",
            "params": [
                {
                    "name": "editInfo",
                    "description": "指定的单元格编辑器的信息，它是一个包含column和data的对象",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "编辑器所对应的对象，它是一个包含type的对象，用于判断编辑器的类型",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23555,
            "description": "展开属性表上的指定的类别",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.expand",
            "params": [
                {
                    "name": "categoryName",
                    "description": "类别的名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23562,
            "description": "展开属性表上所有的类别",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.expandAll",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23568,
            "description": "获取属性表所有边框的颜色，默认为 twaver.Defaults.PROPERTYSHEET_BORDER_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getBorderColor",
            "return": {
                "description": "边框的颜色",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23575,
            "description": "获取指定属性的类别名称",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getCategoryName",
            "params": [
                {
                    "name": "property",
                    "description": "指定的属性对象",
                    "type": "twaver.Property"
                }
            ],
            "return": {
                "description": "属性所对应的类别名称",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23583,
            "description": "获取类别合并时的图标，默认为twaver.Defaults.PROPERTYSHEET_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getCollapseIcon",
            "return": {
                "description": "合并的图标",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23590,
            "description": "获取属性表上列的线宽，默认为 twaver.Defaults.PROPERTYSHEET_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getColumnLineWidth",
            "return": {
                "description": "列的线宽",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23597,
            "description": "获取属性表上当前显示的数据，默认为数据容器中最后一个选中的数据",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getCurrentData",
            "return": {
                "description": "当前显示的数据",
                "type": "twaver.Data"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23604,
            "description": "获取绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getDataBox",
            "return": {
                "description": "指定的数据容器",
                "type": "twaver.DataBox"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23611,
            "description": "获取属性表上数据所在的DIV",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getDataDiv",
            "return": {
                "description": "包含数据的DIV",
                "type": "HTMLDivElement"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23618,
            "description": "获取属性表的类别展开的图标，默认为twaver.Defaults.TREE_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getExpandIcon",
            "return": {
                "description": "属性表的类别展开时的图标",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23625,
            "description": "获取属性表上父亲和孩子之间的缩进，默认为twaver.Defaults.PROPERTYSHEET_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getIndent",
            "return": {
                "description": "属性表上父亲和孩子之间的缩进值",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23632,
            "description": "获取属性数据容器",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getPropertyBox",
            "return": {
                "description": "包含属性的容器",
                "type": "twaver.PropertyBox"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23639,
            "description": "获取属性名的水平对齐方式，默认为twaver.Defaults.PROPERTYSHEET_PROPERTY_NAME_HORIZONTAL_ALIGN\n水平对齐方式的可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getPropertyNameHorizontalAlign",
            "return": {
                "description": "属性名的水平对齐方式",
                "type": "String"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23653,
            "description": "获取属性名所在的列所占的宽度，默认为twaver.Defaults.PROPERTYSHEET_PROPERTY_NAME_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getPropertyNameWidth",
            "return": {
                "description": "属性名所在的列所占的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23660,
            "description": "获取当鼠标靠近分隔条时可以改变列宽的像素数。默认为twaver.Defaults.PROPERTYSHEET_RESIZE_TOLERANCE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getResizeTolerance",
            "return": {
                "description": "当鼠标靠近分隔条时可以改变列宽的像素数",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23667,
            "description": "获取属性表的行高。默认为 twaver.Defaults.PROPERTYSHEET_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getRowHeight",
            "return": {
                "description": "属性表的行高",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23674,
            "description": "获取鼠标下的数据在属性表上的行数",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getRowIndexAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "数据的行数",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23682,
            "description": "设置属性表每行线的宽度，默认为twaver.Defaults.PROPERTYSHEET_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getRowLineWidth",
            "return": {
                "description": "行之间线的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23689,
            "description": "获取属性表排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23696,
            "description": "获取属性表的总宽度，默认为twaver.Defaults.PROPERTYSHEET_SUM_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getSumWidth",
            "return": {
                "description": "属性表的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23703,
            "description": "获取属性表上指定的属性所对应的数据值",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getValue",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "property",
                    "description": "指定的属性对象",
                    "type": "twaver.Property"
                }
            ],
            "return": {
                "description": "数据的属性值",
                "type": "Object"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23712,
            "description": "获取属性表上可见过滤器，用于过滤某个属性获取某些网元在属性表上是否可见",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.getVisibleFunction",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "example": [
                " sheet.setVisibleFunction(function (property) {\n     return       box.getSelectionModel().getLastData() instanceof twaver.Link;\n});"
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23725,
            "description": "处理更新",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.handleChange",
            "params": [
                {
                    "name": "e",
                    "description": "更新事件",
                    "type": "Event"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23732,
            "description": "当数据容器中数据的属性发生变化时调用此方法，用于更新属性表的显示内容。用户不需要调用此方法，但可以重写此方式实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.handlePropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据容器的属性更改事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23739,
            "description": "当数据容器中数据的选择状态发生变化时调用此方法，用于刷新属性表显示的内容，用户不需要调用此方法，但可以重写此方式实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "数据选择状态更改的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23746,
            "description": "无效属性容器，当属性容器中的数据或数据的属性发生变化时，调用此方法。在等待指定的毫秒数后刷新属性表界面，让属性表重画",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.invalidatePropertyBox",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23752,
            "description": "判断是否需要自动调整属性表的宽度\n默认为twaver.Defaults.PROPERTYSHEET_AUTO_ADJUSTABLE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.isAutoAdjustable",
            "return": {
                "description": "true为自动调整，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23760,
            "description": "判断是否显示类别分组。默认为twaver.Defaults.PROPERTYSHEET_CATEGORIZABLE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.isCategorizable",
            "return": {
                "description": "true为显示，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23767,
            "description": "获取数据中指定的属性单元格是否可编辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.isCellEditable",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "property",
                    "description": "指定的属性",
                    "type": "twaver.Property"
                }
            ],
            "return": {
                "description": "true为可编辑，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23776,
            "description": "属性表是否可编辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.isEditable",
            "return": {
                "description": "true为可编辑，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23783,
            "description": "判断指定的类别是否是展开状态",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.isExpanded",
            "params": [
                {
                    "name": "categoryName",
                    "description": "指定的类别名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true为展开，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23791,
            "description": "判断指定的属性是否可见",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.isVisible",
            "params": [
                {
                    "name": "property",
                    "description": "指定的属性",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23799,
            "description": "当绘制属性表的类别时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.onCategoryRendered",
            "params": [
                {
                    "name": "div",
                    "description": "类别对应的Div元素",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "categoryName",
                    "description": "类别名",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23807,
            "description": "当调用绘制属性表的属性名称时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.onNameRendered",
            "params": [
                {
                    "name": "params",
                    "description": "行信息的对象，它是一个包含view,data,property,value的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23814,
            "description": "当绘制属性表的属性值时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.onValueRendered",
            "params": [
                {
                    "name": "params",
                    "description": "行信息的对象，它是一个包含view,data,property,value的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23821,
            "description": "绘制属性表的类别。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.renderCategory",
            "params": [
                {
                    "name": "div",
                    "description": "包含指定的类别的DIV",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "categoryName",
                    "description": "指定的类别名称",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23829,
            "description": "绘制属性表的属性名称。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.renderName",
            "params": [
                {
                    "name": "params",
                    "description": "它是一个包含view,data,property,value和nameRender div的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23836,
            "description": "绘制属性表的属性值。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.renderValue",
            "params": [
                {
                    "name": "params",
                    "description": "它是一个包含view,data,property,value和nameRender div的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23843,
            "description": "是否需要自动调整属性表的大小，默认为twaver.Defaults.PROPERTYSHEET_AUTO_ADJUSTABLE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setAutoAdjustable",
            "params": [
                {
                    "name": "v",
                    "description": "是否自动调整",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23850,
            "description": "设置属性表所有边框的颜色，默认为 twaver.Defaults.PROPERTYSHEET_BORDER_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setBorderColor",
            "params": [
                {
                    "name": "v",
                    "description": "边框的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23857,
            "description": "设置是否显示类别分组。默认为twaver.Defaults.PROPERTYSHEET_CATEGORIZABLE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setCategorizable",
            "params": [
                {
                    "name": "v",
                    "description": "true为显示，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23864,
            "description": "设置类别合并时的图标，默认为twaver.Defaults.PROPERTYSHEET_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setCollapseIcon",
            "params": [
                {
                    "name": "v",
                    "description": "合并的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23871,
            "description": "设置属性表上列的线宽，默认为 twaver.Defaults.PROPERTYSHEET_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setColumnLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "列的线宽",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23878,
            "description": "设置绑定的数据容器",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setDataBox",
            "params": [
                {
                    "name": "dataBox",
                    "description": "指定的数据容器",
                    "type": "twaver.DataBox"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23885,
            "description": "设置属性表是否可编辑，默认为twaver.Defaults.PROPERTYSHEET_EDITABLE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setEditable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可编辑，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23892,
            "description": "设置属性表的Category展开的图标，默认为twaver.Defaults.TREE_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setExpandIcon",
            "params": [
                {
                    "name": "v",
                    "description": "属性表的Category展开时的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23899,
            "description": "设置属性表上父亲和孩子之间的缩进，默认为twaver.Defaults.PROPERTYSHEET_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setIndent",
            "params": [
                {
                    "name": "v",
                    "description": "属性表上父亲和孩子之间的缩进值",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23906,
            "description": "设置属性名的水平对齐方式，默认为twaver.Defaults.PROPERTYSHEET_PROPERTY_NAME_HORIZONTAL_ALIGN\n水平对齐方式的可选值为：\nleft：左对齐。\nright：右对齐。\t\ncenter：中间对齐。\t\njustify: 填充对齐，使得一行上每个文字的间隔相同。\t\ninherit：继承于父亲的对齐方式。\n更多的对齐方式可以参考CSS中的text-align样式",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setPropertyNameHorizontalAlign",
            "params": [
                {
                    "name": "v",
                    "description": "属性名的水平对齐方式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23920,
            "description": "设置属性名所在的列所占的宽度，默认为twaver.Defaults.PROPERTYSHEET_PROPERTY_NAME_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setPropertyNameWidth",
            "params": [
                {
                    "name": "v",
                    "description": "属性名所在的列所占的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23927,
            "description": "设置当鼠标靠近分隔条多少像素时即可以改变列宽。默认为twaver.Defaults.PROPERTYSHEET_RESIZE_TOLERANCE",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setResizeTolerance",
            "params": [
                {
                    "name": "v",
                    "description": "当鼠标靠近分隔条多少像素时可以改变列宽的像素数",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23934,
            "description": "设置属性表的行高。默认为 twaver.Defaults.PROPERTYSHEET_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setRowHeight",
            "params": [
                {
                    "name": "v",
                    "description": "属性表的行高",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23941,
            "description": "设置属性表每行线的宽度，默认为twaver.Defaults.PROPERTYSHEET_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setRowLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "行之间线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23948,
            "description": "设置选中属性表上的行的颜色，默认为 twaver.Defaults.SELECT_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setSelectColor",
            "params": [
                {
                    "name": "v",
                    "description": "选中行的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23955,
            "description": "设置属性表排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23962,
            "description": "设置属性表的总宽度，默认为twaver.Defaults.PROPERTYSHEET_SUM_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setSumWidth",
            "params": [
                {
                    "name": "v",
                    "description": "属性表的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23969,
            "description": "将属性页上指定的属性值设置到数据对象上，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setValue",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "property",
                    "description": "指定的属性表上的属性",
                    "type": "twaver.Property"
                },
                {
                    "name": "value",
                    "description": "属性的值",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23978,
            "description": "设置属性表上可见过滤器，用于过滤某个属性获取某些网元在属性表上是否可见",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.setVisibleFunction",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "example": [
                " sheet.setVisibleFunction(function (property) {\n     return       box.getSelectionModel().getLastData() instanceof twaver.Link;\n});"
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23989,
            "description": "更新属性表中当前显示的数据，默认显示的是最后一个选中的网元",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.updateCurrentData",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 23995,
            "description": "更新当前的行号",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.updateCurrentRowIndex",
            "params": [
                {
                    "name": "newIndex",
                    "description": "指定的行号",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24002,
            "description": "当属性表发生变化时，调用此方法，让属性表重画",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.validateDisplay",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24008,
            "description": "当属性表中的数据发生变化时，调用此方法，让属性面板重画",
            "itemtype": "method",
            "name": "twaver.controls.PropertySheet.validateModel",
            "class": "twaver.controls.PropertySheet"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24029,
            "description": "触发跟随者变化的相关样式",
            "itemtype": "property",
            "name": "IS_INTERESTED_FOLLOWER_STYLE",
            "type": "Object",
            "static": 1,
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24037,
            "description": "触发宿主网格变化的相关属性",
            "itemtype": "property",
            "name": "IS_INTERESTED_HOST_GRID_PROPERTY",
            "type": "Object",
            "static": 1,
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24045,
            "description": "获取宿主节点",
            "itemtype": "method",
            "name": "twaver.Follower.getHost",
            "return": {
                "description": "宿主节点",
                "type": "twaver.Node"
            },
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24052,
            "description": "当host上的属性发生变化时，调用此方法，更新这个跟随者",
            "itemtype": "method",
            "name": "twaver.Follower.handleHostPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "包含peoperty，newValue,oldValue属性的事件对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24059,
            "description": "判断当前的跟随者是否跟随着指定的网元，即为宿主节点或宿主节点链",
            "itemtype": "method",
            "name": "twaver.Follower.isHostOn",
            "params": [
                {
                    "name": "node",
                    "description": "宿主节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "如果指定网元是宿主节点则为true，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24067,
            "description": "检查传入的网元是否在当前跟随者链中。比如传入的网元跟着当前跟随者移动，或当前跟随者跟着传入的网元移动",
            "itemtype": "method",
            "name": "twaver.Follower.isLoopedHostOn",
            "params": [
                {
                    "name": "follower",
                    "description": "跟着移动的网元对象",
                    "type": "twaver.Follower"
                }
            ],
            "return": {
                "description": "如果跟着移动则为true，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24075,
            "description": "当host变化时回调此方法，比如setHost",
            "itemtype": "method",
            "name": "twaver.Follower.onHostChanged",
            "params": [
                {
                    "name": "oldHost",
                    "description": "旧host",
                    "type": "twaver.Node"
                },
                {
                    "name": "newHost",
                    "description": "新的host",
                    "type": "twaver.Node"
                }
            ],
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24083,
            "description": "设置宿主节点",
            "itemtype": "method",
            "name": "twaver.Follower.setHost",
            "params": [
                {
                    "name": "host",
                    "description": "宿主节点",
                    "type": "twaver.Node"
                }
            ],
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24090,
            "description": "更新跟随者的属性。TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.Follower.updateFollower",
            "params": [
                {
                    "name": "e",
                    "description": "包含peoperty，newValue,oldValue属性的事件对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24097,
            "description": "更新跟随者属性的具体实现，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.Follower.updateFollowerImpl",
            "params": [
                {
                    "name": "e",
                    "description": "包含peoperty，newValue,oldValue属性的事件对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.Follower"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24117,
            "description": "是否为子网的标识，默认为true",
            "itemtype": "property",
            "name": "ISubNetwork",
            "type": "Boolean",
            "class": "twaver.LinkSubNetwork"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24140,
            "description": "添加网元，并派发createElement类型的事件。CreateElementInteraction、CreateLinkInteraction、CreateShapeLinkInteraction和CreateShapeNodeInteraction会调用此方法",
            "itemtype": "method",
            "name": "twaver.network.Network.addElementByInteraction",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24147,
            "description": "创建和指定Element关联的ElementUI，添加网元到和Network关联的ElementBox时会触发调用此方法，用户不需要调用此方法，但可以重载此方法",
            "itemtype": "method",
            "name": "twaver.network.Network.createElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "用于创建和网元关联的ElementUI",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24154,
            "description": "按layer从上到下的顺序查找第一个满足条件的网元",
            "itemtype": "method",
            "name": "twaver.network.Network.findFirstElement",
            "params": [
                {
                    "name": "matchFunction",
                    "description": "过滤器",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "过滤器的作用域，可选，默认为null",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回第一个满足条件的网元",
                "type": "twaver.Element"
            },
            "example": [
                "  network.getView().addEventListener('mousedown', function(e){\n    var point = network.getLogicalPoint(e);\n    var node = network.findFirstElement(function(element){\n        return !!network.getElementUI(element).hitTest(point.x, point.y);\n    });\n    console.log(node && node.getName());\n});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24170,
            "description": "遍历所有网元视图，可以指定要遍历的层，如果不指定，则遍历所有层",
            "itemtype": "method",
            "name": "twaver.network.Network.forEachElementUI",
            "params": [
                {
                    "name": "callbackFunction",
                    "description": "回调函数",
                    "type": "Function"
                },
                {
                    "name": "layer",
                    "description": "要遍历的层，可选，默认为null，表示遍历所有层",
                    "type": "twaver.Layer",
                    "optional": true
                },
                {
                    "name": "scope",
                    "description": "回调函数的作用域，可选，默认为null",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                " network.forEachElementUI(function(ui){\n    console.log(ui.getElement().getName());\n});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24182,
            "description": "获取指定网元的告警冒泡文字内容，默认返回网元的最高新发告警数和别名，如果还有低级别的新发告警则前面带一个+号（比如+3C代表有3个严重告警，并且还有其他低级别新发告警），如果没有新发告警，则返回null",
            "itemtype": "method",
            "name": "twaver.network.Network.getAlarmLabel",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的告警冒泡文字内容",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24190,
            "description": "获取附件div\nNetwork的层次关系为：\nview\n->rootDiv\n->->bottomDiv\n->->layersDiv\n->->->layer n\n->->->layer ...\n->->->default layer\n->->attachmentDiv\n->->topDiv",
            "itemtype": "method",
            "name": "twaver.network.Network.getAttachmentDiv",
            "return": {
                "description": "返回HTML div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24207,
            "description": "获取底层div\nNetwork的层次关系为：\nview\n->rootDiv\n->->bottomDiv\n->->layersDiv\n->->->layer n\n->->->layer ...\n->->->default layer\n->->attachmentDiv\n->->topDiv",
            "itemtype": "method",
            "name": "twaver.network.Network.getBottomDiv",
            "return": {
                "description": "返回HTML div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24224,
            "description": "获取当前子网，如果是最顶层子网则返回null",
            "itemtype": "method",
            "name": "twaver.network.Network.getCurrentSubNetwork",
            "return": {
                "description": "返回当前子网，如果是最顶层子网则返回null",
                "type": "twaver.SubNetwork"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24231,
            "description": "获取网元可编辑过滤器，默认值为null，用于判断在编辑模式时是否可以更改节点大小（选中网元时周围有8个可拖拽的控制点），或者移动多边形、折线的点",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditableFunction",
            "return": {
                "description": "返回网元可编辑过滤器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24238,
            "description": "获取创建连线时连线的颜色，默认值为twaver.Defaults.NETWORK_EDIT_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditLineColor",
            "return": {
                "description": "返回创建连线时连线的颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24245,
            "description": "获取创建连线时连线的宽度，默认值为twaver.Defaults.NETWORK_EDIT_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditLineWidth",
            "return": {
                "description": "返回创建连线时连线的宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24252,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的填充色，默认值为twaver.Defaults.NETWORK_EDIT_POINT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditPointFillColor",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的填充色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24259,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的边框颜色，默认值为twaver.Defaults.NETWORK_EDIT_POINT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditPointOutlineColor",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24266,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的边框宽度，默认值为twaver.Defaults.NETWORK_EDIT_POINT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditPointOutlineWidth",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24273,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的大小，默认值为twaver.Defaults.NETWORK_EDIT_POINT_SIZE",
            "itemtype": "method",
            "name": "twaver.network.Network.getEditPointSize",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的大小",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24280,
            "description": "获取指定坐标点或者当前鼠标下的网元",
            "itemtype": "method",
            "name": "twaver.network.Network.getElementAt",
            "params": [
                {
                    "name": "point",
                    "description": "可以为坐标点或者鼠标事件",
                    "type": "Object"
                },
                {
                    "name": "selectable",
                    "description": "如果为true，则只返回可以被选择的网元，否则不可选中的网元也可以返回，可选，默认值为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回坐标点或者当前鼠标下的网元",
                "type": "twaver.Element"
            },
            "example": [
                " network.getView().addEventListener('mousedown', function (e) {\n    var point = network.getLogicalPoint(e);\n    console.log(network.getElementAt(e));\n    console.log(network.getElementAt(point));\n});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24294,
            "description": "获取和Network绑定的ElementBox网元容器",
            "itemtype": "method",
            "name": "twaver.network.Network.getElementBox",
            "return": {
                "description": "返回和Network绑定的ElementBox网元容器",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24301,
            "description": "获取矩形区域包含或相交网元",
            "itemtype": "method",
            "name": "twaver.network.Network.getElementsAtRect",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域",
                    "type": "Object"
                },
                {
                    "name": "intersectMode",
                    "description": "如果为true则只要和矩形区域相交的网元都返回，否则只返回矩形区域包含的网元，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "过滤器, 可选, 默认值为null",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "selectable",
                    "description": "网元是否可选择，默认为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回矩形区域包含或相交网元",
                "type": "twaver.List"
            },
            "example": [
                " var elements = network.getElementsAtRect({x:0, y:0, width:100, height:100});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24313,
            "description": "获取和网元关联的视图对象",
            "itemtype": "method",
            "name": "twaver.network.Network.getElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回和网元关联的视图对象",
                "type": "twaver.network.ElementUI"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24321,
            "description": "获取网元视图生成器，用于创建和网元关联的网元视图，默认用element#getElementUIClass返回的类型创建和网元关联的网元视图\ntwaver.Defaults.ELEMENTUI_FUNCTION = function(network, element){\n    var clazz = element.getElementUIClass();\n    if (clazz) {\n         return new clazz(network, element);\n    }\n    return null;\n }",
            "itemtype": "method",
            "name": "twaver.network.Network.getElementUIFunction",
            "return": {
                "description": "返回网元视图生成器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24335,
            "description": "返回包含分组孩子视图区域的集合",
            "itemtype": "method",
            "name": "twaver.network.Network.getGroupChildrenRects",
            "params": [
                {
                    "name": "group",
                    "description": "分组对象",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "返回包含孩子视图区域的集合",
                "type": "twaver.List"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24343,
            "description": "获取指定网元的图标颜色数组，默认返回element#getStyle('icons.colors')",
            "itemtype": "method",
            "name": "twaver.network.Network.getIconsColors",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的图标颜色数组",
                "type": "Array"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24351,
            "description": "获取指定网元的图标名称数组，默认返回element#getStyle('icons.names')",
            "itemtype": "method",
            "name": "twaver.network.Network.getIconsNames",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的图标名称数组",
                "type": "Array"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24359,
            "description": "获取交互处理器集合，交互处理器用于设置Network相应哪些键盘和鼠标事件。",
            "itemtype": "method",
            "name": "twaver.network.Network.getInteractions",
            "return": {
                "description": "返回交互处理器集合",
                "type": "Array"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24366,
            "description": "获取指定网元所在的层，默认为'default'层",
            "itemtype": "method",
            "name": "twaver.network.Network.getLayerByElement",
            "params": [
                {
                    "name": "element",
                    "description": "用于返回层的网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元所在的层",
                "type": "twaver.Layer"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24374,
            "description": "获取指定网元所在的层的div元素",
            "itemtype": "method",
            "name": "twaver.network.Network.getLayerDivByElement",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元所在的层的div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24382,
            "description": "获取层div元素\nNetwork的层次关系为：\nview\n->rootDiv\n->->bottomDiv\n->->layersDiv\n->->->layer n\n->->->layer ...\n->->->default layer\n->->attachmentDiv\n->->topDiv",
            "itemtype": "method",
            "name": "twaver.network.Network.getLayersDiv",
            "return": {
                "description": "返回层div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24399,
            "description": "获取延迟移动网元时网元的填充色，默认值为twaver.Defaults.NETWORK_LAZYMOVE_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getLazyMoveFillColor",
            "return": {
                "description": "返回延迟移动网元时网元的填充色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24406,
            "description": "获取延迟移动网元时网元的边框颜色，默认值为twaver.Defaults.NETWORK_LAZYMOVE_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getLazyMoveOutlineColor",
            "return": {
                "description": "返回延迟移动网元时网元的边框颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24413,
            "description": "获取延迟移动网元时网元的边框宽度，默认值为twaver.Defaults.NETWORK_LAZYMOVE_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Network.getLazyMoveOutlineWidth",
            "return": {
                "description": "返回延迟移动网元时网元的边框宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24420,
            "description": "获取节点是否可以连线的过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.getLinkableFunction",
            "return": {
                "description": "返回节点是否可以连线的过滤器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24427,
            "description": "获得LINK的流动间隔时间",
            "itemtype": "method",
            "name": "twaver.network.Network.getLinkFlowInterval",
            "return": {
                "description": "返回Link的流动间隔时间",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24434,
            "description": "获得Link流动时的偏移量",
            "itemtype": "method",
            "name": "twaver.network.Network.getLinkFlowOffset",
            "params": [
                {
                    "name": "link",
                    "description": "Link实例",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回Link流动时的偏移量",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24442,
            "description": "获得Link流动时的步进量",
            "itemtype": "method",
            "name": "twaver.network.Network.getLinkFlowStepping",
            "params": [
                {
                    "name": "link",
                    "description": "Link实例",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回Link流动时的步进量",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24450,
            "description": "获取指定连线捆绑后的标签，默认如果指定的连线是捆绑代理，则返回\"+(\" + link.getBundleCount() + \")\"，否则返回null",
            "itemtype": "method",
            "name": "twaver.network.Network.getLinkHandlerLabel",
            "params": [
                {
                    "name": "link",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "返回指定连线捆绑后的标签",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24458,
            "description": "获取连线路径生成函数",
            "itemtype": "method",
            "name": "twaver.network.Network.getLinkPathFunction",
            "return": {
                "description": "返回连线路径生成函数",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24465,
            "description": "获取网元可移动过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.getMovableFunction",
            "return": {
                "description": "返回网元可移动过滤器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24472,
            "description": "获取可移动的被选中的网元集合",
            "itemtype": "method",
            "name": "twaver.network.Network.getMovableSelectedElements",
            "return": {
                "description": "返回可移动的被选中的网元集合",
                "type": "twaver.List"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24479,
            "description": "获取可移动的网元的区域",
            "itemtype": "method",
            "name": "twaver.network.Network.getMovableSelectedElementsRect",
            "return": {
                "description": "返回可移动的网元的区域",
                "type": "Object"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24486,
            "description": "获取相对于网元指定位置的坐标，此方法常用于定位和网元相关的附件的位置",
            "itemtype": "method",
            "name": "twaver.network.Network.getPosition",
            "params": [
                {
                    "name": "position",
                    "description": "相对位置",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "获取位置时的相对网元或网元视图，类型为twaver.Element或者twaver.network.ElementUI",
                    "type": "Object"
                },
                {
                    "name": "tarSize",
                    "description": "目标的大小，类型为包含width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "String"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回包含x坐标和y坐标的Object对象",
                "type": "Object"
            },
            "example": [
                " var node = new twaver.Node({name:'Node', location: {x:100, y:100}});\nbox.add(node);\nvar position = network.getPosition('top.top', node, {width:10, height:10}, 0, 0);\nconsole.log(position.x, position.y);\n// output: 110 90\n\nposition可以为：\nhotspot\nfrom\nto\ntopleft.topleft\ntopleft.topright\ntop.top\ntopright.topleft\ntopright.topright\ntopleft\ntop\ntopright\ntopleft.bottomleft\ntopleft.bottomright\ntop.bottom\ntopright.bottomleft\ntopright.bottomright\nleft.left\nleft\nleft.right\ncenter\nright.left\nright\nright.right\nbottomleft.topleft\nbottomleft.topright\nbottom.top\nbottomright.topleft\nbottomright.topright\nbottomleft\nbottom\nbottomright\nbottomleft.bottomleft\nbottomleft.bottomright\nbottom.bottom\nbottomright.bottomleft\nbottomright.bottomright"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24541,
            "description": "获取框选网元过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.getRectSelectFilter",
            "return": {
                "description": "返回框选网元过滤器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24548,
            "description": "获取延迟改变网元大小时网元边框的颜色，默认值为twaver.Defaults.NETWORK_RESIZE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getResizeLineColor",
            "return": {
                "description": "返回延迟改变网元大小时网元边框的颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24555,
            "description": "获取延迟改变网元大小时网元边框的宽度，默认值为twaver.Defaults.NETWORK_RESIZE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Network.getResizeLineWidth",
            "return": {
                "description": "返回延迟改变网元大小时网元边框的宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24562,
            "description": "获取改变网元大小时控制点的填充色，默认为twaver.Defaults.NETWORK_RESIZE_POINT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getResizePointFillColor",
            "return": {
                "description": "返回改变网元大小时控制点的填充色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24569,
            "description": "获取改变网元大小时控制点的边框颜色，默认值为twaver.Defaults.NETWORK_RESIZE_POINT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getResizePointOutlineColor",
            "return": {
                "description": "返回改变网元大小时控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24576,
            "description": "获取改变网元大小时控制点的边框宽度，默认值为twaver.Defaults.NETWORK_RESIZE_POINT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Network.getResizePointOutlineWidth",
            "return": {
                "description": "返回改变网元大小时控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24583,
            "description": "获取更改网元大小的控制点的大小",
            "itemtype": "method",
            "name": "twaver.network.Network.getResizePointSize",
            "return": {
                "description": "返回更改网元大小的控制点的大小",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24590,
            "description": "获取网元是否可旋转过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotatableFunction",
            "return": {
                "description": "网元是否可旋转过滤器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24597,
            "description": "获取旋转控制点的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotatePointFillColor",
            "return": {
                "description": "返回旋转控制点的填充色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24604,
            "description": "获取旋转控制点的偏移量",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotatePointOffset",
            "return": {
                "description": "返回旋转控制点的偏移量",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24611,
            "description": "获取旋转控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotatePointOutlineColor",
            "return": {
                "description": "返回旋转控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24618,
            "description": "获取旋转控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotatePointOutlineWidth",
            "return": {
                "description": "返回旋转控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24625,
            "description": "返回旋转控制点的大小",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotatePointSize",
            "return": {
                "description": "旋转控制点的大小",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24632,
            "description": "获取旋转刻度填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotateScaleFillColor",
            "return": {
                "description": "返回旋转刻度填充色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24639,
            "description": "获取旋转刻度文字字体颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotateScaleFontColor",
            "return": {
                "description": "旋转刻度文字字体颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24646,
            "description": "获取旋转刻度高度",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotateScaleHeight",
            "return": {
                "description": "旋转刻度高度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24653,
            "description": "获取旋转刻度宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.getRotateScaleWidth",
            "return": {
                "description": "返回旋转刻度宽度",
                "type": "Number"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24660,
            "description": "获取框选时矩形框的填充色，默认值为twaver.Defaults.NETWORK_SELECT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getSelectFillColor",
            "return": {
                "description": "返回框选时矩形框的填充色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24667,
            "description": "获得选择时容差像素数",
            "itemtype": "method",
            "name": "twaver.network.Network.getSelectionTolerance",
            "return": {
                "description": "返回选择容差像素数",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24674,
            "description": "获取选择模式（当框选网元时，哪些网元会被选中），默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "itemtype": "method",
            "name": "twaver.network.Network.getSelectMode",
            "return": {
                "description": "返回选择模式",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24685,
            "description": "获取框选时矩形框的边框颜色，默认值为twaver.Defaults.NETWORK_SELECT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.network.Network.getSelectOutlineColor",
            "return": {
                "description": "返回框选时矩形框的边框颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24692,
            "description": "获取框选时矩形框的边框宽度，默认值为twaver.Defaults.NETWORK_SELECT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.network.Network.getSelectOutlineWidth",
            "return": {
                "description": "返回框选时矩形框的边框宽度",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24699,
            "description": "获得指定网元选中时的阴影颜色，如果网元的style属性shadow.color不为空，则返回style属性shadow.color的值，否则返回style属性select.color的值",
            "itemtype": "method",
            "name": "twaver.network.Network.getShadowColor",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元选中时的阴影颜色",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24707,
            "description": "获取顶层div元素\nNetwork的层次关系为：\nview\n->rootDiv\n->->bottomDiv\n->->layersDiv\n->->->layer n\n->->->layer ...\n->->->default layer\n->->attachmentDiv\n->->topDiv",
            "itemtype": "method",
            "name": "twaver.network.Network.getTopDiv",
            "return": {
                "description": "返回顶层div元素",
                "type": "HTMLDivElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24724,
            "description": "获取Network可见网元所占的区域",
            "itemtype": "method",
            "name": "twaver.network.Network.getViewRect",
            "return": {
                "description": "返回包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24731,
            "description": "获取网元可见过滤器，Network通过可见过滤器判断每个网元是否可见",
            "itemtype": "method",
            "name": "twaver.network.Network.getVisibleFunction",
            "return": {
                "description": "返回网元可见过滤器",
                "type": "Function"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24738,
            "description": "ElementBox里网元添加、删除以及清空时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleElementBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox里网元变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24745,
            "description": "ElementBox里网元的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleElementBoxPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox里网元属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24752,
            "description": "ElementBox的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleElementPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24759,
            "description": "ElementBox里网元的顺序发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleIndexChange",
            "params": [
                {
                    "name": "e",
                    "description": "网元顺序变化事件，包含element、oldIndex和newIndex属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24766,
            "description": "ElementBox的LayerBox里Layer添加、删除以及清空时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleLayerBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24773,
            "description": "ElementBox的LayerBox里Layer层次变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleLayerHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer层次变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24780,
            "description": "ElementBox的LayerBox里Layer属性变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleLayerPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer属性变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24787,
            "description": "SelectionModel选择变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24794,
            "description": "获取是否包含编辑交互处理器",
            "itemtype": "method",
            "name": "twaver.network.Network.hasEditInteraction",
            "return": {
                "description": "如果包含编辑交互处理器，则返回ture，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24801,
            "description": "判断是否包含选中的并且可移动的网元",
            "itemtype": "method",
            "name": "twaver.network.Network.hasMovableSelectedElements",
            "return": {
                "description": "如果包含选中的并且可移动的网元，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24808,
            "description": "获取鼠标下或指定坐标下的网元视图对象或附件对象",
            "itemtype": "method",
            "name": "twaver.network.Network.hitTest",
            "params": [
                {
                    "name": "point",
                    "description": "鼠标事件或坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回鼠标下或指定坐标下的网元视图对象或附件对象",
                "type": "Object"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24816,
            "description": "使指定连线的捆绑连线无效",
            "itemtype": "method",
            "name": "twaver.network.Network.invalidateBundleLink",
            "params": [
                {
                    "name": "element",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24823,
            "description": "使网元顺序无效",
            "itemtype": "method",
            "name": "twaver.network.Network.invalidateElementIndex",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24829,
            "description": "使指定网元的视图无效",
            "itemtype": "method",
            "name": "twaver.network.Network.invalidateElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                },
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则使网元无效的同时使附件无效，否则不使附件无效，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24837,
            "description": "使所有网元的视图无效",
            "itemtype": "method",
            "name": "twaver.network.Network.invalidateElementUIs",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则使网元无效的同时使附件无效，否则不使附件无效，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24844,
            "description": "无效所有网元的可见性，当设置了visibleFunction，并且外部条件变动后，可以用此方法强制刷新所有网元是否可见",
            "itemtype": "method",
            "name": "twaver.network.Network.invalidateElementVisibility",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24850,
            "description": "无效所有选中网元的视图",
            "itemtype": "method",
            "name": "twaver.network.Network.invalidateSelectedElementUIs",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则无效网元的同时无效附件，否则不无效附件，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24857,
            "description": "获取是否能双击进入空的子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_EMPTYSUBNETWORK",
            "itemtype": "method",
            "name": "twaver.network.Network.isDoubleClickToEmptySubNetwork",
            "return": {
                "description": "返回是否能双击进入空的子网",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24864,
            "description": "获取是否双击展开组，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_GROUPEXPAND",
            "itemtype": "method",
            "name": "twaver.network.Network.isDoubleClickToGroupExpand",
            "return": {
                "description": "返回是否双击展开组",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24871,
            "description": "获取是否双击捆绑连线，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_LINKBUNDLE",
            "itemtype": "method",
            "name": "twaver.network.Network.isDoubleClickToLinkBundle",
            "return": {
                "description": "返回是否双击捆绑连线",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24878,
            "description": "获取是否双击子网时进入子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_SUBNETWORK",
            "itemtype": "method",
            "name": "twaver.network.Network.isDoubleClickToSubNetwork",
            "return": {
                "description": "返回是否双击子网时进入子网",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24885,
            "description": "获取是否双击背景返回上一层子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_UPSUBNETWORK",
            "itemtype": "method",
            "name": "twaver.network.Network.isDoubleClickToUpSubNetwork",
            "return": {
                "description": "返回是否双击背景返回上一层子网",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24892,
            "description": "判断指定网元是否可编辑，如果editableFunction返回false，则不可编辑；如果网元所在的层不可编辑，则不可编辑；否则可编辑",
            "itemtype": "method",
            "name": "twaver.network.Network.isEditable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可编辑，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24900,
            "description": "获取是否正在编辑网元",
            "itemtype": "method",
            "name": "twaver.network.Network.isEditingElement",
            "return": {
                "description": "返回是否正在编辑网元",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24907,
            "description": "获取是否允许用键盘Delete键删除选中网元，默认值为twaver.Defaults.NETWORK_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.network.Network.isKeyboardRemoveEnabled",
            "return": {
                "description": "返回是否允许用键盘Delete键删除选中网元",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24914,
            "description": "获取是否允许用键盘Ctrl+A键选择所有网元，默认值为twaver.Defaults.NETWORK_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.network.Network.isKeyboardSelectEnabled",
            "return": {
                "description": "返回是否允许用键盘Ctrl+A键选择所有网元",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24921,
            "description": "获取延迟移动网元时是否有动画效果，默认值为twaver.Defaults.NETWORK_LAZYMOVE_ANIMATE",
            "itemtype": "method",
            "name": "twaver.network.Network.isLazyMoveAnimate",
            "return": {
                "description": "返回延迟移动网元时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24928,
            "description": "获取延迟移动网元时轮廓是否填充，默认值为twaver.Defaults.NETWORK_LAZYMOVE_FILL",
            "itemtype": "method",
            "name": "twaver.network.Network.isLazyMoveFill",
            "return": {
                "description": "返回延迟移动网元时轮廓是否填充",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24935,
            "description": "获取是否限制网元坐标不能为负",
            "itemtype": "method",
            "name": "twaver.network.Network.isLimitElementInPositiveLocation",
            "return": {
                "description": "返回是否限制网元坐标不能为负",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24942,
            "description": "获取指定节点是否可以创建连线",
            "itemtype": "method",
            "name": "twaver.network.Network.isLinkable",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "返回指定节点是否可以创建连线",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24950,
            "description": "返回是否启用流动Link，默认是false",
            "itemtype": "method",
            "name": "twaver.network.Network.isLinkFlowEnabled",
            "return": {
                "description": "是否启用流动Link",
                "type": "String"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24957,
            "description": "获取网元被选择时是否让其可见，默认值为twaver.Defaults.NETWORK_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.network.Network.isMakeVisibleOnSelected",
            "return": {
                "description": "返回网元被选择时是否让其可见",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24964,
            "description": "判断指定网元是否可移动，如果网元是Link，则不可移动；如果movableFunction返回false，则也不可移动；如果网元所在的层不可移动，则也不可移动；否则可以移动",
            "itemtype": "method",
            "name": "twaver.network.Network.isMovable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可移动，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24972,
            "description": "获取是否正在移动网元",
            "itemtype": "method",
            "name": "twaver.network.Network.isMovingElement",
            "return": {
                "description": "返回是否正在移动网元",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24979,
            "description": "获取不是代理的连线是否可见，默认值为twaver.Defaults.NETWORK_NO_AGENT_LINK_VISIBLE",
            "itemtype": "method",
            "name": "twaver.network.Network.isNoAgentLinkVisible",
            "return": {
                "description": "返回不是代理的连线是否可见",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24986,
            "description": "获取是否允许框选网元",
            "itemtype": "method",
            "name": "twaver.network.Network.isRectSelectEnabled",
            "return": {
                "description": "如果允许框选网元, 返回true, 否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 24993,
            "description": "获取不可见的网元视图是否被删除，默认值为twaver.Defaults.NETWORK_REMOVE_ELEMENTUI_ON_INVISIBLE",
            "itemtype": "method",
            "name": "twaver.network.Network.isRemoveElementUIOnInvisible",
            "return": {
                "description": "返回不可见的网元视图是否被删除",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25000,
            "description": "获取改变网元大小时是否有动画效果，默认值为twaver.Defaults.NETWORK_RESIZE_ANIMATE",
            "itemtype": "method",
            "name": "twaver.network.Network.isResizeAnimate",
            "return": {
                "description": "返回改变网元大小时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25007,
            "description": "获取指定网元是否可旋转",
            "itemtype": "method",
            "name": "twaver.network.Network.isRotatable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元是否可旋转",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25015,
            "description": "获取是否正在旋转网元",
            "itemtype": "method",
            "name": "twaver.network.Network.isRotatingElement",
            "return": {
                "description": "返回是否正在旋转网元",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25022,
            "description": "获取是否正在选择网元",
            "itemtype": "method",
            "name": "twaver.network.Network.isSelectingElement",
            "return": {
                "description": "返回是否正在选择网元",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25029,
            "description": "获取网元被选中后是否置顶，默认值为twaver.Defaults.NETWORK_SENDTOTOP_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.network.Network.isSendToTopOnSelected",
            "return": {
                "description": "返回网元被选中后是否置顶",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25036,
            "description": "获取是否显示旋转网元时的刻度",
            "itemtype": "method",
            "name": "twaver.network.Network.isShowRotateScale",
            "return": {
                "description": "返回是否显示旋转网元时的刻度",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25043,
            "description": "获取进入下一层子网或返回上一层子网时是否有动画效果，默认值为twaver.Defaults.NETWORK_SUBNETWORK_ANIMATE",
            "itemtype": "method",
            "name": "twaver.network.Network.isSubNetworkAnimate",
            "return": {
                "description": "返回进入下一层子网或返回上一层子网时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25050,
            "description": "获取是否让提示信息生效，默认值为twaver.Defaults.NETWORK_TOOLTIP_ENABLED",
            "itemtype": "method",
            "name": "twaver.network.Network.isToolTipEnabled",
            "return": {
                "description": "返回是否让提示信息生效",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25057,
            "description": "获取指定的网元是否可见，如果可见过滤器visibleFunction返回false，则不可见；如果网元所在的层不可见，则网元不可见；否则网元可见",
            "itemtype": "method",
            "name": "twaver.network.Network.isVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果指定网元可见，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25065,
            "description": "滚动水平和垂直滚动条，让指定网元可见",
            "itemtype": "method",
            "name": "twaver.network.Network.makeVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25072,
            "description": "将选中的网元移动指定偏移量，移动时可以设置是否有动画效果，而且能指定移动结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.network.Network.moveSelectedElements",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "移动时是否有动画效果，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，移动结束后执行的动作，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25082,
            "description": "shareSelectionModel属性变化时触发的动作，用户不需要调用此方法，但可以重载此方法执行自定义逻辑",
            "itemtype": "method",
            "name": "twaver.network.Network.onShareSelectionModelChanged",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25088,
            "description": "将指定网元置顶，显示在所有网元的最上面，遮盖其他网元，但也受网元所在的层的制约，还有父子关系以及跟随关系的制约；如果sendToTopOnSelected为true，则点击网元时会调用此方法",
            "itemtype": "method",
            "name": "twaver.network.Network.sendToTop",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25095,
            "description": "设置当前交互模式为创建网元模式，在Network上单击时，会创建指定类型的网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setCreateElementInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "网元类型，可选，默认值为twaver.Node",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25102,
            "description": "设置当前交互模式为创建连线模式，在Network上单击任意网元设置连线的开始节点，再次点击任意网元设置连线的结束节点",
            "itemtype": "method",
            "name": "twaver.network.Network.setCreateLinkInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "连线类型，可选，默认值为twaver.Link",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25109,
            "description": "设置当前交互模式为创建折线模式，在Network上单击任意网元设置折线的开始节点，多次点击不同的背景位置设置折线的points属性，再次点击任意网元设置折线的结束节点",
            "itemtype": "method",
            "name": "twaver.network.Network.setCreateShapeLinkInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "折线类型，可选，默认值为twaver.ShapeLink",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25116,
            "description": "设置当前交互模式为创建多边形模式，在Network上多次点击不同位置设置多边形的points属性，最后双击结束",
            "itemtype": "method",
            "name": "twaver.network.Network.setCreateShapeNodeInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "多边形类型，可选，默认值为twaver.ShapeNode",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25123,
            "description": "将当前子网设置为指定子网，并且可以设置是否有动画效果，而且能指定设置当前子网结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.network.Network.setCurrentSubNetwork",
            "params": [
                {
                    "name": "currentSubNetwork",
                    "description": "子网",
                    "type": "twaver.SubNetwork"
                },
                {
                    "name": "animate",
                    "description": "是否有动画效果",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "设置当前子网结束后的回调函数，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25132,
            "description": "设置交互模式为默认交互模式，包含选择交互处理器SelectInteraction（处理框选或选择网元）、移动交互处理器MoveInteraction（处理移动网元）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.network.Network.setDefaultInteractions",
            "params": [
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选、默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25139,
            "description": "设置是否能双击进入空的子网",
            "itemtype": "method",
            "name": "twaver.network.Network.setDoubleClickToEmptySubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否能双击进入空的子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25146,
            "description": "设置是否双击展开组",
            "itemtype": "method",
            "name": "twaver.network.Network.setDoubleClickToGroupExpand",
            "params": [
                {
                    "name": "v",
                    "description": "是否能双击展开组",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25153,
            "description": "设置是否双击捆绑连线",
            "itemtype": "method",
            "name": "twaver.network.Network.setDoubleClickToLinkBundle",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击捆绑连线",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25160,
            "description": "设置是否双击子网时进入子网",
            "itemtype": "method",
            "name": "twaver.network.Network.setDoubleClickToSubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击子网时进入子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25167,
            "description": "设置是否双击背景返回上一层子网",
            "itemtype": "method",
            "name": "twaver.network.Network.setDoubleClickToUpSubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击背景返回上一层子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25174,
            "description": "设置网元可编辑过滤器，默认值为null，用于判断在编辑模式时是否可以更改节点大小（选中网元时周围有8个可拖拽的控制点），或者移动多边形、折线的点",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元可编辑过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setEditInteractions();\nnetwork.setEditableFunction(function (element) {\n    return element.getName() === 'From';\n});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25185,
            "description": "设置是否正在编辑网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在编辑网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25192,
            "description": "设置交互模式为编辑交互模式，包含选择交互处理器SelectInteraction（处理框选或选择网元）、编辑处理器EditInteraction（处理改变网元大小）、移动交互处理器MoveInteraction（处理移动网元）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditInteractions",
            "params": [
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选、默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25199,
            "description": "设置创建连线时连线的颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "创建连线时连线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25206,
            "description": "设置创建连线时连线的宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "创建连线时连线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25213,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditPointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25220,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditPointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25227,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditPointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25234,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的大小",
            "itemtype": "method",
            "name": "twaver.network.Network.setEditPointSize",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25241,
            "description": "设置和Network绑定的ElementBox网元容器，Network构造时可以设置ElementBox（内部创建一个新的ElementBox），也可以构造完后再设置ElementBox",
            "itemtype": "method",
            "name": "twaver.network.Network.setElementBox",
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器",
                    "type": "twaver.ElementBox"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25248,
            "description": "设置网元视图生成器，用于创建和网元关联的网元视图，默认用element#getElementUIClass返回的类型创建和网元关联的网元视图\ntwaver.Defaults.ELEMENTUI_FUNCTION = function(network, element){\n    var clazz = element.getElementUIClass();\n    if (clazz) {\n         return new clazz(network, element);\n    }\n    return null;\n }",
            "itemtype": "method",
            "name": "twaver.network.Network.setElementUIFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元视图生成器",
                    "type": "Function"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25262,
            "description": "设置是否包含编辑交互处理器",
            "itemtype": "method",
            "name": "twaver.network.Network.setHasEditInteraction",
            "params": [
                {
                    "name": "value",
                    "description": "是否包含编辑交互处理器",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25269,
            "description": "设置交互处理器，交互处理器用于设置Network相应哪些键盘和鼠标事件。",
            "itemtype": "method",
            "name": "twaver.network.Network.setInteractions",
            "params": [
                {
                    "name": "interactions",
                    "description": "包含交互处理器的集合",
                    "type": "twaver.List"
                }
            ],
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.SelectInteraction(network),\n    new twaver.network.interaction.EditInteraction(network),\n    new twaver.network.interaction.MoveInteraction(network),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25282,
            "description": "设置是否允许用键盘Delete键删除选中网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许用键盘Delete键删除选中网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25289,
            "description": "设置是否允许用键盘Ctrl+A键选择所有网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许用键盘Ctrl+A键选择所有网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25296,
            "description": "设置延迟移动网元时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.network.Network.setLazyMoveAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25303,
            "description": "设置延迟移动网元时轮廓是否填充",
            "itemtype": "method",
            "name": "twaver.network.Network.setLazyMoveFill",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时轮廓是否填充",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25310,
            "description": "设置延迟移动网元时网元的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setLazyMoveFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25317,
            "description": "设置延迟移动网元时网元的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setLazyMoveOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25324,
            "description": "设置延迟移动网元时网元的边框宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setLazyMoveOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25331,
            "description": "设置是否限制网元坐标不能为负",
            "itemtype": "method",
            "name": "twaver.network.Network.setLimitElementInPositiveLocation",
            "params": [
                {
                    "name": "v",
                    "description": "是否限制网元坐标不能为负",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25338,
            "description": "设置节点是否可以连线的过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.setLinkableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "节点是否可以连线的过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25345,
            "description": "设置是否启用流动Link，默认是false",
            "itemtype": "method",
            "name": "twaver.network.Network.setLinkFlowEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "是否启用流动Link",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25352,
            "description": "设置LINK的流动间隔时间",
            "itemtype": "method",
            "name": "twaver.network.Network.setLinkFlowInterval",
            "params": [
                {
                    "name": "value",
                    "description": "Link的流动间隔时间(毫秒)",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25359,
            "description": "设置连线路径生成函数function (linkUI, defaultPoints)",
            "itemtype": "method",
            "name": "twaver.network.Network.setLinkPathFunction",
            "params": [
                {
                    "name": "value",
                    "description": "连线路径生成函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25366,
            "description": "设置交互模式为放大镜模式",
            "itemtype": "method",
            "name": "twaver.network.Network.setMagnifyInteractions",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25372,
            "description": "设置网元被选择时是否让其可见",
            "itemtype": "method",
            "name": "twaver.network.Network.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "网元被选择时是否让其可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25379,
            "description": "设置网元可移动过滤器，用于判断网元是否可以移动，如果网元是Link，则不可移动；如果movableFunction返回false，则也不可移动；如果网元所在的层不可移动，则也不可移动；否则可以移动",
            "itemtype": "method",
            "name": "twaver.network.Network.setMovableFunction",
            "params": [
                {
                    "name": "v",
                    "description": "网元可移动过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setMovableFunction(function (element) {\n    return element.getName() === 'From';\n});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25389,
            "description": "设置是否正在移动网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setMovingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在移动网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25396,
            "description": "设置交互模式为微软触摸交互模式",
            "itemtype": "method",
            "name": "twaver.network.Network.setMSTouchInteractions",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25402,
            "description": "设置不是代理的连线是否可见",
            "itemtype": "method",
            "name": "twaver.network.Network.setNoAgentLinkVisible",
            "params": [
                {
                    "name": "v",
                    "description": "不是代理的连线是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25409,
            "description": "设置交互模式为手抓图交互模式，包含手抓图交互处理器PanInteraction（处理垂直或水平滚动滚动条）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.network.Network.setPanInteractions",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25415,
            "description": "设置是否允许框选网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setRectSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许框选网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25422,
            "description": "设置框选网元过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.setRectSelectFilter",
            "params": [
                {
                    "name": "v",
                    "description": "框选网元过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25429,
            "description": "设置不可见的网元视图是否被删除",
            "itemtype": "method",
            "name": "twaver.network.Network.setRemoveElementUIOnInvisible",
            "params": [
                {
                    "name": "value",
                    "description": "不可见的网元视图是否被删除",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25436,
            "description": "设置改变网元大小时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizeAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25443,
            "description": "设置延迟改变网元大小时网元边框的颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizeLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟改变网元大小时网元边框的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25450,
            "description": "设置延迟改变网元大小时网元边框的宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizeLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "延迟改变网元大小时网元边框的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25457,
            "description": "设置改变网元大小时控制点的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizePointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25464,
            "description": "设置改变网元大小时控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizePointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25471,
            "description": "设置改变网元大小时控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizePointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25478,
            "description": "设置更改网元大小的控制点的大小",
            "itemtype": "method",
            "name": "twaver.network.Network.setResizePointSize",
            "params": [
                {
                    "name": "v",
                    "description": "更改网元大小的控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25485,
            "description": "设置网元是否可旋转过滤器",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元是否可旋转过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25492,
            "description": "设置旋转控制点的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatePointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25499,
            "description": "设置旋转控制点的偏移量",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatePointOffset",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的偏移量",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25506,
            "description": "设置旋转控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatePointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25513,
            "description": "设置旋转控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatePointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25520,
            "description": "设置旋转控制点的大小",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatePointSize",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25527,
            "description": "设置旋转刻度填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotateScaleFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25534,
            "description": "设置旋转刻度文字字体颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotateScaleFontColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度文字字体颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25541,
            "description": "设置旋转刻度高度",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotateScaleHeight",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25548,
            "description": "设置旋转刻度宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotateScaleWidth",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25555,
            "description": "设置正在旋转的节点",
            "itemtype": "method",
            "name": "twaver.network.Network.setRotatingElement",
            "params": [
                {
                    "name": "v",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25562,
            "description": "设置框选时矩形框的填充色",
            "itemtype": "method",
            "name": "twaver.network.Network.setSelectFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25569,
            "description": "设置是否正在框选网元",
            "itemtype": "method",
            "name": "twaver.network.Network.setSelectingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在框选网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25576,
            "description": "返回选择容差像素数",
            "itemtype": "method",
            "name": "twaver.network.Network.setSelectionTolerance",
            "params": [
                {
                    "name": "v",
                    "description": "选择容差像素数",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25583,
            "description": "设置选择模式（当框选网元时，哪些网元会被选中），默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "itemtype": "method",
            "name": "twaver.network.Network.setSelectMode",
            "params": [
                {
                    "name": "v",
                    "description": "选择模式",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25594,
            "description": "设置框选时矩形框的边框颜色",
            "itemtype": "method",
            "name": "twaver.network.Network.setSelectOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25601,
            "description": "设置框选时矩形框的边框宽度",
            "itemtype": "method",
            "name": "twaver.network.Network.setSelectOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的边框宽度",
                    "type": "String"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25608,
            "description": "设置网元被选中后是否置顶",
            "itemtype": "method",
            "name": "twaver.network.Network.setSendToTopOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "网元被选中后是否置顶",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25615,
            "description": "设置是否显示旋转网元时的刻度",
            "itemtype": "method",
            "name": "twaver.network.Network.setShowRotateScale",
            "params": [
                {
                    "name": "v",
                    "description": "是否显示旋转网元时的刻度",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25622,
            "description": "设置进入下一层子网或返回上一层子网时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.network.Network.setSubNetworkAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "进入下一层子网或返回上一层子网时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25629,
            "description": "设置是否让提示信息生效",
            "itemtype": "method",
            "name": "twaver.network.Network.setToolTipEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "是否让提示信息生效",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25636,
            "description": "设置当前交互模式为触摸模式，只响应触摸事件，包含触摸交互处理器TouchInteraction（处理触摸事件）",
            "itemtype": "method",
            "name": "twaver.network.Network.setTouchInteractions",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25642,
            "description": "设置网元可见过滤器，用于判断指定的网元是否可见，如果可见过滤器visibleFunction返回false，则不可见；如果网元所在的层不可见，则网元不可见；否则网元可见",
            "itemtype": "method",
            "name": "twaver.network.Network.setVisibleFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元可见过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setVisibleFunction(function (element) {\n    return !(element instanceof twaver.Link);\n});"
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25652,
            "description": "从Network生成指定大小的Canvas元素，用于生成缩略图",
            "itemtype": "method",
            "name": "twaver.network.Network.toCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "要生成的Canvas元素的宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "要生成的Canvas元素的高度",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "目标Canvas元素，可选，默认为null，如果为null，则创建新的Canvas元素，否则使用此Canvas元素",
                    "type": "HTMLCanvasElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Canvas元素",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25662,
            "description": "从Network的指定区域生成指定比例的Canvas元素，用于生成缩略图",
            "itemtype": "method",
            "name": "twaver.network.Network.toCanvasByRegion",
            "params": [
                {
                    "name": "rect",
                    "description": "包含x、y、width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "scale",
                    "description": "缩放比例",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "目标Canvas元素，可选，默认为null，如果为null，则创建新的Canvas元素，否则使用此Canvas元素",
                    "type": "HTMLCanvasElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Canvas元素",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25672,
            "description": "更新Network的层div视图，当和Network关联的ElementBox的LayerBox里Layer变化时，会调用此方法",
            "itemtype": "method",
            "name": "twaver.network.Network.updateLayers",
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25678,
            "description": "返回上一层子网，可以设置是否使用动画效果，还可以指定返回结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.network.Network.upSubNetwork",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "返回上一层子网结束后执行的回调函数，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.network.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25701,
            "description": "在折线上添加一点，更改折线的走向",
            "itemtype": "method",
            "name": "twaver.ShapeLink.addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "包含x，y属性的对象。例如：var point = {x:10,y:10}",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "添加点的次序，如果为空，则添加在最后一个位置。",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25709,
            "description": "派发点的更改事件，当折线上的点发生变化时，会调用此方法。此方法用于TWaver内部调用的",
            "itemtype": "method",
            "name": "twaver.ShapeLink.firePointsChange",
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25715,
            "description": "获取折线上所有点的集合",
            "itemtype": "method",
            "name": "twaver.ShapeLink.getPoints",
            "return": {
                "description": "折线点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25722,
            "description": "移除指定序号上的点，更改折线的走向",
            "itemtype": "method",
            "name": "twaver.ShapeLink.removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "移除点的指定序号",
                    "type": "Number"
                }
            ],
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25729,
            "description": "移除指定点，用于更改折线的走向",
            "itemtype": "method",
            "name": "twaver.ShapeLink.removePoint",
            "params": [
                {
                    "name": "point",
                    "description": "移除的点。例如：var point = {x:10,y:10}",
                    "type": "Object"
                }
            ],
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25736,
            "description": "设置某个序号上的点，用于更改折线的走向",
            "itemtype": "method",
            "name": "twaver.ShapeLink.setPoint",
            "params": [
                {
                    "name": "index",
                    "description": "折线上点的序号",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "包含x，y属性的点对象。例如：var point = {x:10,y:10}",
                    "type": "Object"
                }
            ],
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25744,
            "description": "设置折线上点的集合",
            "itemtype": "method",
            "name": "twaver.ShapeLink.setPoints",
            "params": [
                {
                    "name": "value",
                    "description": "折线上点的集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.ShapeLink"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25767,
            "description": "添加网元，并派发createElement类型的事件。CreateElementInteraction、CreateLinkInteraction、CreateShapeLinkInteraction和CreateShapeNodeInteraction会调用此方法",
            "itemtype": "method",
            "name": "twaver.vector.Network.addElementByInteraction",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25774,
            "description": "添加标记",
            "itemtype": "method",
            "name": "twaver.vector.Network.addMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "带paint方法的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25781,
            "description": "清空标记",
            "itemtype": "method",
            "name": "twaver.vector.Network.clearMarker",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25787,
            "description": "把屏幕坐标点转换为拓扑组件的逻辑坐标点",
            "itemtype": "method",
            "name": "twaver.vector.Network.convertPointFromView",
            "params": [
                {
                    "name": "p",
                    "description": "坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "坐标点",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25795,
            "description": "创建和指定Element关联的ElementUI，添加网元到和Network关联的ElementBox时会触发调用此方法，用户不需要调用此方法，但可以重载此方法",
            "itemtype": "method",
            "name": "twaver.vector.Network.createElementUI",
            "params": [
                {
                    "name": "data",
                    "description": "用于创建和网元关联的ElementUI",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25803,
            "description": "获取指定网元的告警冒泡文字内容，默认返回网元的最高新发告警数和别名，如果还有低级别的新发告警则前面带一个+号（比如+3C代表有3个严重告警，并且还有其他低级别新发告警），如果没有新发告警，则返回null",
            "itemtype": "method",
            "name": "twaver.vector.Network.getAlarmLabel",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的告警冒泡文字内容",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25811,
            "description": "获取背景图片",
            "itemtype": "method",
            "name": "twaver.vector.Network.getBackgroundImage",
            "return": {
                "description": "返回背景图片",
                "type": "HTMLImageElement"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25818,
            "description": "获取拓扑图大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.getCanvasSize",
            "return": {
                "description": "返回拓扑图大小",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25825,
            "description": "获取当前子网，如果是最顶层子网则返回null",
            "itemtype": "method",
            "name": "twaver.vector.Network.getCurrentSubNetwork",
            "return": {
                "description": "返回当前子网，如果是最顶层子网则返回null",
                "type": "twaver.SubNetwork"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25832,
            "description": "获取网元可编辑过滤器，默认值为null，用于判断在编辑模式时是否可以更改节点大小（选中网元时周围有8个可拖拽的控制点），或者移动多边形、折线的点",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditableFunction",
            "return": {
                "description": "返回网元可编辑过滤器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25839,
            "description": "获取创建连线时连线的颜色，默认值为twaver.Defaults.NETWORK_EDIT_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditLineColor",
            "return": {
                "description": "返回创建连线时连线的颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25846,
            "description": "获取创建连线时连线的宽度，默认值为twaver.Defaults.NETWORK_EDIT_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditLineWidth",
            "return": {
                "description": "返回创建连线时连线的宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25853,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的填充色，默认值为twaver.Defaults.NETWORK_EDIT_POINT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditPointFillColor",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的填充色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25860,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的边框颜色，默认值为twaver.Defaults.NETWORK_EDIT_POINT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditPointOutlineColor",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25867,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的边框宽度，默认值为twaver.Defaults.NETWORK_EDIT_POINT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditPointOutlineWidth",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25874,
            "description": "获取编辑ShapeNode或ShapeLink时控制点的大小，默认值为twaver.Defaults.NETWORK_EDIT_POINT_SIZE",
            "itemtype": "method",
            "name": "twaver.vector.Network.getEditPointSize",
            "return": {
                "description": "返回编辑ShapeNode或ShapeLink时控制点的大小",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25881,
            "description": "获取指定坐标点或者当前鼠标下的网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.getElementAt",
            "params": [
                {
                    "name": "point",
                    "description": "可以为坐标点或者鼠标事件",
                    "type": "Object"
                },
                {
                    "name": "selectable",
                    "description": "如果为true，则只返回可以被选择的网元，否则不可选中的网元也可以返回，可选，默认值为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回坐标点或者当前鼠标下的网元",
                "type": "twaver.Element"
            },
            "example": [
                " network.getView().addEventListener('mousedown', function (e) {\n    var point = network.getLogicalPoint(e);\n    console.log(network.getElementAt(e));\n    console.log(network.getElementAt(point));\n});"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25895,
            "description": "获取和Network绑定的ElementBox网元容器",
            "itemtype": "method",
            "name": "twaver.vector.Network.getElementBox",
            "return": {
                "description": "返回和Network绑定的ElementBox网元容器",
                "type": "twaver.ElementBox"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25902,
            "description": "获取矩形区域包含或相交网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.getElementsAtRect",
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域",
                    "type": "Object"
                },
                {
                    "name": "intersectMode",
                    "description": "如果为true则只要和矩形区域相交的网元都返回，否则只返回矩形区域包含的网元，可选，默认值为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "过滤器, 可选, 默认值为null",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "selectable",
                    "description": "网元是否可选择，默认为true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回矩形区域包含或相交网元",
                "type": "twaver.List"
            },
            "example": [
                " var elements = network.getElementsAtRect({x:0, y:0, width:100, height:100});"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25914,
            "description": "获取和网元关联的视图对象",
            "itemtype": "method",
            "name": "twaver.vector.Network.getElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回和网元关联的视图对象",
                "type": "twaver.network.ElementUI"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25922,
            "description": "获取网元视图生成器，用于创建和网元关联的网元视图，默认用element#getElementUIClass返回的类型创建和网元关联的网元视图\ntwaver.Defaults.ELEMENTUI_FUNCTION = function(network, element){\n    var clazz = element.getElementUIClass();\n    if (clazz) {\n         return new clazz(network, element);\n    }\n    return null;\n }",
            "itemtype": "method",
            "name": "twaver.vector.Network.getElementUIFunction",
            "return": {
                "description": "返回网元视图生成器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25936,
            "description": "获取拓扑组件当前的Graphics缩放值",
            "itemtype": "method",
            "name": "twaver.vector.Network.getGraphicsZoom",
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25943,
            "description": "返回包含分组孩子视图区域的集合",
            "itemtype": "method",
            "name": "twaver.vector.Network.getGroupChildrenRects",
            "params": [
                {
                    "name": "group",
                    "description": "分组对象",
                    "type": "twaver.Group"
                }
            ],
            "return": {
                "description": "返回包含孩子视图区域的集合",
                "type": "twaver.List"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25951,
            "description": "获取指定网元的图标颜色数组，默认返回element#getStyle('icons.colors')",
            "itemtype": "method",
            "name": "twaver.vector.Network.getIconsColors",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的图标颜色数组",
                "type": "Array"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25959,
            "description": "获取指定网元的图标名称数组，默认返回element#getStyle('icons.names')",
            "itemtype": "method",
            "name": "twaver.vector.Network.getIconsNames",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元的图标名称数组",
                "type": "Array"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25967,
            "description": "获取交互处理器集合，交互处理器用于设置Network相应哪些键盘和鼠标事件。",
            "itemtype": "method",
            "name": "twaver.vector.Network.getInteractions",
            "return": {
                "description": "返回交互处理器集合",
                "type": "Array"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25974,
            "itemtype": "method",
            "name": "twaver.vector.Network.getLabel2",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25981,
            "description": "获取指定网元所在的层，默认为'default'层",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLayerByElement",
            "params": [
                {
                    "name": "element",
                    "description": "用于返回层的网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元所在的层",
                "type": "twaver.Layer"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25989,
            "description": "获取延迟移动网元时网元的填充色，默认值为twaver.Defaults.NETWORK_LAZYMOVE_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLazyMoveFillColor",
            "return": {
                "description": "返回延迟移动网元时网元的填充色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 25996,
            "description": "获取延迟移动网元时网元的边框颜色，默认值为twaver.Defaults.NETWORK_LAZYMOVE_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLazyMoveOutlineColor",
            "return": {
                "description": "返回延迟移动网元时网元的边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26003,
            "description": "获取延迟移动网元时网元的边框宽度，默认值为twaver.Defaults.NETWORK_LAZYMOVE_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLazyMoveOutlineWidth",
            "return": {
                "description": "返回延迟移动网元时网元的边框宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26010,
            "description": "获取节点是否可以连线的过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLinkableFunction",
            "return": {
                "description": "返回节点是否可以连线的过滤器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26017,
            "description": "获得LINK的流动间隔时间",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLinkFlowInterval",
            "return": {
                "description": "返回Link的流动间隔时间",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26024,
            "description": "获得Link流动时的偏移量",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLinkFlowOffset",
            "params": [
                {
                    "name": "link",
                    "description": "Link实例",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回Link流动时的偏移量",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26032,
            "description": "获得Link流动时的步进量",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLinkFlowStepping",
            "params": [
                {
                    "name": "link",
                    "description": "Link实例",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回Link流动时的步进量",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26040,
            "description": "获取指定连线捆绑后的标签，默认如果指定的连线是捆绑代理，则返回\"+(\" + link.getBundleCount() + \")\"，否则返回null",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLinkHandlerLabel",
            "params": [
                {
                    "name": "link",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "return": {
                "description": "返回指定连线捆绑后的标签",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26048,
            "description": "获取连线路径生成函数",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLinkPathFunction",
            "return": {
                "description": "返回连线路径生成函数",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26055,
            "description": "获取拓扑组件当前的位置缩放值",
            "itemtype": "method",
            "name": "twaver.vector.Network.getLocationZoom",
            "return": {
                "description": "数值",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26062,
            "description": "获取网元可移动过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.getMovableFunction",
            "return": {
                "description": "返回网元可移动过滤器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26069,
            "description": "获取可移动的被选中的网元集合",
            "itemtype": "method",
            "name": "twaver.vector.Network.getMovableSelectedElements",
            "return": {
                "description": "返回可移动的被选中的网元集合",
                "type": "twaver.List"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26076,
            "description": "获取可移动的网元的区域",
            "itemtype": "method",
            "name": "twaver.vector.Network.getMovableSelectedElementsRect",
            "return": {
                "description": "返回可移动的网元的区域",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26083,
            "description": "获取两个坐标点得偏移量，考虑了缩放的影响",
            "itemtype": "method",
            "name": "twaver.vector.Network.getOffset",
            "params": [
                {
                    "name": "newPoint",
                    "description": "坐标点",
                    "type": "Object"
                },
                {
                    "name": "lastPoint",
                    "description": "坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "坐标点",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26092,
            "description": "获取相对于网元指定位置的坐标，此方法常用于定位和网元相关的附件的位置",
            "itemtype": "method",
            "name": "twaver.vector.Network.getPosition",
            "params": [
                {
                    "name": "position",
                    "description": "相对位置",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "获取位置时的相对网元或网元视图，类型为twaver.Element或者twaver.network.ElementUI",
                    "type": "Object"
                },
                {
                    "name": "tarSize",
                    "description": "目标的大小，类型为包含width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "String"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回包含x坐标和y坐标的Object对象",
                "type": "Object"
            },
            "example": [
                " var node = new twaver.Node({name:'Node', location: {x:100, y:100}});\nbox.add(node);\nvar position = network.getPosition('top.top', node, {width:10, height:10}, 0, 0);\nconsole.log(position.x, position.y);\n// output: 110 90\n\nposition可以为：\nhotspot\nfrom\nto\ntopleft.topleft\ntopleft.topright\ntop.top\ntopright.topleft\ntopright.topright\ntopleft\ntop\ntopright\ntopleft.bottomleft\ntopleft.bottomright\ntop.bottom\ntopright.bottomleft\ntopright.bottomright\nleft.left\nleft\nleft.right\ncenter\nright.left\nright\nright.right\nbottomleft.topleft\nbottomleft.topright\nbottom.top\nbottomright.topleft\nbottomright.topright\nbottomleft\nbottom\nbottomright\nbottomleft.bottomleft\nbottomleft.bottomright\nbottom.bottom\nbottomright.bottomleft\nbottomright.bottomright"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26147,
            "description": "获取框选网元过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRectSelectFilter",
            "return": {
                "description": "返回框选网元过滤器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26154,
            "description": "获取延迟改变网元大小时网元边框的颜色，默认值为twaver.Defaults.NETWORK_RESIZE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getResizeLineColor",
            "return": {
                "description": "返回延迟改变网元大小时网元边框的颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26161,
            "description": "获取延迟改变网元大小时网元边框的宽度，默认值为twaver.Defaults.NETWORK_RESIZE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Network.getResizeLineWidth",
            "return": {
                "description": "返回延迟改变网元大小时网元边框的宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26168,
            "description": "获取改变网元大小时控制点的填充色，默认为twaver.Defaults.NETWORK_RESIZE_POINT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getResizePointFillColor",
            "return": {
                "description": "返回改变网元大小时控制点的填充色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26175,
            "description": "获取改变网元大小时控制点的边框颜色，默认值为twaver.Defaults.NETWORK_RESIZE_POINT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getResizePointOutlineColor",
            "return": {
                "description": "返回改变网元大小时控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26182,
            "description": "获取改变网元大小时控制点的边框宽度，默认值为twaver.Defaults.NETWORK_RESIZE_POINT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Network.getResizePointOutlineWidth",
            "return": {
                "description": "返回改变网元大小时控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26189,
            "description": "获取更改网元大小的控制点的大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.getResizePointSize",
            "return": {
                "description": "返回更改网元大小的控制点的大小",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26196,
            "description": "获取主画布，网元视图绘制在主画布上",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRootCanvas",
            "return": {
                "description": "返回主画布",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26203,
            "description": "获取网元是否可旋转过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotatableFunction",
            "return": {
                "description": "网元是否可旋转过滤器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26210,
            "description": "获取旋转控制点的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotatePointFillColor",
            "return": {
                "description": "返回旋转控制点的填充色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26217,
            "description": "获取旋转控制点的偏移量",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotatePointOffset",
            "return": {
                "description": "返回旋转控制点的偏移量",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26224,
            "description": "获取旋转控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotatePointOutlineColor",
            "return": {
                "description": "返回旋转控制点的边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26231,
            "description": "获取旋转控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotatePointOutlineWidth",
            "return": {
                "description": "返回旋转控制点的边框宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26238,
            "description": "返回旋转控制点的大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotatePointSize",
            "return": {
                "description": "旋转控制点的大小",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26245,
            "description": "获取旋转刻度填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotateScaleFillColor",
            "return": {
                "description": "返回旋转刻度填充色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26252,
            "description": "获取旋转刻度文字字体颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotateScaleFontColor",
            "return": {
                "description": "旋转刻度文字字体颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26259,
            "description": "获取旋转刻度高度",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotateScaleHeight",
            "return": {
                "description": "旋转刻度高度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26266,
            "description": "获取旋转刻度宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.getRotateScaleWidth",
            "return": {
                "description": "返回旋转刻度宽度",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26273,
            "description": "获取滚动条宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.getScrollBarWidth",
            "return": {
                "description": "返回滚动条宽度，默认为10",
                "type": "Number"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26280,
            "description": "获取框选时矩形框的填充色，默认值为twaver.Defaults.NETWORK_SELECT_FILL_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getSelectFillColor",
            "return": {
                "description": "返回框选时矩形框的填充色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26287,
            "description": "获取选择模式（当框选网元时，哪些网元会被选中），默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "itemtype": "method",
            "name": "twaver.vector.Network.getSelectMode",
            "return": {
                "description": "返回选择模式",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26298,
            "description": "获取框选时矩形框的边框颜色，默认值为twaver.Defaults.NETWORK_SELECT_OUTLINE_COLOR",
            "itemtype": "method",
            "name": "twaver.vector.Network.getSelectOutlineColor",
            "return": {
                "description": "返回框选时矩形框的边框颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26305,
            "description": "获取框选时矩形框的边框宽度，默认值为twaver.Defaults.NETWORK_SELECT_OUTLINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.vector.Network.getSelectOutlineWidth",
            "return": {
                "description": "返回框选时矩形框的边框宽度",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26312,
            "description": "获得指定网元选中时的阴影颜色，如果网元的style属性shadow.color不为空，则返回style属性shadow.color的值，否则返回style属性select.color的值",
            "itemtype": "method",
            "name": "twaver.vector.Network.getShadowColor",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元选中时的阴影颜色",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26320,
            "description": "返回缩放后多边形节点的所有顶点，逻辑缩放下，这些顶点会和本身的顶点不一样，物理缩放下，这些顶点和本身的顶点一样。",
            "itemtype": "method",
            "name": "twaver.vector.Network.getShapeNodeZoomPoints",
            "params": [
                {
                    "name": "shapeNode",
                    "description": "多边形节点",
                    "type": "twaver.ShapeNode"
                },
                {
                    "name": "reverseZoom",
                    "description": "是否反转缩放值，如果是计算过程中缩放值用1/缩放值代替",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "返回缩放后多边形节点的所有顶点",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26329,
            "itemtype": "method",
            "name": "twaver.vector.Network.getSizeZoom",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26335,
            "description": "获取上层画布，默认告警等附件画在上层画布上",
            "itemtype": "method",
            "name": "twaver.vector.Network.getTopCanvas",
            "return": {
                "description": "返回上层画布",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26342,
            "description": "获取Network可见网元所占的区域",
            "itemtype": "method",
            "name": "twaver.vector.Network.getViewRect",
            "return": {
                "description": "返回包含x、y、width和height属性的Object对象",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26349,
            "description": "获取网元可见过滤器，Network通过可见过滤器判断每个网元是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.getVisibleFunction",
            "return": {
                "description": "返回网元可见过滤器",
                "type": "Function"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26356,
            "itemtype": "method",
            "name": "twaver.vector.Network.getZoomBodyRect",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26363,
            "description": "获取缩放管理器",
            "itemtype": "method",
            "name": "twaver.vector.Network.getZoomManager",
            "return": {
                "description": "返回缩放管理器",
                "type": "twaver.vector.BaseZoomManager"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26370,
            "description": "返回一个对象，这个对象标示在特定缩放值下，那些元素不可见。比如：\n{\n\n\tlink : 0.5,\n\tlabel : 0.8,\n\talarmBallon : 0.5,\n} 标示在缩放值小于0.5的时候，link不可见,告警冒泡不可见，缩放值小于0.8时，标签不可见。",
            "itemtype": "method",
            "name": "twaver.vector.Network.getZoomVisibilityThresholds",
            "return": {
                "description": "返回一个对象，这个对象标示在特定缩放值下，那些元素不可见",
                "type": "Object"
            },
            "example": [
                " \t\t\t\t\tnetwork.setZoomVisibilityThresholds({\n\t\t\t\t\t\tzoomName : 'zoom',\n\t\t\t\t\t\tlink : 0.5,\n\t\t\t\t\t\tlabel : 0.8,\n\t\t\t\t\t\talarmBallon : 0.5,\n\t\t\t\t\t});"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26389,
            "description": "ElementBox里网元添加、删除以及清空时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleElementBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox里网元变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26396,
            "description": "ElementBox里网元的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleElementBoxPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox里网元属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26403,
            "description": "ElementBox的属性发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleElementPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ElementBox属性变化事件，包含property、oldValue和newValue属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26410,
            "description": "ElementBox里网元的顺序发生变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleIndexChange",
            "params": [
                {
                    "name": "e",
                    "description": "网元顺序变化事件，包含element、oldIndex和newIndex属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26417,
            "description": "ElementBox的LayerBox里Layer添加、删除以及清空时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleLayerBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26424,
            "description": "ElementBox的LayerBox里Layer层次变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleLayerHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer层次变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26431,
            "description": "ElementBox的LayerBox里Layer属性变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleLayerPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "LayerBox里Layer属性变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26438,
            "description": "SelectionModel选择变化时的处理函数，用户不需要调用此方法，但可以重载此方法，添加自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.handleSelectionChange",
            "params": [
                {
                    "name": "e",
                    "description": "选择变化事件，包含kind和data属性",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26445,
            "description": "获取是否包含编辑交互处理器",
            "itemtype": "method",
            "name": "twaver.vector.Network.hasEditInteraction",
            "return": {
                "description": "如果包含编辑交互处理器，则返回ture，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26452,
            "description": "判断是否包含选中的并且可移动的网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.hasMovableSelectedElements",
            "return": {
                "description": "如果包含选中的并且可移动的网元，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26459,
            "description": "获取鼠标下或指定坐标下的网元视图对象或附件对象",
            "itemtype": "method",
            "name": "twaver.vector.Network.hitTest",
            "params": [
                {
                    "name": "point",
                    "description": "鼠标事件或坐标点",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回鼠标下或指定坐标下的网元视图对象或附件对象",
                "type": "Object"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26467,
            "description": "使指定连线的捆绑连线无效",
            "itemtype": "method",
            "name": "twaver.vector.Network.invalidateBundleLink",
            "params": [
                {
                    "name": "element",
                    "description": "连线",
                    "type": "twaver.Link"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26474,
            "description": "无效画布大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.invalidateCanvasSize",
            "params": [
                {
                    "name": "delay",
                    "description": "延迟时间，默认为300ms",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26481,
            "description": "使指定网元的视图无效",
            "itemtype": "method",
            "name": "twaver.vector.Network.invalidateElementUI",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                },
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则使网元无效的同时使附件无效，否则不使附件无效，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26489,
            "description": "使所有网元的视图无效",
            "itemtype": "method",
            "name": "twaver.vector.Network.invalidateElementUIs",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则使网元无效的同时使附件无效，否则不使附件无效，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26496,
            "description": "无效所有网元的可见性，当设置了visibleFunction，并且外部条件变动后，可以用此方法强制刷新所有网元是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.invalidateElementVisibility",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26502,
            "description": "无效所有选中网元的视图",
            "itemtype": "method",
            "name": "twaver.vector.Network.invalidateSelectedElementUIs",
            "params": [
                {
                    "name": "checkAttachments",
                    "description": "如果为true，则无效网元的同时无效附件，否则不无效附件，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26509,
            "description": "获取是否自动计算画布大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.isAutoValidateCanvasSize",
            "return": {
                "description": "返回是否自动计算画布大小",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26516,
            "description": "获取是否能双击进入空的子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_EMPTYSUBNETWORK",
            "itemtype": "method",
            "name": "twaver.vector.Network.isDoubleClickToEmptySubNetwork",
            "return": {
                "description": "返回是否能双击进入空的子网",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26523,
            "description": "获取是否双击展开组，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_GROUPEXPAND",
            "itemtype": "method",
            "name": "twaver.vector.Network.isDoubleClickToGroupExpand",
            "return": {
                "description": "返回是否双击展开组",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26530,
            "description": "获取是否双击捆绑连线，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_LINKBUNDLE",
            "itemtype": "method",
            "name": "twaver.vector.Network.isDoubleClickToLinkBundle",
            "return": {
                "description": "返回是否双击捆绑连线",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26537,
            "description": "获取是否双击子网时进入子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_SUBNETWORK",
            "itemtype": "method",
            "name": "twaver.vector.Network.isDoubleClickToSubNetwork",
            "return": {
                "description": "返回是否双击子网时进入子网",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26544,
            "description": "获取是否双击背景返回上一层子网，默认值为twaver.Defaults.NETWORK_DOUBLECLICK_TO_UPSUBNETWORK",
            "itemtype": "method",
            "name": "twaver.vector.Network.isDoubleClickToUpSubNetwork",
            "return": {
                "description": "返回是否双击背景返回上一层子网",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26551,
            "description": "判断指定网元是否可编辑，如果editableFunction返回false，则不可编辑；如果网元所在的层不可编辑，则不可编辑；否则可编辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.isEditable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可编辑，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26559,
            "description": "获取是否正在编辑网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.isEditingElement",
            "return": {
                "description": "返回是否正在编辑网元",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26566,
            "description": "获取水平滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.isHScrollBarVisible",
            "return": {
                "description": "返回水平滚动条是否可见",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26573,
            "description": "获取是否允许用键盘Delete键删除选中网元，默认值为twaver.Defaults.NETWORK_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.vector.Network.isKeyboardRemoveEnabled",
            "return": {
                "description": "返回是否允许用键盘Delete键删除选中网元",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26580,
            "description": "获取是否允许用键盘Ctrl+A键选择所有网元，默认值为twaver.Defaults.NETWORK_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.vector.Network.isKeyboardSelectEnabled",
            "return": {
                "description": "返回是否允许用键盘Ctrl+A键选择所有网元",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26587,
            "description": "获取延迟移动网元时是否有动画效果，默认值为twaver.Defaults.NETWORK_LAZYMOVE_ANIMATE",
            "itemtype": "method",
            "name": "twaver.vector.Network.isLazyMoveAnimate",
            "return": {
                "description": "返回延迟移动网元时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26594,
            "description": "获取延迟移动网元时轮廓是否填充，默认值为twaver.Defaults.NETWORK_LAZYMOVE_FILL",
            "itemtype": "method",
            "name": "twaver.vector.Network.isLazyMoveFill",
            "return": {
                "description": "返回延迟移动网元时轮廓是否填充",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26601,
            "description": "获取是否限制网元坐标不能为负",
            "itemtype": "method",
            "name": "twaver.vector.Network.isLimitElementInPositiveLocation",
            "return": {
                "description": "返回是否限制网元坐标不能为负",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26608,
            "description": "获取是否限制左上角，如果限制左上角，不能看到左上角以外的区域",
            "itemtype": "method",
            "name": "twaver.vector.Network.isLimitViewInCanvas",
            "return": {
                "description": "返回是否限制左上角，默认为true",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26615,
            "description": "获取指定节点是否可以创建连线",
            "itemtype": "method",
            "name": "twaver.vector.Network.isLinkable",
            "params": [
                {
                    "name": "node",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "return": {
                "description": "返回指定节点是否可以创建连线",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26623,
            "description": "返回是否启用流动Link，默认是false",
            "itemtype": "method",
            "name": "twaver.vector.Network.isLinkFlowEnabled",
            "return": {
                "description": "是否启用流动Link",
                "type": "String"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26630,
            "description": "获取网元被选择时是否让其可见，默认值为twaver.Defaults.NETWORK_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.vector.Network.isMakeVisibleOnSelected",
            "return": {
                "description": "返回网元被选择时是否让其可见",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26637,
            "description": "判断指定网元是否可移动，如果网元是Link，则不可移动；如果movableFunction返回false，则也不可移动；如果网元所在的层不可移动，则也不可移动；否则可以移动",
            "itemtype": "method",
            "name": "twaver.vector.Network.isMovable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "如果网元可移动，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26645,
            "description": "获取是否正在移动网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.isMovingElement",
            "return": {
                "description": "返回是否正在移动网元",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26652,
            "description": "获取不是代理的连线是否可见，默认值为twaver.Defaults.NETWORK_NO_AGENT_LINK_VISIBLE",
            "itemtype": "method",
            "name": "twaver.vector.Network.isNoAgentLinkVisible",
            "return": {
                "description": "返回不是代理的连线是否可见",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26659,
            "description": "获取是否允许框选网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.isRectSelectEnabled",
            "return": {
                "description": "如果允许框选网元, 返回true, 否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26666,
            "description": "获取改变网元大小时是否有动画效果，默认值为twaver.Defaults.NETWORK_RESIZE_ANIMATE",
            "itemtype": "method",
            "name": "twaver.vector.Network.isResizeAnimate",
            "return": {
                "description": "返回改变网元大小时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26673,
            "description": "获取指定网元是否可旋转",
            "itemtype": "method",
            "name": "twaver.vector.Network.isRotatable",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回指定网元是否可旋转",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26681,
            "description": "获取是否正在旋转网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.isRotatingElement",
            "return": {
                "description": "返回是否正在旋转网元",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26688,
            "description": "获取滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.isScrollBarVisible",
            "return": {
                "description": "返回滚动条是否可见",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26695,
            "description": "获取是否正在选择网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.isSelectingElement",
            "return": {
                "description": "返回是否正在选择网元",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26702,
            "description": "获取网元被选中后是否置顶，默认值为twaver.Defaults.NETWORK_SENDTOTOP_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.vector.Network.isSendToTopOnSelected",
            "return": {
                "description": "返回网元被选中后是否置顶",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26709,
            "description": "获取是否显示旋转网元时的刻度",
            "itemtype": "method",
            "name": "twaver.vector.Network.isShowRotateScale",
            "return": {
                "description": "返回是否显示旋转网元时的刻度",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26716,
            "description": "获取进入下一层子网或返回上一层子网时是否有动画效果，默认值为twaver.Defaults.NETWORK_SUBNETWORK_ANIMATE",
            "itemtype": "method",
            "name": "twaver.vector.Network.isSubNetworkAnimate",
            "return": {
                "description": "返回进入下一层子网或返回上一层子网时是否有动画效果",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26723,
            "description": "获取是否让提示信息生效，默认值为twaver.Defaults.NETWORK_TOOLTIP_ENABLED",
            "itemtype": "method",
            "name": "twaver.vector.Network.isToolTipEnabled",
            "return": {
                "description": "返回是否让提示信息生效",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26730,
            "description": "点击网元的透明部分网元是否能被选中，默认为false",
            "itemtype": "method",
            "name": "twaver.vector.Network.isTransparentSelectionEnable",
            "return": {
                "description": "点击网元的透明部分网元是否能被选中，默认为false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26737,
            "description": "获取指定的网元是否可见，如果可见过滤器visibleFunction返回false，则不可见；如果网元所在的层不可见，则网元不可见；否则网元可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.isVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                },
                {
                    "name": "visibleFunction",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "defaultLayer",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "如果指定网元可见，则返回true，否则返回false",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26747,
            "description": "获取垂直滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.isVScrollBarVisible",
            "return": {
                "description": "返回垂直滚动条是否可见，默认为true",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26754,
            "description": "滚动滚轮是否缩放界面，默认值为true",
            "itemtype": "method",
            "name": "twaver.vector.Network.isWheelToZoom",
            "return": {
                "description": "滚动滚轮是否缩放界面，默认值为true",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26761,
            "description": "返回是否显示缩放提示，默认为true",
            "itemtype": "method",
            "name": "twaver.vector.Network.isZoomDivVisible",
            "return": {
                "description": "返回是否显示缩放提示，默认为true",
                "type": "Boolean"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26768,
            "description": "滚动水平和垂直滚动条，让指定网元可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.makeVisible",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26775,
            "description": "将选中的网元移动指定偏移量，移动时可以设置是否有动画效果，而且能指定移动结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.vector.Network.moveSelectedElements",
            "params": [
                {
                    "name": "xoffset",
                    "description": "x坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "y坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "移动时是否有动画效果，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "回调函数，移动结束后执行的动作，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26785,
            "description": "shareSelectionModel属性变化时触发的动作，用户不需要调用此方法，但可以重载此方法执行自定义逻辑",
            "itemtype": "method",
            "name": "twaver.vector.Network.onShareSelectionModelChanged",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26791,
            "description": "绘制最底层元素",
            "itemtype": "method",
            "name": "twaver.vector.Network.paintBottom",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26798,
            "description": "回去标记",
            "itemtype": "method",
            "name": "twaver.vector.Network.paintMarker",
            "params": [
                {
                    "name": "ctx",
                    "description": "画布上下文",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26805,
            "description": "绘制所有网元视图",
            "itemtype": "method",
            "name": "twaver.vector.Network.paintRoot",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26811,
            "description": "绘制上层画布",
            "itemtype": "method",
            "name": "twaver.vector.Network.paintTopCanvas",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26817,
            "description": "居中显示拓扑图",
            "itemtype": "method",
            "name": "twaver.vector.Network.panToCenter",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26823,
            "description": "删除标记",
            "itemtype": "method",
            "name": "twaver.vector.Network.removeMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "带paint方法的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26830,
            "description": "重绘上层画布",
            "itemtype": "method",
            "name": "twaver.vector.Network.repaintTopCanvas",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26836,
            "description": "将指定网元置顶，显示在所有网元的最上面，遮盖其他网元，但也受网元所在的层的制约，还有父子关系以及跟随关系的制约；如果sendToTopOnSelected为true，则点击网元时会调用此方法",
            "itemtype": "method",
            "name": "twaver.vector.Network.sendToTop",
            "params": [
                {
                    "name": "element",
                    "description": "网元",
                    "type": "twaver.Element"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26843,
            "description": "设置是否自动计算画布大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.setAutoValidateCanvasSize",
            "params": [
                {
                    "name": "v",
                    "description": "是否自动计算画布大小",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26850,
            "description": "设置背景图片",
            "itemtype": "method",
            "name": "twaver.vector.Network.setBackgroundImage",
            "params": [
                {
                    "name": "backgroundImage",
                    "description": "背景图片",
                    "type": "HTMLImageElement"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26857,
            "description": "设置当前交互模式为创建网元模式，在Network上单击时，会创建指定类型的网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setCreateElementInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "网元类型，可选，默认值为twaver.Node",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26864,
            "description": "设置当前交互模式为创建连线模式，在Network上单击任意网元设置连线的开始节点，再次点击任意网元设置连线的结束节点",
            "itemtype": "method",
            "name": "twaver.vector.Network.setCreateLinkInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "连线类型，可选，默认值为twaver.Link",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26871,
            "description": "设置当前交互模式为创建折线模式，在Network上单击任意网元设置折线的开始节点，多次点击不同的背景位置设置折线的points属性，再次点击任意网元设置折线的结束节点",
            "itemtype": "method",
            "name": "twaver.vector.Network.setCreateShapeLinkInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "折线类型，可选，默认值为twaver.ShapeLink",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26878,
            "description": "设置当前交互模式为创建多边形模式，在Network上多次点击不同位置设置多边形的points属性，最后双击结束",
            "itemtype": "method",
            "name": "twaver.vector.Network.setCreateShapeNodeInteractions",
            "params": [
                {
                    "name": "type",
                    "description": "多边形类型，可选，默认值为twaver.ShapeNode",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26885,
            "description": "将当前子网设置为指定子网，并且可以设置是否有动画效果，而且能指定设置当前子网结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.vector.Network.setCurrentSubNetwork",
            "params": [
                {
                    "name": "currentSubNetwork",
                    "description": "子网",
                    "type": "twaver.SubNetwork"
                },
                {
                    "name": "animate",
                    "description": "是否有动画效果",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "设置当前子网结束后的回调函数，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26894,
            "description": "设置交互模式为默认交互模式，包含选择交互处理器SelectInteraction（处理框选或选择网元）、移动交互处理器MoveInteraction（处理移动网元）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.vector.Network.setDefaultInteractions",
            "params": [
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选、默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26901,
            "description": "设置是否能双击进入空的子网",
            "itemtype": "method",
            "name": "twaver.vector.Network.setDoubleClickToEmptySubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否能双击进入空的子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26908,
            "description": "设置是否双击展开组",
            "itemtype": "method",
            "name": "twaver.vector.Network.setDoubleClickToGroupExpand",
            "params": [
                {
                    "name": "v",
                    "description": "是否能双击展开组",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26915,
            "description": "设置是否双击捆绑连线",
            "itemtype": "method",
            "name": "twaver.vector.Network.setDoubleClickToLinkBundle",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击捆绑连线",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26922,
            "description": "设置是否双击子网时进入子网",
            "itemtype": "method",
            "name": "twaver.vector.Network.setDoubleClickToSubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击子网时进入子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26929,
            "description": "设置是否双击背景返回上一层子网",
            "itemtype": "method",
            "name": "twaver.vector.Network.setDoubleClickToUpSubNetwork",
            "params": [
                {
                    "name": "v",
                    "description": "是否双击背景返回上一层子网",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26936,
            "description": "设置网元可编辑过滤器，默认值为null，用于判断在编辑模式时是否可以更改节点大小（选中网元时周围有8个可拖拽的控制点），或者移动多边形、折线的点",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元可编辑过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setEditInteractions();\nnetwork.setEditableFunction(function (element) {\n    return element.getName() === 'From';\n});"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26947,
            "description": "设置是否正在编辑网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在编辑网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26954,
            "description": "设置交互模式为编辑交互模式，包含选择交互处理器SelectInteraction（处理框选或选择网元）、编辑处理器EditInteraction（处理改变网元大小）、移动交互处理器MoveInteraction（处理移动网元）和默认交互处理器DefaultInteraction（处理展开或合并组、进入或返回子网、合并或展开连线捆绑、删除或全选网元等）",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditInteractions",
            "params": [
                {
                    "name": "lazyMode",
                    "description": "是否使用延迟模式，可选、默认为false",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26961,
            "description": "设置创建连线时连线的颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "创建连线时连线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26968,
            "description": "设置创建连线时连线的宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "创建连线时连线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26975,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditPointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26982,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditPointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26989,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditPointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 26996,
            "description": "设置编辑ShapeNode或ShapeLink时控制点的大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.setEditPointSize",
            "params": [
                {
                    "name": "v",
                    "description": "编辑ShapeNode或ShapeLink时控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27003,
            "description": "设置和Network绑定的ElementBox网元容器，Network构造时可以设置ElementBox（内部创建一个新的ElementBox），也可以构造完后再设置ElementBox",
            "itemtype": "method",
            "name": "twaver.vector.Network.setElementBox",
            "params": [
                {
                    "name": "elementBox",
                    "description": "网元容器",
                    "type": "twaver.ElementBox"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27010,
            "description": "设置网元视图生成器，用于创建和网元关联的网元视图，默认用element#getElementUIClass返回的类型创建和网元关联的网元视图\ntwaver.Defaults.ELEMENTUI_FUNCTION = function(network, element){\n    var clazz = element.getElementUIClass();\n    if (clazz) {\n         return new clazz(network, element);\n    }\n    return null;\n }",
            "itemtype": "method",
            "name": "twaver.vector.Network.setElementUIFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元视图生成器",
                    "type": "Function"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27024,
            "description": "设置是否包含编辑交互处理器",
            "itemtype": "method",
            "name": "twaver.vector.Network.setHasEditInteraction",
            "params": [
                {
                    "name": "value",
                    "description": "是否包含编辑交互处理器",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27031,
            "description": "设置水平滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.setHScrollBarVisible",
            "params": [
                {
                    "name": "v",
                    "description": "水平滚动条是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27038,
            "description": "设置交互处理器，交互处理器用于设置Network相应哪些键盘和鼠标事件。",
            "itemtype": "method",
            "name": "twaver.vector.Network.setInteractions",
            "params": [
                {
                    "name": "interactions",
                    "description": "包含交互处理器的集合",
                    "type": "twaver.List"
                }
            ],
            "example": [
                " network.setInteractions([\n    new twaver.network.interaction.SelectInteraction(network),\n    new twaver.network.interaction.EditInteraction(network),\n    new twaver.network.interaction.MoveInteraction(network),\n    new twaver.network.interaction.DefaultInteraction(network)\n]);"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27051,
            "description": "设置是否允许用键盘Delete键删除选中网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许用键盘Delete键删除选中网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27058,
            "description": "设置是否允许用键盘Ctrl+A键选择所有网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许用键盘Ctrl+A键选择所有网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27065,
            "description": "设置延迟移动网元时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLazyMoveAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27072,
            "description": "设置延迟移动网元时轮廓是否填充",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLazyMoveFill",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时轮廓是否填充",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27079,
            "description": "设置延迟移动网元时网元的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLazyMoveFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27086,
            "description": "设置延迟移动网元时网元的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLazyMoveOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27093,
            "description": "设置延迟移动网元时网元的边框宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLazyMoveOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "延迟移动网元时网元的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27100,
            "description": "设置是否限制网元坐标不能为负",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLimitElementInPositiveLocation",
            "params": [
                {
                    "name": "v",
                    "description": "是否限制网元坐标不能为负",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27107,
            "description": "设置是否限制左上角",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLimitViewInCanvas",
            "params": [
                {
                    "name": "v",
                    "description": "是否限制左上角",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27114,
            "description": "设置节点是否可以连线的过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLinkableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "节点是否可以连线的过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27121,
            "description": "设置是否启用流动Link，默认是false",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLinkFlowEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "是否启用流动Link",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27128,
            "description": "设置LINK的流动间隔时间",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLinkFlowInterval",
            "params": [
                {
                    "name": "value",
                    "description": "Link的流动间隔时间(毫秒)",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27135,
            "description": "设置连线路径生成函数function (linkUI, defaultPoints)",
            "itemtype": "method",
            "name": "twaver.vector.Network.setLinkPathFunction",
            "params": [
                {
                    "name": "value",
                    "description": "连线路径生成函数",
                    "type": "Function"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27142,
            "description": "设置网元被选择时是否让其可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "网元被选择时是否让其可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27149,
            "description": "设置网元可移动过滤器，用于判断网元是否可以移动，如果网元是Link，则不可移动；如果movableFunction返回false，则也不可移动；如果网元所在的层不可移动，则也不可移动；否则可以移动",
            "itemtype": "method",
            "name": "twaver.vector.Network.setMovableFunction",
            "params": [
                {
                    "name": "v",
                    "description": "网元可移动过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setMovableFunction(function (element) {\n    return element.getName() === 'From';\n});"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27159,
            "description": "设置是否正在移动网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setMovingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在移动网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27166,
            "description": "设置交互模式为微软触摸交互模式",
            "itemtype": "method",
            "name": "twaver.vector.Network.setMSTouchInteractions",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27172,
            "description": "设置不是代理的连线是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.setNoAgentLinkVisible",
            "params": [
                {
                    "name": "v",
                    "description": "不是代理的连线是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27179,
            "description": "设置是否允许框选网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRectSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否允许框选网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27186,
            "description": "设置框选网元过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRectSelectFilter",
            "params": [
                {
                    "name": "v",
                    "description": "框选网元过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27193,
            "description": "设置改变网元大小时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizeAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27200,
            "description": "设置延迟改变网元大小时网元边框的颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizeLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "延迟改变网元大小时网元边框的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27207,
            "description": "设置延迟改变网元大小时网元边框的宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizeLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "延迟改变网元大小时网元边框的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27214,
            "description": "设置改变网元大小时控制点的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizePointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27221,
            "description": "设置改变网元大小时控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizePointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27228,
            "description": "设置改变网元大小时控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizePointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "改变网元大小时控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27235,
            "description": "设置更改网元大小的控制点的大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.setResizePointSize",
            "params": [
                {
                    "name": "v",
                    "description": "更改网元大小的控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27242,
            "description": "设置网元是否可旋转过滤器",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatableFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元是否可旋转过滤器",
                    "type": "Function"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27249,
            "description": "设置旋转控制点的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatePointFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27256,
            "description": "设置旋转控制点的偏移量",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatePointOffset",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的偏移量",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27263,
            "description": "设置旋转控制点的边框颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatePointOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27270,
            "description": "设置旋转控制点的边框宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatePointOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的边框宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27277,
            "description": "设置旋转控制点的大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatePointSize",
            "params": [
                {
                    "name": "v",
                    "description": "旋转控制点的大小",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27284,
            "description": "设置旋转刻度填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotateScaleFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27291,
            "description": "设置旋转刻度文字字体颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotateScaleFontColor",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度文字字体颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27298,
            "description": "设置旋转刻度高度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotateScaleHeight",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27305,
            "description": "设置旋转刻度宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotateScaleWidth",
            "params": [
                {
                    "name": "v",
                    "description": "旋转刻度宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27312,
            "description": "设置正在旋转的节点",
            "itemtype": "method",
            "name": "twaver.vector.Network.setRotatingElement",
            "params": [
                {
                    "name": "v",
                    "description": "节点",
                    "type": "twaver.Node"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27319,
            "description": "设置滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.setScrollBarVisible",
            "params": [
                {
                    "name": "v",
                    "description": "滚动条是否可见",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27326,
            "description": "设置滚动条宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setScrollBarWidth",
            "params": [
                {
                    "name": "v",
                    "description": "滚动条宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27333,
            "description": "设置框选时矩形框的填充色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSelectFillColor",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的填充色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27340,
            "description": "设置是否正在框选网元",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSelectingElement",
            "params": [
                {
                    "name": "v",
                    "description": "是否正在框选网元",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27347,
            "description": "设置选择模式（当框选网元时，哪些网元会被选中），默认值为twaver.Defaults.NETWORK_SELECT_MODE（mix）\n可选值为：\nmix 混合模式（从左上角往右下角框选时为contain模式，从右下角往左上角框选时为intersect模式）\nintersect 相交模式（只要和选择区域相交的网元都会被选中）\ncontain 包含模式（只有完全被选择区域包含的网元会被选中）",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSelectMode",
            "params": [
                {
                    "name": "v",
                    "description": "选择模式",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27358,
            "description": "设置框选时矩形框的边框颜色",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSelectOutlineColor",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的边框颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27365,
            "description": "设置框选时矩形框的边框宽度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSelectOutlineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "框选时矩形框的边框宽度",
                    "type": "String"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27372,
            "description": "设置网元被选中后是否置顶",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSendToTopOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "网元被选中后是否置顶",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27379,
            "description": "设置是否显示旋转网元时的刻度",
            "itemtype": "method",
            "name": "twaver.vector.Network.setShowRotateScale",
            "params": [
                {
                    "name": "v",
                    "description": "是否显示旋转网元时的刻度",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27386,
            "description": "设置进入下一层子网或返回上一层子网时是否有动画效果",
            "itemtype": "method",
            "name": "twaver.vector.Network.setSubNetworkAnimate",
            "params": [
                {
                    "name": "v",
                    "description": "进入下一层子网或返回上一层子网时是否有动画效果",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27393,
            "description": "设置是否让提示信息生效",
            "itemtype": "method",
            "name": "twaver.vector.Network.setToolTipEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "是否让提示信息生效",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27400,
            "description": "设置当前交互模式为触摸模式，只响应触摸事件，包含触摸交互处理器TouchInteraction（处理触摸事件）",
            "itemtype": "method",
            "name": "twaver.vector.Network.setTouchInteractions",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27406,
            "description": "设置点击网元的透明部分网元是否能被选中",
            "itemtype": "method",
            "name": "twaver.vector.Network.setTransparentSelectionEnable",
            "params": [
                {
                    "name": "v",
                    "description": "设置点击网元的透明部分网元是否能被选中",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27413,
            "description": "设置视图偏移量",
            "itemtype": "method",
            "name": "twaver.vector.Network.setViewOffSet",
            "params": [
                {
                    "name": "xoff",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "yoff",
                    "description": "y坐标",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27421,
            "description": "设置视图区域",
            "itemtype": "method",
            "name": "twaver.vector.Network.setViewRect",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y坐标",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27431,
            "description": "设置网元可见过滤器，用于判断指定的网元是否可见，如果可见过滤器visibleFunction返回false，则不可见；如果网元所在的层不可见，则网元不可见；否则网元可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.setVisibleFunction",
            "params": [
                {
                    "name": "value",
                    "description": "网元可见过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " network.setVisibleFunction(function (element) {\n    return !(element instanceof twaver.Link);\n});"
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27441,
            "description": "设置垂直滚动条是否可见",
            "itemtype": "method",
            "name": "twaver.vector.Network.setVScrollBarVisible",
            "params": [
                {
                    "name": "v",
                    "description": "垂直滚动条是否可见",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27448,
            "description": "设置滚动滚轮是否缩放界面",
            "itemtype": "method",
            "name": "twaver.vector.Network.setWheelToZoom",
            "params": [
                {
                    "name": "v",
                    "description": "设置滚动滚轮是否缩放界面",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27455,
            "description": "缩放的时候是否显示左上角的提示按钮",
            "itemtype": "method",
            "name": "twaver.vector.Network.setZoomDivVisible",
            "params": [
                {
                    "name": "v",
                    "description": "缩放的时候是否显示左上角的提示按钮",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27462,
            "description": "设置拓扑组件的缩放管理器",
            "itemtype": "method",
            "name": "twaver.vector.Network.setZoomManager",
            "params": [
                {
                    "name": "zoomManager",
                    "description": "缩放管理器",
                    "type": "twaver.vector.BaseZoomManager"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27469,
            "description": "设置缩放可见标示对象",
            "itemtype": "method",
            "name": "twaver.vector.Network.setZoomVisibilityThresholds",
            "params": [
                {
                    "name": "value",
                    "description": "缩放可见标示对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27476,
            "description": "从Network生成指定大小的Canvas元素，用于生成缩略图",
            "itemtype": "method",
            "name": "twaver.vector.Network.toCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "要生成的Canvas元素的宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "要生成的Canvas元素的高度",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "目标Canvas元素，可选，默认为null，如果为null，则创建新的Canvas元素，否则使用此Canvas元素",
                    "type": "HTMLCanvasElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Canvas元素",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27486,
            "description": "从Network的指定区域生成指定比例的Canvas元素，用于生成缩略图",
            "itemtype": "method",
            "name": "twaver.vector.Network.toCanvasByRegion",
            "params": [
                {
                    "name": "rect",
                    "description": "包含x、y、width和height属性的Object对象",
                    "type": "Object"
                },
                {
                    "name": "scale",
                    "description": "缩放比例",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "目标Canvas元素，可选，默认为null，如果为null，则创建新的Canvas元素，否则使用此Canvas元素",
                    "type": "HTMLCanvasElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Canvas元素",
                "type": "HTMLCanvasElement"
            },
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27496,
            "description": "返回上一层子网，可以设置是否使用动画效果，还可以指定返回结束后执行的动作",
            "itemtype": "method",
            "name": "twaver.vector.Network.upSubNetwork",
            "params": [
                {
                    "name": "animate",
                    "description": "是否使用动画效果，可选，默认为false",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "finishFunction",
                    "description": "返回上一层子网结束后执行的回调函数，可选，默认为null",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27504,
            "description": "计算画布大小",
            "itemtype": "method",
            "name": "twaver.vector.Network.validateCanvasSize",
            "class": "twaver.vector.Network"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27525,
            "description": "刷新棒图为默认类型时的数据模型",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.defaultValidateModel",
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27531,
            "description": "绘制棒图显示的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制棒图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "棒图上显示柱子的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27541,
            "description": "绘制棒图为默认类型时的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawDefaultContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制棒图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "棒图上显示柱子的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27551,
            "description": "绘制棒图为组类型时的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawGroupContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制棒图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "棒图上显示柱子的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27561,
            "description": "绘制棒图为层次类型时的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawLayerContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制棒图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "棒图上显示柱子的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27571,
            "description": "绘制棒图为百分比类型时的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawPercentContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制棒图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "棒图上显示柱子的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27581,
            "description": "绘制一个矩形区域",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawRect",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "color",
                    "description": "图表绘制的颜色",
                    "type": "String"
                },
                {
                    "name": "selected",
                    "description": "是否选中当前的矩形区域",
                    "type": "Boolean"
                },
                {
                    "name": "x",
                    "description": "矩形区域的X坐标",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "矩形区域的Y坐标",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "矩形区域的宽度",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "矩形区域的高度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27594,
            "description": "绘制棒图为叠加类型时的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.drawStackContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制棒图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "棒图上显示柱子的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27604,
            "description": "获取棒图的显示类型，默认为twaver.Defaults.BARCHART_TYPE\n支持的类型有：\n'default','group','stack','layer','percent'",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.getType",
            "return": {
                "description": "棒图的显示类型",
                "type": "String"
            },
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27613,
            "description": "刷新棒图为组类型时的数据模型",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.groupValidateModel",
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27619,
            "description": "刷新棒图为层次类型时的数据模型",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.layerValidateModel",
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27625,
            "description": "刷新棒图为百分比类型时的数据模型",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.percentValidateModel",
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27631,
            "description": "设置棒图的显示类型，默认为twaver.Defaults.BARCHART_TYPE\n支持的类型有：\n'default','group','stack','layer','percent'",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.setType",
            "params": [
                {
                    "name": "v",
                    "description": "棒图的显示类型",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27640,
            "description": "刷新棒图为叠加类型时的数据模型",
            "itemtype": "method",
            "name": "twaver.charts.BarChart.stackValidateModel",
            "class": "twaver.charts.BarChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27660,
            "description": "绘制气泡图的显示内容，用户不需要调用此方法，但是可以重写此方法来绘制气泡显示的内容",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.drawContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制气泡图内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "气泡图上显示气泡的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27670,
            "description": "获取指定数据在气泡上显示的名称，默认取值于data.getStyle('chart.names')",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getNames",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "返回一个包含Stirng类型的List对象",
                "type": "twaver.List"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27678,
            "description": "获取选中网元时阴影的颜色，默认为twaver.Defaults.BUBBLECHART_SELECT_SHADOW_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getSelectShadowColor",
            "return": {
                "description": "选中网元时阴影的颜色",
                "type": "String"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27685,
            "description": "获取选中网元时阴影的偏移量，默认为twaver.Defaults.BUBBLECHART_SELECT_SHADOW_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getSelectShadowOffset",
            "return": {
                "description": "选中网元时阴影的偏移量",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27692,
            "description": "获取指定的网元在气泡图上气泡显示的形状，取的是网元上chart.bubble.shape样式的值。\nTWaver中气泡支持的形状有：\n'rectangle'：矩形，\n'oval'：椭圆形，\n'roundrect'：圆角矩形，\n'star'：星形，\n'triangle'：三角形，\n'circle'：圆形，\n'hexagon'：六角形，\n'pentagon'：五角形，\n'diamond'：菱形",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getShape",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "气泡的形状",
                "type": "String"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27711,
            "description": "获取指定的网元在气泡图上显示的大小，默认为data.getStyle('chart.values')的值。",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getSize",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "value",
                    "description": "指定数据显示在图表上的值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "返回指定数据显示在图表上气泡值的大小",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27720,
            "description": "获取X轴限制的最小值，默认为twaver.Defaults.BUBBLECHART_XAXIS_LOWER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXAxisLowerLimit",
            "return": {
                "description": "X轴限制的最小值",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27727,
            "description": "获取X轴限制的最大值，默认为twaver.Defaults.BUBBLECHART_XAXIS_UPPER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXAxisUpperLimit",
            "return": {
                "description": "X轴限制的最大值",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27734,
            "description": "获取指定的数据在气泡图上显示的X轴的坐标值",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXAxisValues",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "X轴的坐标值",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27742,
            "description": "获取气泡图上显示网元的X坐标的最大的值",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXMax",
            "return": {
                "description": "X坐标的最大的值",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27749,
            "description": "获取气泡图上显示网元的X坐标的最小的值",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXMin",
            "return": {
                "description": "X坐标的最小的值",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27756,
            "description": "获取X轴上显示的值的范围，值等于XMax-XMin",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXRange",
            "return": {
                "description": "X轴上显示的值的范围",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27763,
            "description": "获取气泡图上平行于X轴的刻度线的显示颜色，默认为\ntwaver.Defaults.BUBBLECHART_XSCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXScaleLineColor",
            "return": {
                "description": "刻度线的显示颜色",
                "type": "String"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27771,
            "description": "获取气泡图上平行于X轴的刻度线的宽度，默认为\ntwaver.Defaults.BUBBLECHART_XSCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getXScaleLineWidth",
            "return": {
                "description": "刻度线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27779,
            "description": "获取指定的数据在气泡图上显示的Y轴的坐标值",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.getYAxisValues",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "Y轴的坐标值",
                "type": "Number"
            },
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27787,
            "description": "设置选中网元时阴影的颜色，默认为twaver.Defaults.BUBBLECHART_SELECT_SHADOW_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.setSelectShadowColor",
            "params": [
                {
                    "name": "v",
                    "description": "选中网元时阴影的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27794,
            "description": "设置选中网元时阴影的偏移量，默认为twaver.Defaults.BUBBLECHART_SELECT_SHADOW_OFFSET",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.setSelectShadowOffset",
            "params": [
                {
                    "name": "v",
                    "description": "选中网元时阴影的偏移量",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27801,
            "description": "设置X轴限制的最小值，默认为twaver.Defaults.BUBBLECHART_XAXIS_LOWER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.setXAxisLowerLimit",
            "params": [
                {
                    "name": "v",
                    "description": "X轴限制的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27808,
            "description": "设置X轴限制的最大值，默认为twaver.Defaults.BUBBLECHART_XAXIS_UPPER_LIMIT",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.setXAxisUpperLimit",
            "params": [
                {
                    "name": "v",
                    "description": "X轴限制的最大值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27815,
            "description": "设置气泡图上平行于X轴的刻度线的显示颜色，默认为\ntwaver.Defaults.BUBBLECHART_XSCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.setXScaleLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "刻度线的显示颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27823,
            "description": "设置气泡图上平行于X轴的刻度线的宽度，默认为\ntwaver.Defaults.BUBBLECHART_XSCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.BubbleChart.setXScaleLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "刻度线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.BubbleChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27844,
            "description": "绘制曲线图显示的形状，用户不需要调用此方法，但可以重写此方法来实现自己定制的图形",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.drawContent",
            "params": [
                {
                    "name": "g",
                    "description": "绘制图表的画笔",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "rect",
                    "description": "绘制图表内容的区域",
                    "type": "Object"
                },
                {
                    "name": "validHeight",
                    "description": "曲线图上显示曲线的有效高度",
                    "type": "Number"
                },
                {
                    "name": "skyline",
                    "description": "Y轴刻度的最小值",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27854,
            "description": "获取指定的网元在曲线图上显示的线的宽度，取的是网元上'chart.line.width'的样式值",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.getLineWidth",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27862,
            "description": "获取指定数据在曲线图上显示的瞄点的形状，默认为圆形。TWaver中瞄点的形状支持：\n'rectangle'：矩形，\n'oval'：椭圆形，\n'roundrect'：圆角矩形，\n'star'：星形，\n'triangle'：三角形，\n'circle'：圆形，\n'hexagon'：六角形，\n'pentagon'：五角形，\n'diamond'：菱形",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.getMarkerShape",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "瞄点的形状",
                "type": "String"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27879,
            "description": "获取指定数据在曲线图上显示的瞄点的大小",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.getMarkerSize",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "瞄点的大小",
                "type": "Number"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27887,
            "description": "获取鼠标位置所在的点索引",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.getPointIndexAt",
            "return": {
                "description": "返回鼠标位置所在的点索引",
                "type": "Number"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27894,
            "description": "获取曲线图上平行于X轴的刻度线的显示颜色，默认为\ntwaver.Defaults.LINECHART_YSCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.getXScaleLineColor",
            "return": {
                "description": "平行于X轴的刻度线的显示颜色",
                "type": "String"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27902,
            "description": "设置曲线图上平行于X轴的刻度线的宽度，默认为\ntwaver.Defaults.LINECHART_YSCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.getXScaleLineWidth",
            "return": {
                "description": "刻度线的宽度",
                "type": "Number"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27910,
            "description": "当设置网元的图表显示值的集合不连续时，比如中间有Number.NaN，判断是否需要在曲线图上显示不连续的效果",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.isInterruptable",
            "return": {
                "description": "true为显示不连续的效果，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27918,
            "description": "当设置网元的图表显示值的集合不连续时，比如中间有Number.NaN，设置是否需要在曲线图上显示不连续的效果",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.setInterruptable",
            "params": [
                {
                    "name": "v",
                    "description": "true为显示不连续的效果，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27925,
            "description": "设置曲线图上平行于X轴的刻度线的显示颜色，默认为\ntwaver.Defaults.LINECHART_YSCALE_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.setXScaleLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "平行于X轴的刻度线的显示颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27933,
            "description": "设置曲线图上平行于X轴的刻度线的宽度，默认为\ntwaver.Defaults.LINECHART_YSCALE_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.charts.LineChart.setXScaleLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "平行于X轴的刻度线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.charts.LineChart"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27955,
            "description": "获取列表上父亲和孩子之间的缩进，默认为twaver.Defaults.LIST_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.List.getIndent",
            "return": {
                "description": "父子之间的缩进",
                "type": "Number"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27962,
            "description": "获取列表的行高，默认为\ntwaver.Defaults.LIST_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.List.getRowHeight",
            "return": {
                "description": "列表的行高",
                "type": "Number"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27970,
            "description": "获取列表上行之间线的颜色，默认为 twaver.Defaults.LIST_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.List.getRowLineColor",
            "return": {
                "description": "列表上行之间线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27977,
            "description": "获取列表上行之间线的宽度，默认为twaver.Defaults.LIST_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.List.getRowLineWidth",
            "return": {
                "description": "列表上行之间线的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 27984,
            "description": "获取列表上的数据排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.List.getSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "example": [
                " list.setSortFunction(function (d1, d2) {\n         if (d1.getName() < d2.getName()) {\n             return 1;\n         } else if (d1.getName() == d2.getName()) {\n              return 0;\n         } else {\n              return -1;\n         }\n});"
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28000,
            "description": "获取列表上的数据是否可见的过滤器",
            "itemtype": "method",
            "name": "twaver.controls.List.getVisibleFunction",
            "return": {
                "description": "是否可见的过滤器",
                "type": "Function"
            },
            "example": [
                " list.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28010,
            "description": "获取指定的列表上行的数据是否可勾选",
            "itemtype": "method",
            "name": "twaver.controls.List.isCheckable",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data",
                    "optional": true
                }
            ],
            "return": {
                "description": "是否可勾选，true为可勾选，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28018,
            "description": "是否为勾选模型",
            "itemtype": "method",
            "name": "twaver.controls.List.isCheckMode",
            "return": {
                "description": "true为勾选模型，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28025,
            "description": "判断列表是否支持键盘删除数据的操作，默认为 \ntwaver.Defaults.LIST_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.List.isKeyboardRemoveEnabled",
            "return": {
                "description": "true为可以键盘删除，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28033,
            "description": "判断列表上是否支持键盘选择数据的操作，默认为twaver.Defaults.LIST_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.List.isKeyboardSelectEnabled",
            "return": {
                "description": "true为可以键盘选择数据，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28040,
            "description": "判断当选中某个列表上数据时，是否处于可见区域，默认为\ntwaver.Defaults.LIST_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.List.isMakeVisibleOnSelected",
            "return": {
                "description": "true为处于可见区域，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28048,
            "description": "调用renderData时会调用此方法，用户不需要直接调用此方法，可以重载此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.List.onLabelRendered",
            "params": [
                {
                    "name": "span",
                    "description": "包含数据元标签的Span",
                    "type": "HTMLSpanElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "label",
                    "description": "显示的标签值",
                    "type": "String"
                },
                {
                    "name": "row",
                    "description": "指定的行号",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "是否为选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28059,
            "description": "绘制列表中指定的数据",
            "itemtype": "method",
            "name": "twaver.controls.List.renderData",
            "params": [
                {
                    "name": "div",
                    "description": "包含数据的div",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "row",
                    "description": "指定数据的行号",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "是否为选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28069,
            "description": "设置是否为勾选模型",
            "itemtype": "method",
            "name": "twaver.controls.List.setCheckMode",
            "params": [
                {
                    "name": "v",
                    "description": "true为勾选模型，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28076,
            "description": "设置列表上父亲和孩子之间的缩进，默认为twaver.Defaults.LIST_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.List.setIndent",
            "params": [
                {
                    "name": "v",
                    "description": "列表的缩进",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28083,
            "description": "设置列表是否支持键盘删除数据的操作，默认为 \ntwaver.Defaults.LIST_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.List.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以键盘删除，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28091,
            "description": "设置列表上是否支持键盘选择数据的操作，默认为twaver.Defaults.LIST_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.List.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以键盘选择数据，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28098,
            "description": "设置当选中某个列表上数据时，是否处于可见区域，默认为\ntwaver.Defaults.LIST_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.List.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "true为处于可见区域，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28106,
            "description": "获取列表的行高，默认为\ntwaver.Defaults.LIST_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.List.setRowHeight",
            "params": [
                {
                    "name": "v",
                    "description": "列表的行高",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28114,
            "description": "设置列表上行之间线的颜色，默认为 twaver.Defaults.LIST_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.List.setRowLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "列表上行之间线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28121,
            "description": "设置列表上行之间线的宽度，默认为twaver.Defaults.LIST_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.List.setRowLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "列表上行之间线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28128,
            "description": "设置列表上的数据排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.List.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Function"
                }
            ],
            "example": [
                " list.setSortFunction(function (d1, d2) {\n         if (d1.getName() < d2.getName()) {\n             return 1;\n         } else if (d1.getName() == d2.getName()) {\n              return 0;\n         } else {\n              return -1;\n         }\n});"
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28144,
            "description": "设置列表上的数据是否可见的过滤器",
            "itemtype": "method",
            "name": "twaver.controls.List.setVisibleFunction",
            "params": [
                {
                    "name": "v",
                    "description": "是否可见的过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " list.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.List"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28168,
            "description": "取消当前编辑器的编辑状态",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.cancelEditing",
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28174,
            "description": "提交单元格中编辑的值，将这个值回写到Data的属性中",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.commitEditValue",
            "params": [
                {
                    "name": "editInfo",
                    "description": "指定的单元格编辑器的信息，它是一个包含column和data的对象",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "编辑器所对应的对象类型，它是一个包含type的对象类型，用于判断编辑器的类型",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28182,
            "description": "获取鼠标位置所在的列",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.getColumnAt",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标事件",
                    "type": "MouseEvent"
                }
            ],
            "return": {
                "description": "返回鼠标位置所在的列",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28190,
            "description": "获取表格上列的数据容器",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.getColumnBox",
            "return": {
                "description": "列数据容器",
                "type": "twaver.ColumnBox"
            },
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28197,
            "description": "获取当前编辑器",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.getCurrentEditor",
            "return": {
                "description": "返回当前编辑器",
                "type": "HTMLElement"
            },
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28204,
            "description": "从Data中获取对应的表格列的值，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.getValue",
            "params": [
                {
                    "name": "data",
                    "description": "表格或树表格绑定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "column",
                    "description": "指定的列对象",
                    "type": "twaver.Column"
                }
            ],
            "return": {
                "description": "返回表格列的值",
                "type": "Object"
            },
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28213,
            "description": "当列的容器中列发生变化时调用此方法，用于更新表格的显示内容。用户不需要调用此方法，但可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.handleColumnBoxChange",
            "params": [
                {
                    "name": "e",
                    "description": "列容器发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28220,
            "description": "当列的容器中列的顺序关系发生变化时调用此方法，用于更新表格的显示内容。用户不需要调用此方法，但可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.handleColumnHierarchyChange",
            "params": [
                {
                    "name": "e",
                    "description": "列容器中列的顺序发生变化的事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28227,
            "description": "当列的容器中列的属性发生变化时调用此方法，用于更新表格的显示内容。用户不需要调用此方法，但可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.handleColumnPropertyChange",
            "params": [
                {
                    "name": "e",
                    "description": "ColumnBox中列的属性变化事件",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28234,
            "description": "判断指定的表格列的单元格是否可编辑",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.isCellEditable",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data",
                    "optional": true
                },
                {
                    "name": "column",
                    "description": "指定的列",
                    "type": "twaver.Column"
                }
            ],
            "return": {
                "description": "true为可编辑，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28243,
            "description": "当绘制表格单元格时调用此方法，用户不需要自己调用此方法，但可以重载这个方法实现自己的逻辑处理",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.onCellRendered",
            "params": [
                {
                    "name": "params",
                    "description": "params是一个包含多个数据的对象，params的格式为： params = {data: data, value: this.getValue(data, column), div: cell, view: this, column: column, rowIndex: row, selected: selected}",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28250,
            "description": "排序列时的回调函数",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.onColumnSorted",
            "params": [
                {
                    "name": "column",
                    "description": "列对象",
                    "type": "twaver.Column"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28257,
            "description": "渲染表格的单元格",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.renderCell",
            "params": [
                {
                    "name": "params",
                    "description": "params是一个包含多个数据的对象，params的格式为： params = {data: data, value: this.getValue(data, column), div: cell, view: this, column: column, rowIndex: row, selected: selected}",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28264,
            "description": "绘制表格中的数据，用户可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.renderData",
            "params": [
                {
                    "name": "div",
                    "description": "包含指定表格上行数据的DIV",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "row",
                    "description": "表格指定的行",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "表格数据是否是选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28274,
            "description": "设置表格上的值回写到data中，TWaver内部使用",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.setValue",
            "params": [
                {
                    "name": "data",
                    "description": "表格或树表格绑定的数据对象",
                    "type": "twaver.Data"
                },
                {
                    "name": "column",
                    "description": "表格列对象",
                    "type": "twaver.Column"
                },
                {
                    "name": "value",
                    "description": "表格列的值",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28283,
            "description": "当鼠标点击到某个单元格上时，更新当前单元格的编辑器",
            "itemtype": "method",
            "name": "twaver.controls.TableBase.updateCurrentEditor",
            "params": [
                {
                    "name": "e",
                    "description": "鼠标的点击事件",
                    "type": "MouseEvent"
                }
            ],
            "class": "twaver.controls.TableBase"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28305,
            "description": "合并指定的树节点",
            "itemtype": "method",
            "name": "twaver.controls.Tree.collapse",
            "params": [
                {
                    "name": "data",
                    "description": "指定的树节点的数据",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28312,
            "description": "合并所有的树节点对象，调用这个方法后，所有的孩子都会处于合并状态",
            "itemtype": "method",
            "name": "twaver.controls.Tree.collapseAll",
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28318,
            "description": "展开指定的树节点对象",
            "itemtype": "method",
            "name": "twaver.controls.Tree.expand",
            "params": [
                {
                    "name": "data",
                    "description": "指定的树节点的数据",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28325,
            "description": "展开所有的树节点对象，调用这个方法后，所有的孩子都会处于打开状态",
            "itemtype": "method",
            "name": "twaver.controls.Tree.expandAll",
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28331,
            "description": "获取树的勾选方式。勾选方式的可选值有：\n'default'：默认\n'children':勾选父亲时，会将孩子也勾选上\n'descendant':勾选父亲时，将孩子以及所有的子孙节点都勾选上\n'descendantAncestor':勾选节点时，会将其下的所有孩子以及子孙节点都勾选上，并且将这个节点的所有祖先节点也勾选上",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getCheckMode",
            "return": {
                "description": "树上的勾选方式",
                "type": "String"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28342,
            "description": "获取树合并的图标，默认为twaver.Defaults.TREE_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getCollapseIcon",
            "return": {
                "description": "树合并的图标",
                "type": "String"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28349,
            "description": "获取树展开的图标，默认为twaver.Defaults.TREE_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getExpandIcon",
            "return": {
                "description": "树展开的图标",
                "type": "String"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28356,
            "description": "获取树上父亲和孩子之间的缩进，默认为twaver.Defaults.TREE_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getIndent",
            "return": {
                "description": "树的缩进",
                "type": "Number"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28363,
            "description": "获取指定的节点数据所在的层次",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getLevel",
            "params": [
                {
                    "name": "data",
                    "description": "指定的节点数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "节点的层次数",
                "type": "Number"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28371,
            "description": "获取根节点数据",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getRootData",
            "return": {
                "description": "树的根节点",
                "type": "twaver.Data"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28378,
            "description": "获取树的行高，默认为twaver.Defaults.TREE_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getRowHeight",
            "return": {
                "description": "树的行高",
                "type": "Number"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28385,
            "description": "获取树上行之间线的颜色，默认为twaver.Defaults.TREE_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getRowLineColor",
            "return": {
                "description": "树上行之间线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28392,
            "description": "获取树上行之间线的宽度，默认为twaver.Defaults.TREE_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getRowLineWidth",
            "return": {
                "description": "树上行之间线的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28399,
            "description": "获取树节点排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "example": [
                " tree.setSortFunction(function (d1, d2) {\n         if (d1.getName() < d2.getName()) {\n             return 1;\n         } else if (d1.getName() == d2.getName()) {\n              return 0;\n         } else {\n              return -1;\n         }\n});"
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28415,
            "description": "获取指定数据当前显示的图标，如果指定的数据是处于合并状态，就返回合并时的图标；如果是展开状态，返回的是展开的图标",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getToggleImage",
            "params": [
                {
                    "name": "data",
                    "description": "指定的树节点",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "树节点当前显示的图标",
                "type": "String"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28423,
            "description": "获取树节点不可勾选时的样式，默认为'none'。可选值有：\n'none'：没有任何样式\n'disabled':不可用",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getUncheckableStyle",
            "return": {
                "description": "树节点不可勾选时的样式",
                "type": "String"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28432,
            "description": "获取树上的节点是否可见的过滤器",
            "itemtype": "method",
            "name": "twaver.controls.Tree.getVisibleFunction",
            "return": {
                "description": "是否可见的过滤器",
                "type": "Function"
            },
            "example": [
                " tree.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28442,
            "description": "获取指定的树节点是否可勾选",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isCheckable",
            "params": [
                {
                    "name": "data",
                    "description": "指定的树节点对象",
                    "type": "twaver.Data",
                    "optional": true
                }
            ],
            "return": {
                "description": "是否可勾选，true为可勾选，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28450,
            "description": "是否为勾选模型",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isCheckMode",
            "return": {
                "description": "true为勾选模型，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28457,
            "description": "判断指定的节点数据下的孩子是否可以排序。默认实现为可排序，用户可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isChildrenSortable",
            "params": [
                {
                    "name": "parent",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为可排序，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28465,
            "description": "指定的树节点是否处于展开状态",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isExpanded",
            "params": [
                {
                    "name": "data",
                    "description": "指定的树节点对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为展开状态，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28473,
            "description": "判断树是否支持键盘删除节点的操作，默认为 twaver.Defaults.TREE_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isKeyboardRemoveEnabled",
            "return": {
                "description": "true为可以键盘删除，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28480,
            "description": "判断树是否支持键盘选择节点的操作，默认为twaver.Defaults.TREE_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isKeyboardSelectEnabled",
            "return": {
                "description": "true为可以键盘选择节点，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28487,
            "description": "判断当选中某个树节点时，是否处于可见区域，默认为twaver.Defaults.TREE_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isMakeVisibleOnSelected",
            "return": {
                "description": "true为处于可见区域，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28494,
            "description": "判断根节点是否可见",
            "itemtype": "method",
            "name": "twaver.controls.Tree.isRootVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28501,
            "description": "当绘制树上的标签时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.Tree.onLabelRendered",
            "params": [
                {
                    "name": "span",
                    "description": "包含数据元标签的Span",
                    "type": "HTMLSpanElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "label",
                    "description": "显示的标签值",
                    "type": "String"
                },
                {
                    "name": "row",
                    "description": "指定的行号",
                    "type": "Number"
                },
                {
                    "name": "level",
                    "description": "指定数据的层次数",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "是否为选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28513,
            "description": "渲染树上显示的数据",
            "itemtype": "method",
            "name": "twaver.controls.Tree.renderData",
            "params": [
                {
                    "name": "div",
                    "description": "包含指定数据的div",
                    "type": "HTMLDivElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "row",
                    "description": "指定数据所在的行号",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "是否为选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28523,
            "description": "设置树的勾选方式。勾选方式的可选值有：\n'default'：默认\n'children':勾选父亲时，会将孩子也勾选上\n'descendant':勾选父亲时，将孩子以及所有的子孙节点都勾选上\n'descendantAncestor':勾选节点时，会将其下的所有孩子以及子孙节点都勾选上，并且将这个节点的所有祖先节点也勾选上",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setCheckMode",
            "params": [
                {
                    "name": "v",
                    "description": "树上的勾选方式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28534,
            "description": "获取树合并的图标，默认为twaver.Defaults.TREE_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setCollapseIcon",
            "params": [
                {
                    "name": "v",
                    "description": "树合并的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28541,
            "description": "设置树展开的图标，默认为twaver.Defaults.TREE_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setExpandIcon",
            "params": [
                {
                    "name": "v",
                    "description": "树展开的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28548,
            "description": "设置树上父亲和孩子之间的缩进，默认为twaver.Defaults.TREE_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setIndent",
            "params": [
                {
                    "name": "v",
                    "description": "树上孩子和父亲之间的缩进值",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28555,
            "description": "设置树是否支持键盘删除节点的操作，默认为 twaver.Defaults.TREE_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以键盘删除，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28562,
            "description": "设置树是否支持键盘选择节点的操作，默认为twaver.Defaults.TREE_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以键盘选择节点，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28569,
            "description": "设置选中某个树节点时，让其处于可见区域，默认为twaver.Defaults.TREE_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "true为处于可见区域，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28576,
            "description": "获取根节点数据",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setRootData",
            "params": [
                {
                    "name": "v",
                    "description": "树的根节点",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28583,
            "description": "设置根节点是否可见",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setRootVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28590,
            "description": "设置树的行高，默认为twaver.Defaults.TREE_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setRowHeight",
            "params": [
                {
                    "name": "v",
                    "description": "树的行高",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28597,
            "description": "设置树上行之间线的颜色，默认为twaver.Defaults.TREE_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setRowLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "树上行之间线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28604,
            "description": "设置树上行之间线的宽度，默认为twaver.Defaults.TREE_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setRowLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "树上行之间线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28611,
            "description": "设置树节点排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Function"
                }
            ],
            "example": [
                " tree.setSortFunction(function (d1, d2) {\n         if (d1.getName() < d2.getName()) {\n             return 1;\n         } else if (d1.getName() == d2.getName()) {\n              return 0;\n         } else {\n              return -1;\n         }\n});"
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28627,
            "description": "设置树节点不可勾选时的样式，默认为'none'。可选值有：\n'none'：没有任何样式\n'disabled':不可用",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setUncheckableStyle",
            "params": [
                {
                    "name": "v",
                    "description": "树节点不可勾选时的样式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28636,
            "description": "设置树上的节点是否可见的过滤器",
            "itemtype": "method",
            "name": "twaver.controls.Tree.setVisibleFunction",
            "params": [
                {
                    "name": "v",
                    "description": "是否可见的过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " tree.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.Tree"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28662,
            "description": "获取某个点上单元格的对象",
            "itemtype": "method",
            "name": "twaver.Grid.getCellObject",
            "params": [
                {
                    "name": "x",
                    "description": "x坐标。x可以为Number，也可以为Object。当x为Number时，y值必填。当x为Object时，需要传入的一个带x，y变量的对象，例如：{x:10,y:10}",
                    "type": "Object"
                },
                {
                    "name": "y",
                    "description": "y坐标。可选，当x为object时，y不需要赋值；当x为Number时，y必须要赋值",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "包含行列索引的单元格对象",
                "type": "Object"
            },
            "class": "twaver.Grid"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28671,
            "description": "获取某个行、列上单元格的位置和大小",
            "itemtype": "method",
            "name": "twaver.Grid.getCellRect",
            "params": [
                {
                    "name": "rowIndex",
                    "description": "行的索引号",
                    "type": "Number"
                },
                {
                    "name": "columnIndex",
                    "description": "列的索引号",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "单元格的位置和大小。包含单元格的x,y坐标，以及单元格的宽高。例如：{x:100,Y:100,width:50,height:50}",
                "type": "Object"
            },
            "class": "twaver.Grid"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28694,
            "description": "获取孩子网元的边界",
            "itemtype": "method",
            "name": "twaver.Group.getChildRect",
            "params": [
                {
                    "name": "child",
                    "description": "孩子网元",
                    "type": "twaver.Element"
                }
            ],
            "return": {
                "description": "返回孩子网元的边界",
                "type": "Object"
            },
            "class": "twaver.Group"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28702,
            "description": "判断组是否处于展开状态",
            "itemtype": "method",
            "name": "twaver.Group.isExpanded",
            "return": {
                "description": "true为展开，false为合并",
                "type": "Boolean"
            },
            "class": "twaver.Group"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28709,
            "description": "反向设置组的展开状态。当组展开时，调用此方法，组变成合并状态；当组合并时，调用此方法，组变成展开状态",
            "itemtype": "method",
            "name": "twaver.Group.reverseExpanded",
            "class": "twaver.Group"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28715,
            "description": "设置组的展开状态",
            "itemtype": "method",
            "name": "twaver.Group.setExpanded",
            "params": [
                {
                    "name": "expanded",
                    "description": "true为展开，false为合并",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.Group"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28722,
            "description": "根据所有孩子坐标来更新组的位置",
            "itemtype": "method",
            "name": "twaver.Group.updateLocationFromChildren",
            "class": "twaver.Group"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28772,
            "description": "在多边形节点上添加点，更改多边形的走向。",
            "itemtype": "method",
            "name": "twaver.ShapeNode.addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "包含x，y属性的对象。例如：var point = {x:10,y:10};",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "添加点的次序，如果为空，则添加在最后一个位置。",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28780,
            "description": "派发点的更改事件，当多边形上的点发生变化时，会调用此方法。此方法用于TWaver内部调用的",
            "itemtype": "method",
            "name": "twaver.ShapeNode.firePointsChange",
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28786,
            "description": "获取ShapeNode的周长",
            "itemtype": "method",
            "name": "twaver.ShapeNode.getLineLength",
            "return": {
                "description": "返回ShapeNode的周长",
                "type": "Number"
            },
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28793,
            "description": "获取多边形节点上所有点的集合",
            "itemtype": "method",
            "name": "twaver.ShapeNode.getPoints",
            "return": {
                "description": "多边形网元上点的集合",
                "type": "twaver.List"
            },
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28800,
            "description": "获取多边形节点上所有连线段的集合",
            "itemtype": "method",
            "name": "twaver.ShapeNode.getSegments",
            "return": {
                "description": "多边形节点网元上连线段的集合",
                "type": "twaver.List"
            },
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28807,
            "description": "移除参数指定的某个点，更改多边形节点的形状",
            "itemtype": "method",
            "name": "twaver.ShapeNode.removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "移除参数所指定的某个点",
                    "type": "Number"
                }
            ],
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28814,
            "description": "移除指定的点，用于更改多边形网元的形状",
            "itemtype": "method",
            "name": "twaver.ShapeNode.removePoint",
            "params": [
                {
                    "name": "point",
                    "description": "移除的点对象，例如：var point = {x:10,y:10}",
                    "type": "Object"
                }
            ],
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28821,
            "description": "设置指定序号上的点，用于更改多边形网元的形状",
            "itemtype": "method",
            "name": "twaver.ShapeNode.setPoint",
            "params": [
                {
                    "name": "index",
                    "description": "多边形网元上的序号",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "包含x，y属性的点对象。例如：var point = {x:10,y:10}",
                    "type": "Object"
                }
            ],
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28829,
            "description": "设置多边形上点的集合",
            "itemtype": "method",
            "name": "twaver.ShapeNode.setPoints",
            "params": [
                {
                    "name": "value",
                    "description": "多边形节点上点的集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28836,
            "description": "设置多边形网元上所有连线段的集合",
            "itemtype": "method",
            "name": "twaver.ShapeNode.setSegments",
            "params": [
                {
                    "name": "v",
                    "description": "多边形节点上连线段的集合",
                    "type": "twaver.List"
                }
            ],
            "class": "twaver.ShapeNode"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28859,
            "description": "子否为子网的标志",
            "itemtype": "property",
            "name": "ISubNetwork",
            "type": "Boolean",
            "class": "twaver.SubNetwork"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28894,
            "description": "获取表格上勾选的列，表格上自带了勾选的列，默认是隐藏的",
            "itemtype": "method",
            "name": "twaver.controls.Table.getCheckColumn",
            "return": {
                "description": "勾选的列对象",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28901,
            "description": "获取表格上每列线的颜色，默认为twaver.Defaults.TABLE_COLUMN_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Table.getColumnLineColor",
            "return": {
                "description": "每列线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28908,
            "description": "获取表格上每列线的宽度，默认为twaver.Defaults.TABLE_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.Table.getColumnLineWidth",
            "return": {
                "description": "列的线宽",
                "type": "Number"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28915,
            "description": "获取表格的行高，默认为twaver.Defaults.TABLE_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.Table.getRowHeight",
            "return": {
                "description": "表格的行高",
                "type": "Number"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28922,
            "description": "获取表格上每行线的颜色，默认为twaver.Defaults.TABLE_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Table.getRowLineColor",
            "return": {
                "description": "每行线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28929,
            "description": "获取表格上每行线的宽度，默认为twaver.Defaults.TABLE_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.Table.getRowLineWidth",
            "return": {
                "description": "每行的线宽",
                "type": "Number"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28936,
            "description": "获取表格上排序的列",
            "itemtype": "method",
            "name": "twaver.controls.Table.getSortColumn",
            "return": {
                "description": "排序的列",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28943,
            "description": "获取表格上排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.Table.getSortFunction",
            "return": {
                "description": "表格上排序的函数",
                "type": "Function"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28950,
            "description": "获取表格上是否可见的过滤器，用于过滤哪些网元可见，哪些不可见",
            "itemtype": "method",
            "name": "twaver.controls.Table.getVisibleFunction",
            "return": {
                "description": "是否可见的过滤器",
                "type": "Function"
            },
            "example": [
                " table.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28960,
            "description": "判断表格是否带勾选的功能",
            "itemtype": "method",
            "name": "twaver.controls.Table.isCheckMode",
            "return": {
                "description": "true为可勾选，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28967,
            "description": "判断表格是否可编辑，默认为twaver.Defaults.TABLE_EDITABLE",
            "itemtype": "method",
            "name": "twaver.controls.Table.isEditable",
            "return": {
                "description": "true为可编辑，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28974,
            "description": "判断表格上是否支持键盘删除数据，默认为\ntwaver.Defaults.TABLE_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Table.isKeyboardRemoveEnabled",
            "return": {
                "description": "是否支持键盘删除，true为可以删除，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28982,
            "description": "判断表格上是否支持键盘选择数据，默认为\ntwaver.Defaults.TABLE_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Table.isKeyboardSelectEnabled",
            "return": {
                "description": "true为可以使用键盘来选择数据，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28990,
            "description": "判断当选中某条数据时，是否让其处于表格上可见的区域，默认为：twaver.Defaults.TABLE_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.Table.isMakeVisibleOnSelected",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 28997,
            "description": "渲染勾选那一列的单元格",
            "itemtype": "method",
            "name": "twaver.controls.Table.renderCheckCell",
            "params": [
                {
                    "name": "params",
                    "description": "它是一个带view，selected，div，data属性的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29004,
            "description": "设置表格是否可勾选，如果为true，那么就会在表格的第一列加上勾选列",
            "itemtype": "method",
            "name": "twaver.controls.Table.setCheckMode",
            "params": [
                {
                    "name": "value",
                    "description": "true为可勾选，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29011,
            "description": "设置表格上每列线的颜色，默认为twaver.Defaults.TABLE_COLUMN_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Table.setColumnLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "每列线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29018,
            "description": "设置表格上每列线的宽度，默认为twaver.Defaults.TABLE_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.Table.setColumnLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "每列的线宽",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29025,
            "description": "设置表格是否可编辑，默认为twaver.Defaults.TABLE_EDITABLE",
            "itemtype": "method",
            "name": "twaver.controls.Table.setEditable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可编辑，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29032,
            "description": "设置表格上是否支持键盘删除数据，默认为\ntwaver.Defaults.TABLE_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Table.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "是否支持键盘删除，true为可以删除，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29040,
            "description": "设置表格上是否支持键盘选择数据，默认为\ntwaver.Defaults.TABLE_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.Table.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以使用键盘来选择数据，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29048,
            "description": "设置当选中某条数据时，是否让其处于表格上可见的区域，默认为：twaver.Defaults.TABLE_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.Table.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29055,
            "description": "设置表格的行高，默认为twaver.Defaults.TABLE_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.Table.setRowHeight",
            "params": [
                {
                    "name": "v",
                    "description": "表格的行高",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29062,
            "description": "设置表格上每行线的颜色，默认为twaver.Defaults.TABLE_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.Table.setRowLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "每行线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29069,
            "description": "设置表格上每行线的宽度，默认为twaver.Defaults.TABLE_ROW_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.Table.setRowLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "每行的线宽",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29076,
            "description": "设置让表格上指定的列排序",
            "itemtype": "method",
            "name": "twaver.controls.Table.setSortColumn",
            "params": [
                {
                    "name": "v",
                    "description": "指定排序的列",
                    "type": "twaver.Column"
                }
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29083,
            "description": "设置表格上排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.Table.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Function"
                }
            ],
            "example": [
                " this.table.setSortFunction(function (node1, node2) {\n\tvar name1 = node1.getClient(\"STATE_NAME\");\n\tvar name2 = node2.getClient(\"STATE_NAME\");\n\tif (name1 > name2) {\n\t    return 1;\n\t} else if (name1 == name2) {\n\t    return 0;\n\t} else {\n\t    return -1;\n\t}\n    };\n);\n"
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29103,
            "description": "设置表格上是否可见的过滤器，用于过滤哪些网元可见，哪些不可见",
            "itemtype": "method",
            "name": "twaver.controls.Table.setVisibleFunction",
            "params": [
                {
                    "name": "v",
                    "description": "是否可见的过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " table.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.Table"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29127,
            "description": "合并指定的节点",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.collapse",
            "params": [
                {
                    "name": "data",
                    "description": "指定的节点数据",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29134,
            "description": "合并所有的树节点对象，调用这个方法后，所有的孩子都会处于合并状态",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.collapseAll",
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29140,
            "description": "展开指定的树节点对象",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.expand",
            "params": [
                {
                    "name": "data",
                    "description": "指定的树节点的数据",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29147,
            "description": "展开所有的树节点对象，调用这个方法后，所有的孩子都会处于打开状态",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.expandAll",
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29153,
            "description": "获取TreeTable的勾选方式。勾选方式的可选值有：\n'default'：默认\n'children':勾选父亲时，会将孩子也勾选上\n'descendant':勾选父亲时，将孩子以及所有的子孙节点都勾选上\n'descendantAncestor':勾选节点时，会将其下的所有孩子以及子孙节点都勾选上，并且将这个节点的所有祖先节点也勾选上",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getCheckMode",
            "return": {
                "description": "TreeTable的勾选模式",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29164,
            "description": "获取TreeTable节点合并的图标，默认为twaver.Defaults.TREETABLE_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getCollapseIcon",
            "return": {
                "description": "TreeTable节点合并的图标",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29171,
            "description": "获取TreeTable中每列的线的颜色，默认为\ntwaver.Defaults.TREETABLE_COLUMN_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getColumnLineColor",
            "return": {
                "description": "每列线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29179,
            "description": "获取TreeTable上每列线的宽度，默认为twaver.Defaults.TREETABLE_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getColumnLineWidth",
            "return": {
                "description": "列的线宽",
                "type": "Number"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29186,
            "description": "获取TreeTable展开的图标，默认为twaver.Defaults.TREETABLE_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getExpandIcon",
            "return": {
                "description": "TreeTable展开的图标",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29193,
            "description": "获取TreeTable上父亲和孩子之间的缩进，默认为twaver.Defaults.TREETABLE_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getIndent",
            "return": {
                "description": "树节点的缩进",
                "type": "Number"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29200,
            "description": "获取指定的节点数据所在的层次",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getLevel",
            "params": [
                {
                    "name": "data",
                    "description": "指定的节点数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "节点的层次数",
                "type": "Number"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29208,
            "description": "获取根节点数据",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getRootData",
            "return": {
                "description": "TreeTable的根节点",
                "type": "twaver.Data"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29215,
            "description": "获取TreeTable的行高，默认为twaver.Defaults.TREETABLE_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getRowHeight",
            "return": {
                "description": "TreeTable的行高",
                "type": "Number"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29222,
            "description": "获取TreeTable上行之间线的颜色，默认为twaver.Defaults.TREETABLE_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getRowLineColor",
            "return": {
                "description": "TreeTable上行之间线的颜色",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29229,
            "description": "获取TreeTable上行之间线的宽度，默认为twaver.Defaults.TREETABLE_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getRowLineWidth",
            "return": {
                "description": "TreeTable上行之间线的宽度",
                "type": "Number"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29236,
            "description": "获取TreeTable上排序的列",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getSortColumn",
            "return": {
                "description": "排序的列",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29243,
            "description": "获取TreeTable上排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getSortFunction",
            "return": {
                "description": "排序的函数",
                "type": "Function"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29250,
            "description": "获取指定数据当前显示的图标，如果指定的数据是处于合并状态，就返回合并时的图标；如果是展开状态，返回的是展开的图标",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getToggleImage",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "TreeTable上指定的节点当前显示的图标",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29258,
            "description": "获取TreeTable上树的那一列",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getTreeColumn",
            "return": {
                "description": "包含树的那一列",
                "type": "twaver.Column"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29265,
            "description": "获取指定的数据在TreeTable上显示的标签值",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getTreeValue",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "table",
                    "description": "TreeTable上的表格",
                    "type": "twaver.controls.Table"
                }
            ],
            "return": {
                "description": "标签值",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29274,
            "description": "获取TreeTable的树节点不可勾选时的样式，默认为'none'。可选值有：\n'none'：没有任何样式\n'disabled':不可用",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getUncheckableStyle",
            "return": {
                "description": "树节点不可勾选时的样式",
                "type": "String"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29283,
            "description": "获取TreeTable上是否可见的过滤器，用于过滤哪些网元可见，哪些不可见",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.getVisibleFunction",
            "return": {
                "description": "是否可见的过滤器",
                "type": "Function"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29290,
            "description": "获取指定的数据是否可勾选",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isCheckable",
            "params": [
                {
                    "name": "data",
                    "description": "指定的节点对象",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "是否可勾选，true为可勾选，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29298,
            "description": "是否为勾选模型",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isCheckMode",
            "return": {
                "description": "true为勾选模型，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29305,
            "description": "判断指定的节点数据下的孩子是否可以排序。默认实现为可排序，用户可以重写此方法实现自己的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isChildrenSortable",
            "params": [
                {
                    "name": "parent",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为可排序，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29313,
            "description": "判断树表是否可编辑，默认为twaver.Defaults.TREETABLE_EDITABLE",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isEditable",
            "return": {
                "description": "true为可编辑，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29320,
            "description": "判断指定的TreeTable上的节点是否处于展开状态",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isExpanded",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                }
            ],
            "return": {
                "description": "true为展开状态，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29328,
            "description": "判断TreeTable上是否支持键盘删除数据的操作，默认为 twaver.Defaults.TREETABLE_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isKeyboardRemoveEnabled",
            "return": {
                "description": "true为支持键盘删除，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29335,
            "description": "判断TreeTable上是否支持键盘选择节点的操作，默认为twaver.Defaults.TREE_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isKeyboardSelectEnabled",
            "return": {
                "description": "true为可以键盘选择节点，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29342,
            "description": "判断当选中TreeTable中某个节点时，是否让其处于可见区域，默认为twaver.Defaults.TREETABLE_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isMakeVisibleOnSelected",
            "return": {
                "description": "true为处于可见区域，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29349,
            "description": "判断TreeTable的根节点是否可见",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.isRootVisible",
            "return": {
                "description": "true为可见，否则为false",
                "type": "Boolean"
            },
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29356,
            "description": "当渲染TreeTable上的标签时，调用此方法。用户不需要自己调用此方法，但可以重载此方法，添加自定义的逻辑",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.onLabelRendered",
            "params": [
                {
                    "name": "span",
                    "description": "包含数据元标签的Span",
                    "type": "HTMLSpanElement"
                },
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "label",
                    "description": "显示的标签值",
                    "type": "String"
                },
                {
                    "name": "row",
                    "description": "指定的行号",
                    "type": "Number"
                },
                {
                    "name": "level",
                    "description": "指定数据的层次数",
                    "type": "Number"
                },
                {
                    "name": "selected",
                    "description": "是否为选中状态",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29368,
            "description": "渲染树这一列的单元格显示样式",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.renderTreeCell",
            "params": [
                {
                    "name": "params",
                    "description": "参数的格式为 {div：div, data:data, rowIndex:index, selected:selected}的对象",
                    "type": "Object"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29376,
            "description": "设置TreeTable的勾选方式。勾选方式的可选值有：\n'default'：默认\n'children':勾选父亲时，会将孩子也勾选上\n'descendant':勾选父亲时，将孩子以及所有的子孙节点都勾选上\n'descendantAncestor':勾选节点时，会将其下的所有孩子以及子孙节点都勾选上，并且将这个节点的所有祖先节点也勾选上",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setCheckMode",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable的勾选模式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29387,
            "description": "设置TreeTable节点合并的图标，默认为twaver.Defaults.TREETABLE_COLLAPSE_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setCollapseIcon",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable节点合并的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29394,
            "description": "设置TreeTable中每列的线的颜色，默认为\ntwaver.Defaults.TREETABLE_COLUMN_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setColumnLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "每列线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29402,
            "description": "获取TreeTable上每列线的宽度，默认为twaver.Defaults.TREETABLE_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setColumnLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "列的线宽",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29409,
            "description": "设置树表是否可编辑，默认为twaver.Defaults.TREETABLE_EDITABLE",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setEditable",
            "params": [
                {
                    "name": "v",
                    "description": "true为可编辑，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29416,
            "description": "设置TreeTable展开的图标，默认为twaver.Defaults.TREETABLE_EXPAND_ICON",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setExpandIcon",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable展开的图标",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29423,
            "description": "设置TreeTable上父亲和孩子之间的缩进，默认为twaver.Defaults.TREETABLE_INDENT",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setIndent",
            "params": [
                {
                    "name": "v",
                    "description": "树节点的缩进",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29430,
            "description": "设置TreeTable上是否支持键盘删除数据的操作，默认为 twaver.Defaults.TREETABLE_KEYBOARD_REMOVE_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setKeyboardRemoveEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为支持键盘删除，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29437,
            "description": "设置TreeTable上是否支持键盘选择节点的操作，默认为twaver.Defaults.TREE_KEYBOARD_SELECT_ENABLED",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setKeyboardSelectEnabled",
            "params": [
                {
                    "name": "v",
                    "description": "true为可以键盘选择节点，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29444,
            "description": "设置当选中TreeTable中某个节点时，是否让其处于可见区域，默认为twaver.Defaults.TREETABLE_MAKE_VISIBLE_ON_SELECTED",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setMakeVisibleOnSelected",
            "params": [
                {
                    "name": "v",
                    "description": "true为处于可见区域，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29451,
            "description": "设置根节点数据",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setRootData",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable的根节点",
                    "type": "twaver.Data"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29458,
            "description": "设置TreeTable的根节点是否可见",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setRootVisible",
            "params": [
                {
                    "name": "v",
                    "description": "true为可见，否则为false",
                    "type": "Boolean"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29465,
            "description": "设置TreeTable的行高，默认为twaver.Defaults.TREETABLE_ROW_HEIGHT",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setRowHeight",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable的行高",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29472,
            "description": "设置TreeTable上行之间线的颜色，默认为twaver.Defaults.TREETABLE_ROW_LINE_COLOR",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setRowLineColor",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable上行之间线的颜色",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29479,
            "description": "设置TreeTable上行之间线的宽度，默认为twaver.Defaults.TREETABLE_COLUMN_LINE_WIDTH",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setRowLineWidth",
            "params": [
                {
                    "name": "v",
                    "description": "TreeTable上行之间线的宽度",
                    "type": "Number"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29486,
            "description": "设置TreeTable上排序的列",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setSortColumn",
            "params": [
                {
                    "name": "v",
                    "description": "排序的列",
                    "type": "twaver.Column"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29493,
            "description": "设置TreeTable排序的函数",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setSortFunction",
            "params": [
                {
                    "name": "v",
                    "description": "排序的函数",
                    "type": "Function"
                }
            ],
            "example": [
                " treetable.setSortFunction(function (d1, d2) {\n         if (d1.getName() < d2.getName()) {\n             return 1;\n         } else if (d1.getName() == d2.getName()) {\n              return 0;\n         } else {\n              return -1;\n         }\n});"
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29509,
            "description": "设置指定的数据在TreeTable上显示的标签值",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setTreeValue",
            "params": [
                {
                    "name": "data",
                    "description": "指定的数据",
                    "type": "twaver.Data"
                },
                {
                    "name": "value",
                    "description": "显示的标签值",
                    "type": "String"
                },
                {
                    "name": "table",
                    "description": "TreeTable包含的表格",
                    "type": "twaver.controls.Table"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29518,
            "description": "设置TreeTable的树节点不可勾选时的样式，默认为'none'。可选值有：\n'none'：没有任何样式\n'disabled':不可用",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setUncheckableStyle",
            "params": [
                {
                    "name": "v",
                    "description": "树节点不可勾选时的样式",
                    "type": "String"
                }
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29527,
            "description": "设置TreeTable上的节点是否可见的过滤器",
            "itemtype": "method",
            "name": "twaver.controls.TreeTable.setVisibleFunction",
            "params": [
                {
                    "name": "v",
                    "description": "是否可见的过滤器",
                    "type": "Function"
                }
            ],
            "example": [
                " tree.setVisibleFunction(function (element) {\n     return element instanceof twaver.Node;\n});"
            ],
            "class": "twaver.controls.TreeTable"
        },
        {
            "file": "html5/jsdoc/twaver.sdoc.js",
            "line": 29550,
            "description": "是否为子网的标志",
            "itemtype": "property",
            "name": "ISubNetwork",
            "type": "Boolean",
            "class": "twaver.ShapeSubNetwork"
        }
    ],
    "warnings": []
}